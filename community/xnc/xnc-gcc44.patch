--- src/lib/tool/commonfuncs.cxx.orig	2009-07-15 21:19:42.000000000 -0400
+++ src/lib/tool/commonfuncs.cxx	2009-07-15 21:23:58.000000000 -0400
@@ -117,9 +117,9 @@
 }
 
 //Get first content of dirname
-char*   get_first_content(const char *curdir, char *cont)
+const char*   get_first_content(const char *curdir, char *cont)
 {
-        char *b=strchr(curdir,'/');
+        const char *b=strchr(curdir,'/');
         if(b)
           {
                   strncpy(cont,curdir,b-curdir);
--- src/include/commonfuncs.h.orig	2009-07-15 21:24:37.000000000 -0400
+++ src/include/commonfuncs.h	2009-07-15 21:25:04.000000000 -0400
@@ -15,7 +15,7 @@
 extern int   path_to_fullpath(char* dest, char *srcdir);
 extern void  add_path_content(char *curdir, const char *cont, int vms_host=0);
 extern void  upper_path(char *curdir, int vms_host=0);
-extern char* get_first_content(const char *curdir, char *cont);
+extern const char* get_first_content(const char *curdir, char *cont);
 extern void  get_last_content(char *curdir, char *cont);
 extern void  get_last_and_rest_content(char* curdir, char* last, char* rest);
 extern void  str_swap(char *str1, char *str2);
--- src/lib/vfs/afs.cxx.orig	2009-07-15 21:47:44.000000000 -0400
+++ src/lib/vfs/afs.cxx	2009-07-15 21:50:02.000000000 -0400
@@ -29,7 +29,7 @@
 // The return value is static, so copy it before using the
 // method again!
 
-char *create_dirs(char *rootdir, char* dirlist)
+char *create_dirs(char *rootdir, const char* dirlist)
 {
    char str[L_MAXPATH];
    char cont[FLIST_NAME];
@@ -1350,7 +1350,7 @@
     add_path_content(curdir, to_dir);
   } else        //If we here then we doing cd not to subdir but to subdir/subdir...
   {
-    char *s=to_dir;
+    const char *s=to_dir;
     if(*s)
     {
       do
--- src/lib/vfs/ftpfs.cxx.orig	2009-07-15 21:50:48.000000000 -0400
+++ src/lib/vfs/ftpfs.cxx	2009-07-15 21:54:26.000000000 -0400
@@ -1413,7 +1413,7 @@
                  return;
          if(strcmp(dir,"/"))
          {
-                 char *s=dir;
+                 const char *s=dir;
                  if(*s=='/')         //Skip leading '/'
                          s++;
                  do
