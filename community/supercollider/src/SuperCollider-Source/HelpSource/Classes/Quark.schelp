class:: Quark
summary:: Package of SC classes and extensions
categories:: Quarks
related:: Guides/UsingQuarks, Classes/Quarks

description::

A Quark is a package of SC classes, helpfiles and other SC code.

A Quark object is created from the quark file found at code::Quarks.local.path +/+ "DIRECTORY" +/+ nameOfQuark ++ ".quark"::.
These Quark objects are mostly used just by the link::Classes/Quarks:: class, and you usually don't need to deal with them at all. But to publish a quark, you do need to make the quark file.

subsection:: Format of the .quark file

This quarkfile is written in sc code, and should contain a dictionary with basic information about the package.

code::
(
// required:
    \name:           "theName",
    \path:           "foldername", // almost always the same as the quark name
    \summary:        "Human readable summary",
    \author:         "My Name",

// optional:
    \version:        1.0, // must be a float
    \organization:   "My Organization",
    \country:        "My Country",
    \since:          "2004",
    \schelp:         "Classes/MyClass",
    \ext_dependancy: "Information on additional software needed to run this quark properly",
    \url:            "http://www.strangeQuark.de",

// If the quark depends on other quarks, you can specify it as a list containing:
// (1) strings (just the quark name)
    \dependencies:   "nameOfDependantQuark"
// (2) key->value pairs (name->version)
//  \dependencies:   [("nameOfDependantQuark" -> 1.0)]
// or (3) arrays with info in this order: [name, version, repositoryBaseUrl]
//  \dependencies:   [["nameOfDependantQuark", 1.0, "https://svn.weirdserver.be/trunk/weirdquarks"]]

)
::

Of particular importance for the Quarks interface class is the PATH. This is the path relative to the quark directory.
In most cases this is simply the name of the quark and also the name of the folder. However, you may wish to create a parent folder and then keep several quarks inside that, in which case your path would be: parentfolder/quarkname

It may even be possible to nest quarks inside of quarks (a kind of aggregate package), though a better way to do that would be to define an empty quark (the aggregate) and specify the other sub quarks as dependencies.

The value of code::\schelp:: optionally sets the main help file for the quark. It is a help path relative to an included teletype::HelpSource:: folder.
For example, if the quark contains teletype::HelpSource/Reference/MyQuark.schelp:: one could use:
code::
    \schelp: "Reference/MyQuark"
::
It is used by link::#-help::. If no code::\schelp:: is given, it will open the category browser showing all helpfiles for the quark.

note::
The old help system (sc version 3.4) used code::\helpdoc::, and the new help system (link::Classes/SCDoc::) uses code::\schelp:: instead to be able to support both old and new helpfiles during the transition to the new help system.
::

warning:: Please test that you don't have any syntax errors in your quark file before commiting it.::

classmethods::
method:: find
Return the Quark object with specified name, if found.

instancemethods::
method:: name
The name of the quark.
method:: summary
The summary of the quark.
method:: version
The version of the quark.
method:: author
The author of the quark.
method:: path
The path of the quark.
method:: info
The whole info blob as given in the .quark file.
method:: help
Open the main helpfile for this quark as given by the code::\schelp:: key in the directory file,
or the category browser page showing all helpfiles for this quark if no main helpfile was specified.
This method falls back to opening the old help as given by code::\helpdoc:: if above fails.

