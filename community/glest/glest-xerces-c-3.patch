diff -wbBur source/shared_lib/sources/platform/posix/socket.cpp source2/shared_lib/sources/platform/posix/socket.cpp
--- source/shared_lib/sources/platform/posix/socket.cpp	2009-04-02 19:49:26.000000000 +0000
+++ source2/shared_lib/sources/platform/posix/socket.cpp	2009-09-08 15:30:52.000000000 +0000
@@ -5,6 +5,7 @@
 //the terms of the GNU General Public License as published by the Free Software 
 //Foundation; either version 2 of the License, or (at your option) any later 
 //version.
+#include <stdio.h>
 
 #include "socket.h"
 
diff -wbBur source/shared_lib/sources/xml/xml_parser.cpp source2/shared_lib/sources/xml/xml_parser.cpp
--- source/shared_lib/sources/xml/xml_parser.cpp	2009-02-11 00:58:44.000000000 +0000
+++ source2/shared_lib/sources/xml/xml_parser.cpp	2009-09-08 15:33:14.000000000 +0000
@@ -87,10 +87,10 @@
 	
 	try{
 		ErrorHandler errorHandler;
-		DOMBuilder *parser= (static_cast<DOMImplementationLS*>(implementation))->createDOMBuilder(DOMImplementationLS::MODE_SYNCHRONOUS, 0);
-		parser->setErrorHandler(&errorHandler);
-		parser->setFeature(XMLUni::fgXercesSchemaFullChecking, true);
-		parser->setFeature(XMLUni::fgDOMValidation, true);
+		DOMLSParser       *parser = (static_cast<DOMImplementationLS*>(implementation))->createLSParser(DOMImplementationLS::MODE_SYNCHRONOUS, 0);
+		DOMConfiguration  *config = parser->getDomConfig();
+		config->setParameter(XMLUni::fgXercesSchemaFullChecking, true);
+		config->setParameter(XMLUni::fgDOMValidate, true);
 		DOMDocument *document= parser->parseURI(path.c_str());
 		
 		if(document==NULL){
@@ -119,9 +119,14 @@
 		}
 		
 		LocalFileFormatTarget file(path.c_str());
-		DOMWriter* writer = implementation->createDOMWriter();
-		writer->setFeature(XMLUni::fgDOMWRTFormatPrettyPrint, true);
-		writer->writeNode(&file, *document);
+		DOMLSSerializer *serializer = implementation->createLSSerializer();
+		DOMLSOutput* output=implementation->createLSOutput();
+		DOMConfiguration* config=serializer->getDomConfig();
+		config->setParameter(XMLUni::fgDOMWRTFormatPrettyPrint,true);
+		output->setByteStream(&file);
+		serializer->write(document,output);
+		output->release();
+		serializer->release();
 		document->release();
 	}
 	catch(const DOMException &e){
