# Maintainer: Christian Hesse <mail@eworm.de>
# Contributor: Alexandre Boily <alexandreboily@gmail.com>
# Contributor: Illarion Kovalchuk <illarion.kovalchuk@gmail.com>
# Contributor: totoloco <totoloco at gmail _dot_com>
# Contributor: Ionut Biru <ibiru@archlinux.org>

# ALARM: Kevin Mihelich <kevin@archlinuxarm.org>
#  - use our cxxflags plus -fsigned-char
#  - patch to fix build on 32-bit
#  - remove -Wno-deprecated-copy flag from CMakeLists.txt

highmem=1

pkgname=mysql-workbench
pkgver=8.0.31
pkgrel=1
_mysql_version=${pkgver}
_connector_version=${pkgver}
_gdal_version=3.5.1
_boost_version=1.77.0
# bump the antlr4 version as required, this is to match the jar file name
_antlr4_version=4.9.3
pkgdesc='A cross-platform, visual database design tool developed by MySQL'
arch=('x86_64')
url='https://www.mysql.com/products/workbench/'
license=('GPL2')
depends=('cairo' 'antlr4-runtime' 'curl' 'desktop-file-utils' 'freetype2' 'giflib'
         'gtkmm3' 'hicolor-icon-theme' 'json-c' 'libgl' 'libsecret' 'libssh'
         'libxml2' 'libzip' 'pcre' 'proj' 'python' 'rapidjson' 'unixodbc'
         'vsqlite++' 'zstd')
makedepends=('cmake' 'boost' 'mesa' 'swig' 'java-runtime' 'imagemagick'
	# tmporary fix for antlr4...
	#"antlr4=${_antlr4_version}"
	'git'
)
validpgpkeys=('859BE8D7C586F538430B19C2467B942D3A79BD29') # MySQL Release Engineering <mysql-build@oss.oracle.com>
source=("https://cdn.mysql.com/Downloads/MySQLGUITools/mysql-workbench-community-${pkgver}-src.tar.gz"{,.asc}
	"https://cdn.mysql.com/Downloads/MySQL-${_mysql_version%.*}/mysql-${_mysql_version}.tar.gz"{,.asc}
	"https://cdn.mysql.com/Downloads/Connector-C++/mysql-connector-c++-${_connector_version}-src.tar.gz"{,.asc}
	"https://download.osgeo.org/gdal/${_gdal_version}/gdal-${_gdal_version}.tar.xz"
	"https://downloads.sourceforge.net/project/boost/boost/${_boost_version}/boost_${_boost_version//./_}.tar.bz2"
	'https://www.antlr.org/download/antlr-4.9.3-complete.jar'
	'https://www.antlr.org/download/antlr4-cpp-runtime-4.9.3-source.zip'
	'0001-mysql-workbench-no-check-for-updates.patch'
	'0002-disable-unsupported-operating-system-warning.patch'
	'0003-include-list.patch'
	'0001-fix-buiild-for-32-bit.patch'
	'atomic.patch'
	'arch_linux_profile.xml')
sha256sums=('86ab0945851209ce3c3a280570edee983d5839439d983df3b7544fe8c69f32c8'
            'SKIP'
            '67bb8cba75b28e95c7f7948563f01fb84528fcbb1a35dba839d4ce44fe019baa'
            'SKIP'
            '1d217bc84c9b9b3cc342f975730519fe6957a955f19c81ea8366bf1df26d10b0'
            'SKIP'
            'd12c30a9eacdeaab493c0d1c9f88eb337c9cbb5bb40744c751bdd5a5af166ab6'
            'fc9f85fc030e233142908241af7a846e60630aa7388de9a5fafb1f3a26840854'
            'afcd40946d3de4d81e28d7c88d467289e0587285d27adb172aecc5494a17df36'
            '5f0af6efd81f476c3e775c486eb0a71c25d6bbc14373e88a64690e2738d68e03'
            'cdf687f23bc6e8d52dbee9fa02b23d755e80f88476f0fc2e7c4c71cdfed3792f'
            '2d0f6dcf38f22e49ef7ab9de0230484f1ffac41b7ac40feaf5ef4538ae2f7a18'
            'e7e66ba68a21a0da87f0513f2b9550359c923a94aa7d16afe6ead063322e3d53'
            '719501bbd1de673767007c429feed2fc48d1176d456161c4ba69cf3165c0438a'
            '17294a67637ab7ffff5c39262208e63d21acac72cc2492f616ef1d8e0ae9ac02'
            'd816164098c90c432b4fe590708c14f95ab137abfe16ad1b7d498b2e83c0e265')

prepare() {
	cd "${srcdir}/mysql-workbench-community-${pkgver}-src/"

	# Disable 'Help' -> 'Check for Updates'
	# Updates are provided via Arch Linux packages
	patch -Np1 < "${srcdir}"/0001-mysql-workbench-no-check-for-updates.patch

	# disable unsupported operating system warning
	patch -Np1 < "${srcdir}"/0002-disable-unsupported-operating-system-warning.patch

	# add missing include
	patch -Np1 < "${srcdir}"/0003-include-list.patch

	# remove '-Werror'
	sed -i '/^\s*set/s| -Werror||' CMakeLists.txt

	# GCC 7.x complains about unsupported flag
	sed -i 's| -Wno-deprecated-register||' ext/scintilla/gtk/CMakeLists.txt

	# be happy with more recent antlr
	sed -i "/set(ANTLR_JAR_FILENAME/s/4.9.1/${_antlr4_version}/" CMakeLists.txt

	# remove -Wno-deprecated-copy
	sed -i 's|-Wno-deprecated-copy||' CMakeLists.txt

	# fix build with 32-bit
	[[ $CARCH != "aarch64" ]] && patch -Np1 < "${srcdir}"/0001-fix-buiild-for-32-bit.patch

	# link v6 against libatomic
	cd "${srcdir}/mysql-${_mysql_version}"
	if [[ $CARCH == "armv6h" ]]; then
		patch -Np0 < "${srcdir}"/atomic.patch
	fi
}

build() {
	# Build mysql
	mkdir "${srcdir}/mysql-${_mysql_version}-build"
	cd "${srcdir}/mysql-${_mysql_version}-build"
	echo "Configure mysql..."
	cmake "${srcdir}/mysql-${_mysql_version}" \
		-DWITHOUT_SERVER=ON \
		-DBUILD_CONFIG=mysql_release \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DSYSCONFDIR=/etc/mysql \
		-DMYSQL_DATADIR=/var/lib/mysql \
		-DWITH_BOOST="${srcdir}/boost_${_boost_version//./_}"
	echo "Build mysql..."
	make
	echo "Install mysql..."
	make DESTDIR="${srcdir}/install-bundle/" install

	# Build mysql-connector-c++
	mkdir "${srcdir}/mysql-connector-c++-${_connector_version}-src-build"
	cd "${srcdir}/mysql-connector-c++-${_connector_version}-src-build"
	echo "Configure mysql-connector-c++..."
	cmake "${srcdir}/mysql-connector-c++-${_connector_version}-src" \
		-Wno-dev \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_BUILD_TYPE=Release \
		-DINSTALL_LIB_DIR=lib \
		-DMYSQL_DIR="${srcdir}/install-bundle/" \
		-DMYSQL_CONFIG_EXECUTABLE="${srcdir}/install-bundle/usr/bin/mysql_config" \
		-DWITH_JDBC=ON
	echo "Build mysql-connector-c++..."
	make
	echo "Install mysql-connector-c++..."
	make DESTDIR="${srcdir}/install-bundle/" install

	# Build gdal
	cd "${srcdir}/gdal-${_gdal_version}"
	echo "Configure gdal..."
	./configure \
		--prefix=/usr \
		--includedir=/usr/include/gdal \
		--with-sqlite3 \
		--with-mysql="${srcdir}/install-bundle/usr/bin/mysql_config" \
		--with-curl \
		--without-jasper
	echo "Build gdal..."
	make LD_LIBRARY_PATH="${srcdir}/install-bundle/usr/lib/"
	echo "Install gdal..."
	make LD_LIBRARY_PATH="${srcdir}/install-bundle/usr/lib/" DESTDIR="${srcdir}/install-bundle/" install

	# temporary fix until wb builds against antlr4-runtime 4.10.x...
	mkdir "${srcdir}/antlr4-build"
	cd "${srcdir}/antlr4-build"
	cmake ../ \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_CXX_STANDARD=17 \
		-DANTLR4_INSTALL=ON \
		-DINSTALL_GTEST=OFF
	make
	make DESTDIR="${srcdir}/install-bundle/" install

	# Build MySQL Workbench itself with bundled libs
	mkdir "${srcdir}/mysql-workbench-community-${pkgver}-src-build"
	cd "${srcdir}/mysql-workbench-community-${pkgver}-src-build"
	echo "Configure mysql-workbench..."
	cmake "${srcdir}/mysql-workbench-community-${pkgver}-src" \
		-Wno-dev \
		-DCMAKE_INSTALL_PREFIX:PATH=/usr \
		-DCMAKE_CXX_FLAGS="${CXXFLAGS} -std=c++17 -fsigned-char" \
		-DCMAKE_BUILD_TYPE=Release \
		-DMySQL_CONFIG_PATH="${srcdir}/install-bundle/usr/bin/mysql_config" \
		-DMySQLCppConn_LIBRARY="${srcdir}/install-bundle/usr/lib/libmysqlcppconn.so" \
		-DMySQLCppConn_INCLUDE_DIR="${srcdir}/install-bundle/usr/include/jdbc" \
		-DGDAL_INCLUDE_DIR="${srcdir}/install-bundle/usr/include" \
		-DGDAL_LIBRARY="${srcdir}/install-bundle/usr/lib/libgdal.so" \
		-DANTLR4_INCLUDE_DIR="${srcdir}/install-bundle/usr/include" \
		-DANTLR4_LIBRARY="${srcdir}/install-bundle/usr/lib/libantlr4-runtime.so" \
		-DWITH_ANTLR_JAR="${srcdir}/antlr-4.9.3-complete.jar" \
		-DUNIXODBC_INCLUDE_DIR='/usr/include' \
		-DUSE_BUNDLED_MYSQLDUMP=1
	echo "Build mysql-workbench..."
	make
}

package() {
	# install bundled libraries
	for LIBRARY in $(find "${srcdir}/install-bundle/usr/lib/" -type f -regex '.*/lib\(gdal\|mysql\(client\|cppconn\)\)\.so\..*'); do
		BASENAME="$(basename "${LIBRARY}")"
		SONAME="$(readelf -d "${LIBRARY}" | grep -Po '(?<=(Library soname: \[)).*(?=\])')"
		install -D -m0755 "${LIBRARY}" "${pkgdir}"/usr/lib/mysql-workbench/"${BASENAME}"
		ln -s "${BASENAME}" "${pkgdir}"/usr/lib/mysql-workbench/"${SONAME}"
	done
	install -D -m0755 "${srcdir}/install-bundle/usr/lib/libantlr4-runtime.so.4.9.3" "${pkgdir}/usr/lib/mysql-workbench/libantlr4-runtime.so.4.9.3"

	# install bundled mysql and mysqldump
	install -m0755 "${srcdir}/install-bundle/usr/bin/mysql"{,dump} "${pkgdir}"/usr/lib/mysql-workbench/

	# install MySQL Workbench itself
	cd "${srcdir}/mysql-workbench-community-${pkgver}-src-build"

	make DESTDIR="${pkgdir}" install

	# icons
	for SIZE in 16 24 32 48 64 96 128; do
		# set modify/create for reproducible builds
		convert -scale ${SIZE} +set date:create +set date:modify \
			"${srcdir}/mysql-workbench-community-${pkgver}-src/images/icons/MySQLWorkbench-128.png" \
			"${srcdir}/mysql-workbench.png"
		install -D -m0644 "${srcdir}/mysql-workbench.png" "${pkgdir}/usr/share/icons/hicolor/${SIZE}x${SIZE}/apps/mysql-workbench.png"
	done

	install -D -m 0644 "${srcdir}"/arch_linux_profile.xml \
		"${pkgdir}"/usr/share/mysql-workbench/mysql.profiles/Arch_Linux_\(MariaDB\).xml
}
