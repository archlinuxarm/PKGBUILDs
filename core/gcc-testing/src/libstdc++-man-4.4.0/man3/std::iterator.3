.TH "std::iterator" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::iterator \- Common iterator class.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Distance \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Category \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef _Pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> struct std::iterator< _Category, _Tp, _Distance, _Pointer, _Reference >"
Common iterator class. 

This class does nothing but define nested typedefs. Iterator classes can inherit from this class to save some work. The typedefs are then used in specializations and overloading.
.PP
In particular, there are no default implementations of requirements such as \fCoperator++\fP and the like. (How could there be?) 
.PP
Definition at line 104 of file stl_iterator_base_types.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> typedef _Distance \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBdifference_type\fP"
.PP
Distance between iterators is represented as this type. 
.PP
Reimplemented in \fBstd::reverse_iterator< _Iterator >\fP.
.PP
Definition at line 111 of file stl_iterator_base_types.h.
.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> typedef _Category \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBiterator_category\fP"
.PP
One of the \fBtag types\fP. 
.PP
Definition at line 107 of file stl_iterator_base_types.h.
.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> typedef _Pointer \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBpointer\fP"
.PP
This type represents a pointer-to-value_type. 
.PP
Reimplemented in \fBstd::reverse_iterator< _Iterator >\fP.
.PP
Definition at line 113 of file stl_iterator_base_types.h.
.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> typedef _Reference \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBreference\fP"
.PP
This type represents a reference-to-value_type. 
.PP
Reimplemented in \fBstd::reverse_iterator< _Iterator >\fP.
.PP
Definition at line 115 of file stl_iterator_base_types.h.
.SS "template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp*, typename _Reference = _Tp&> typedef _Tp \fBstd::iterator\fP< _Category, _Tp, _Distance, _Pointer, _Reference >::\fBvalue_type\fP"
.PP
The type 'pointed to' by the \fBiterator\fP. 
.PP
Definition at line 109 of file stl_iterator_base_types.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
