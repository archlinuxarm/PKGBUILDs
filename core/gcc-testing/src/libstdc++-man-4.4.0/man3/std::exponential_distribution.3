.TH "std::exponential_distribution" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::exponential_distribution \- An exponential continuous distribution for random numbers.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _RealType \fBinput_type\fP"
.br
.ti -1c
.RI "typedef _RealType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBexponential_distribution\fP (const result_type &__lambda=result_type(1))"
.br
.ti -1c
.RI "_RealType \fBlambda\fP () const "
.br
.ti -1c
.RI "template<class _UniformRandomNumberGenerator > result_type \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, _Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBexponential_distribution\fP< _RealType1 > &__x)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, _Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBexponential_distribution\fP &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _RealType = double> class std::exponential_distribution< _RealType >"
An exponential continuous distribution for random numbers. 

The formula for the exponential probability mass function is $ p(x) = \lambda e^{-\lambda x} $.
.PP
Mean$ \frac{1}{\lambda} $ Median$ \frac{\ln 2}{\lambda} $ Mode$ zero $ Range$[0, \infty]$ Standard Deviation$ \frac{1}{\lambda} $ Distribution Statistics
.PP
Definition at line 2148 of file tr1_impl/random.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _RealType  = double> \fBstd::exponential_distribution\fP< _RealType >::\fBexponential_distribution\fP (const result_type & __lambda = \fCresult_type(1)\fP)\fC [inline, explicit]\fP"
.PP
Constructs an exponential distribution with inverse scale parameter $ \lambda $. 
.PP
Definition at line 2161 of file tr1_impl/random.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _RealType  = double> _RealType \fBstd::exponential_distribution\fP< _RealType >::lambda () const\fC [inline]\fP"
.PP
Gets the inverse scale parameter of the distribution. 
.PP
Definition at line 2171 of file tr1_impl/random.
.SS "template<typename _RealType  = double> void \fBstd::exponential_distribution\fP< _RealType >::reset ()\fC [inline]\fP"
.PP
Resets the distribution.
.PP
Has no effect on exponential distributions. 
.PP
Definition at line 2180 of file tr1_impl/random.
.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename _RealType  = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > & __os, const \fBexponential_distribution\fP< _RealType1 > & __x)\fC [friend]\fP"
.PP
Inserts a exponential_distribution random number distribution \fC__x\fP into the output stream \fC__os\fP.
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream. 
.br
\fI__x\fP A exponential_distribution random number distribution.
.RE
.PP
\fBReturns:\fP
.RS 4
The output stream with the state of \fC__x\fP inserted or in an error state. 
.RE
.PP

.SS "template<typename _RealType  = double> template<typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > & __is, \fBexponential_distribution\fP< _RealType > & __x)\fC [friend]\fP"
.PP
Extracts a exponential_distribution random number distribution \fC__x\fP from the input stream \fC__is\fP.
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream. 
.br
\fI__x\fP A exponential_distribution random number generator engine.
.RE
.PP
\fBReturns:\fP
.RS 4
The input stream with \fC__x\fP extracted or in an error state. 
.RE
.PP

.PP
Definition at line 2214 of file tr1_impl/random.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
