.TH "Adaptors for pointers to members" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Adaptors for pointers to members \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBstd::const_mem_fun1_ref_t< _Ret, _Tp, _Arg >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::const_mem_fun1_t< _Ret, _Tp, _Arg >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::const_mem_fun_ref_t< _Ret, _Tp >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::const_mem_fun_t< _Ret, _Tp >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::mem_fun1_ref_t< _Ret, _Tp, _Arg >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::mem_fun1_t< _Ret, _Tp, _Arg >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::mem_fun_ref_t< _Ret, _Tp >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::mem_fun_t< _Ret, _Tp >\fP"
.br
.RI "\fIOne of the \fBadaptors for member pointers\fP. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Ret , typename _Tp , typename _Arg > mem_fun1_t< _Ret, _Tp, _Arg > \fBstd::mem_fun\fP (_Ret(_Tp::*__f)(_Arg))"
.br
.ti -1c
.RI "template<typename _Ret , typename _Tp > mem_fun_t< _Ret, _Tp > \fBstd::mem_fun\fP (_Ret(_Tp::*__f)())"
.br
.ti -1c
.RI "template<typename _Ret , typename _Tp , typename _Arg > mem_fun1_ref_t< _Ret, _Tp, _Arg > \fBstd::mem_fun_ref\fP (_Ret(_Tp::*__f)(_Arg))"
.br
.ti -1c
.RI "template<typename _Ret , typename _Tp > mem_fun_ref_t< _Ret, _Tp > \fBstd::mem_fun_ref\fP (_Ret(_Tp::*__f)())"
.br
.in -1c
.SH "Detailed Description"
.PP 
There are a total of 8 = 2^3 function objects in this family. (1) Member functions taking no arguments vs member functions taking one argument. (2) Call through pointer vs call through reference. (3) Const vs non-const member function.
.PP
All of this complexity is in the function objects themselves. You can ignore it by using the helper function mem_fun and mem_fun_ref, which create whichever type of adaptor is appropriate. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
