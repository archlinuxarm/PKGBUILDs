.TH "Atomics" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Atomics \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::atomic< _Tp >\fP"
.br
.RI "\fI\fBatomic\fP 29.4.3, Generic \fBatomic\fP type, primary class template. \fP"
.ti -1c
.RI "struct \fBstd::atomic< _Tp * >\fP"
.br
.RI "\fIPartial specialization for pointer types. \fP"
.ti -1c
.RI "struct \fBstd::atomic< bool >\fP"
.br
.RI "\fIExplicit specialization for bool. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char >\fP"
.br
.RI "\fIExplicit specialization for char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char16_t >\fP"
.br
.RI "\fIExplicit specialization for char16_t. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char32_t >\fP"
.br
.RI "\fIExplicit specialization for char32_t. \fP"
.ti -1c
.RI "struct \fBstd::atomic< int >\fP"
.br
.RI "\fIExplicit specialization for int. \fP"
.ti -1c
.RI "struct \fBstd::atomic< long >\fP"
.br
.RI "\fIExplicit specialization for long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< long long >\fP"
.br
.RI "\fIExplicit specialization for long long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< short >\fP"
.br
.RI "\fIExplicit specialization for short. \fP"
.ti -1c
.RI "struct \fBstd::atomic< signed char >\fP"
.br
.RI "\fIExplicit specialization for signed char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned char >\fP"
.br
.RI "\fIExplicit specialization for unsigned char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned int >\fP"
.br
.RI "\fIExplicit specialization for unsigned int. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned long >\fP"
.br
.RI "\fIExplicit specialization for unsigned long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned long long >\fP"
.br
.RI "\fIExplicit specialization for unsigned long long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned short >\fP"
.br
.RI "\fIExplicit specialization for unsigned short. \fP"
.ti -1c
.RI "struct \fBstd::atomic< void * >\fP"
.br
.RI "\fIExplicit specialization for void*. \fP"
.ti -1c
.RI "struct \fBstd::atomic< wchar_t >\fP"
.br
.RI "\fIExplicit specialization for wchar_t. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_ATOMIC_CMPEXCHNG_\fP(__a, __e, __m, __x)"
.br
.ti -1c
.RI "#define \fB_ATOMIC_LOAD_\fP(__a, __x)"
.br
.ti -1c
.RI "#define \fB_ATOMIC_MODIFY_\fP(__a, __o, __m, __x)"
.br
.ti -1c
.RI "#define \fB_ATOMIC_STORE_\fP(__a, __m, __x)"
.br
.ti -1c
.RI "#define \fB_GLIBCXX_ATOMIC_NAMESPACE\fP"
.br
.ti -1c
.RI "#define \fB_GLIBCXX_ATOMIC_PROPERTY\fP"
.br
.ti -1c
.RI "#define \fBATOMIC_ADDRESS_LOCK_FREE\fP"
.br
.ti -1c
.RI "#define \fBATOMIC_FLAG_INIT\fP"
.br
.ti -1c
.RI "#define \fBATOMIC_INTEGRAL_LOCK_FREE\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct std::__atomic_flag_base \fBstd::__atomic_flag_base\fP"
.br
.ti -1c
.RI "typedef \fBatomic_short\fP \fBstd::atomic_int_fast16_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_int\fP \fBstd::atomic_int_fast32_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_llong\fP \fBstd::atomic_int_fast64_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_schar\fP \fBstd::atomic_int_fast8_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_short\fP \fBstd::atomic_int_least16_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_int\fP \fBstd::atomic_int_least32_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_llong\fP \fBstd::atomic_int_least64_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_schar\fP \fBstd::atomic_int_least8_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_llong\fP \fBstd::atomic_intmax_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_long\fP \fBstd::atomic_intptr_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_long\fP \fBstd::atomic_ptrdiff_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ulong\fP \fBstd::atomic_size_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_long\fP \fBstd::atomic_ssize_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ushort\fP \fBstd::atomic_uint_fast16_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_uint\fP \fBstd::atomic_uint_fast32_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ullong\fP \fBstd::atomic_uint_fast64_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_uchar\fP \fBstd::atomic_uint_fast8_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ushort\fP \fBstd::atomic_uint_least16_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_uint\fP \fBstd::atomic_uint_least32_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ullong\fP \fBstd::atomic_uint_least64_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_uchar\fP \fBstd::atomic_uint_least8_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ullong\fP \fBstd::atomic_uintmax_t\fP"
.br
.ti -1c
.RI "typedef \fBatomic_ulong\fP \fBstd::atomic_uintptr_t\fP"
.br
.ti -1c
.RI "typedef enum \fBstd::memory_order\fP \fBstd::memory_order\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBstd::memory_order\fP { \fBmemory_order_relaxed\fP, \fBmemory_order_consume\fP, \fBmemory_order_acquire\fP, \fBmemory_order_release\fP, \fBmemory_order_acq_rel\fP, \fBmemory_order_seq_cst\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "volatile __atomic_flag_base * \fBstd::__atomic_flag_for_address\fP (const volatile void *__z) __attribute__((const ))"
.br
.ti -1c
.RI "void \fBstd::__atomic_flag_wait_explicit\fP (volatile __atomic_flag_base *, memory_order)"
.br
.ti -1c
.RI "memory_order \fBstd::__calculate_memory_order\fP (memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_strong\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong\fP (volatile atomic_bool *__a, bool *__i1, bool __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong\fP (volatile atomic_address *__a, void **__v1, void *__v2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile atomic_bool *__a, bool *__i1, bool __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile atomic_address *__a, void **__v1, void *__v2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_weak\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak\fP (volatile atomic_bool *__a, bool *__i1, bool __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak\fP (volatile atomic_address *__a, void **__v1, void *__v2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile atomic_bool *__a, bool *__i1, bool __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile atomic_address *__a, void **__v1, void *__v2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_exchange\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "bool \fBstd::atomic_exchange\fP (volatile atomic_bool *__a, bool __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_exchange\fP (volatile atomic_address *__a, void *__v)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_exchange_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_exchange_explicit\fP (volatile atomic_bool *__a, bool __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_exchange_explicit\fP (volatile atomic_address *__a, void *__v, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_add\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_add\fP (volatile atomic_address *__a, ptrdiff_t __d)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_add_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_add_explicit\fP (volatile atomic_address *__a, ptrdiff_t __d, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_and\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_and_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_or\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_or_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_sub\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_sub\fP (volatile atomic_address *__a, ptrdiff_t __d)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_sub_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_sub_explicit\fP (volatile atomic_address *__a, ptrdiff_t __d, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_xor\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_xor_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_flag_clear\fP (volatile __atomic_flag_base *__a)"
.br
.ti -1c
.RI "void \fBstd::atomic_flag_clear_explicit\fP (volatile __atomic_flag_base *, memory_order)"
.br
.ti -1c
.RI "void \fBstd::atomic_flag_clear_explicit\fP (volatile atomic_flag *__a, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_flag_test_and_set\fP (volatile __atomic_flag_base *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_flag_test_and_set_explicit\fP (volatile __atomic_flag_base *, memory_order)"
.br
.ti -1c
.RI "bool \fBstd::atomic_flag_test_and_set_explicit\fP (volatile atomic_flag *__a, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_is_lock_free\fP (const volatile __atomic_base< _ITp > *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_is_lock_free\fP (const volatile atomic_bool *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_is_lock_free\fP (const volatile atomic_address *__a)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_load\fP (const volatile __atomic_base< _ITp > *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_load\fP (const volatile atomic_bool *__a)"
.br
.ti -1c
.RI "void * \fBstd::atomic_load\fP (const volatile atomic_address *__a)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_load_explicit\fP (const volatile __atomic_base< _ITp > *__a, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_load_explicit\fP (const volatile atomic_bool *__a, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_load_explicit\fP (const volatile atomic_address *__a, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > void \fBstd::atomic_store\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void \fBstd::atomic_store\fP (volatile atomic_bool *__a, bool __i)"
.br
.ti -1c
.RI "void \fBstd::atomic_store\fP (volatile atomic_address *__a, void *__v)"
.br
.ti -1c
.RI "template<typename _ITp > void \fBstd::atomic_store_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_store_explicit\fP (volatile atomic_bool *__a, bool __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_store_explicit\fP (volatile atomic_address *__a, void *__v, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic< _Tp * >::compare_exchange_strong\fP (_Tp *&, _Tp *, memory_order=memory_order_seq_cst) volatile"
.br
.ti -1c
.RI "bool \fBstd::atomic< _Tp * >::compare_exchange_strong\fP (_Tp *&, _Tp *, memory_order, memory_order) volatile"
.br
.ti -1c
.RI "bool \fBstd::atomic< _Tp * >::compare_exchange_weak\fP (_Tp *&, _Tp *, memory_order=memory_order_seq_cst) volatile"
.br
.ti -1c
.RI "bool \fBstd::atomic< _Tp * >::compare_exchange_weak\fP (_Tp *&, _Tp *, memory_order, memory_order) volatile"
.br
.ti -1c
.RI "_Tp * \fBstd::atomic< _Tp * >::exchange\fP (_Tp *, memory_order=memory_order_seq_cst) volatile"
.br
.ti -1c
.RI "_Tp * \fBstd::atomic< _Tp * >::fetch_add\fP (ptrdiff_t, memory_order=memory_order_seq_cst) volatile"
.br
.ti -1c
.RI "_Tp * \fBstd::atomic< _Tp * >::fetch_sub\fP (ptrdiff_t, memory_order=memory_order_seq_cst) volatile"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::kill_dependency\fP (_Tp __y)"
.br
.ti -1c
.RI "_Tp * \fBstd::atomic< _Tp * >::load\fP (memory_order=memory_order_seq_cst) const volatile"
.br
.in -1c
.SH "Detailed Description"
.PP 
Components for performing \fBatomic\fP operations. 
.SH "Define Documentation"
.PP 
.SS "#define _GLIBCXX_ATOMIC_PROPERTY"
.PP
29.2 Lock-free Property 
.PP
Definition at line 74 of file stdatomic.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBstd::memory_order\fP  \fBstd::memory_order\fP"
.PP
Enumeration for memory_order. 
.PP
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBstd::memory_order\fP"
.PP
Enumeration for memory_order. 
.PP
Definition at line 47 of file stdatomic.h.
.SH "Function Documentation"
.PP 
.SS "template<typename _Tp > _Tp std::kill_dependency (_Tp __y)\fC [inline]\fP"
.PP
kill_dependency 
.PP
Definition at line 61 of file cstdatomic.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
