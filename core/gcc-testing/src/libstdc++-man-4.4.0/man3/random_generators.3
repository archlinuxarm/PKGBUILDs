.TH "Random Number Generators" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Random Number Generators \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBstd::discard_block< _UniformRandomNumberGenerator, __p, __r >\fP"
.br
.ti -1c
.RI "class \fBstd::linear_congruential< _UIntType, __a, __c, __m >\fP"
.br
.RI "\fIA model of a linear congruential random number generator. \fP"
.ti -1c
.RI "class \fBstd::random_device\fP"
.br
.ti -1c
.RI "class \fBstd::xor_combine< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef linear_congruential< unsigned long, 48271, 0, 2147483647 > \fBstd::minstd_rand\fP"
.br
.ti -1c
.RI "typedef linear_congruential< unsigned long, 16807, 0, 2147483647 > \fBstd::minstd_rand0\fP"
.br
.ti -1c
.RI "typedef mersenne_twister< unsigned long, 32, 624, 397, 31, 0x9908b0dful, 11, 7, 0x9d2c5680ul, 15, 0xefc60000ul, 18 > \fBstd::mt19937\fP"
.br
.ti -1c
.RI "typedef discard_block< subtract_with_carry< unsigned long,(1UL<< 24), 10, 24 >, 223, 24 > \fBstd::ranlux3\fP"
.br
.ti -1c
.RI "typedef discard_block< subtract_with_carry_01< float, 24, 10, 24 >, 223, 24 > \fBstd::ranlux3_01\fP"
.br
.ti -1c
.RI "typedef discard_block< subtract_with_carry< unsigned long,(1UL<< 24), 10, 24 >, 389, 24 > \fBstd::ranlux4\fP"
.br
.ti -1c
.RI "typedef discard_block< subtract_with_carry_01< float, 24, 10, 24 >, 389, 24 > \fBstd::ranlux4_01\fP"
.br
.ti -1c
.RI "typedef subtract_with_carry_01< double, 48, 5, 12 > \fBstd::ranlux64_base_01\fP"
.br
.ti -1c
.RI "typedef subtract_with_carry_01< float, 24, 10, 24 > \fBstd::ranlux_base_01\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
These classes define objects which provide random or pseudorandom numbers, either from a discrete or a continuous interval. The random number generator supplied as a part of this library are all uniform random number generators which provide a sequence of random number uniformly distributed over their range.
.PP
A number generator is a function object with an operator() that takes zero arguments and returns a number.
.PP
A compliant random number generator must satisfy the following requirements. To be documented. Random Number Generator Requirements
.SH "Typedef Documentation"
.PP 
.SS "typedef linear_congruential<unsigned long, 48271, 0, 2147483647> \fBstd::minstd_rand\fP"
.PP
An alternative LCR (Lehmer Generator function) . 
.PP
Definition at line 509 of file tr1_impl/random.
.SS "typedef linear_congruential<unsigned long, 16807, 0, 2147483647> \fBstd::minstd_rand0\fP"
.PP
The classic Minimum Standard rand0 of Lewis, Goodman, and Miller. 
.PP
Definition at line 504 of file tr1_impl/random.
.SS "typedef mersenne_twister< unsigned long, 32, 624, 397, 31, 0x9908b0dful, 11, 7, 0x9d2c5680ul, 15, 0xefc60000ul, 18 > std::mt19937"
.PP
The classic Mersenne Twister.
.PP
Reference: M. Matsumoto and T. Nishimura, 'Mersenne Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random Number Generator', ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30. 
.PP
Definition at line 691 of file tr1_impl/random.
.SS "typedef discard_block< subtract_with_carry<unsigned long, (1UL << 24), 10, 24>, 223, 24 > std::ranlux3"
.PP
James's luxury-level-3 integer adaptation of Luescher's generator. 
.PP
Definition at line 1254 of file tr1_impl/random.
.SS "typedef discard_block< subtract_with_carry<unsigned long, (1UL << 24), 10, 24>, 389, 24 > std::ranlux4"
.PP
James's luxury-level-4 integer adaptation of Luescher's generator. 
.PP
Definition at line 1263 of file tr1_impl/random.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
