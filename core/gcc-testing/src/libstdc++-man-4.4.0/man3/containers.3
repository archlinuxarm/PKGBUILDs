.TH "Containers" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Containers \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBstd::bitset< _Nb >\fP"
.br
.RI "\fIThe bitset class represents a \fIfixed-size\fP sequence of bits. \fP"
.in -1c
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBSequences\fP"
.br
.ti -1c
.RI "\fBAssociative Containers\fP"
.br
.ti -1c
.RI "\fBUnordered Associative Containers\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Containers are collections of objects.
.PP
A container may hold any type which meets certain requirements, but the type of contained object is chosen at compile time, and all objects in a given container must be of the same type. (Polymorphism is possible by declaring a container of pointers to a base class and then populating it with pointers to instances of derived classes. Variant value types such as the \fCany\fP class from \fCBoost\fP can also be used.
.PP
All contained types must be \fCAssignable\fP and \fCCopyConstructible\fP. Specific containers may place additional requirements on the types of their contained objects.
.PP
Containers manage memory allocation and deallocation themselves when storing your objects. The objects are destroyed when the container is itself destroyed. Note that if you are storing pointers in a container, \fCdelete\fP is \fInot\fP automatically called on the pointers before destroying them.
.PP
All containers must meet certain requirements, summarized in \fCtables\fP.
.PP
The standard containers are further refined into \fBSequences\fP and \fBAssociative Containers\fP. \fBUnordered Associative Containers\fP. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
