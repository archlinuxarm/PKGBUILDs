.TH "Mutating Algorithms" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mutating Algorithms \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _II , typename _OI > _OI \fBstd::copy\fP (_II __first, _II __last, _OI __result)"
.br
.ti -1c
.RI "template<typename _BI1 , typename _BI2 > _BI2 \fBstd::copy_backward\fP (_BI1 __first, _BI1 __last, _BI2 __result)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _Predicate > _OutputIterator \fBstd::copy_if\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Size , typename _OutputIterator > _OutputIterator \fBstd::copy_n\fP (_InputIterator __first, _Size __n, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > void \fBstd::fill\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _OI , typename _Size , typename _Tp > _OI \fBstd::fill_n\fP (_OI __first, _Size __n, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Generator > void \fBstd::generate\fP (_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)"
.br
.ti -1c
.RI "template<typename _OutputIterator , typename _Size , typename _Generator > _OutputIterator \fBstd::generate_n\fP (_OutputIterator __first, _Size __n, _Generator __gen)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fBstd::is_partitioned\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 > void \fBstd::iter_swap\fP (_ForwardIterator1 __a, _ForwardIterator2 __b)"
.br
.ti -1c
.RI "template<typename _II , typename _OI > _OI \fBstd::move\fP (_II __first, _II __last, _OI __result)"
.br
.ti -1c
.RI "template<typename _BI1 , typename _BI2 > _BI2 \fBstd::move_backward\fP (_BI1 __first, _BI1 __last, _BI2 __result)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator \fBstd::partition\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator1 , typename _OutputIterator2 , typename _Predicate > pair< _OutputIterator1, _OutputIterator2 > \fBstd::partition_copy\fP (_InputIterator __first, _InputIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator \fBstd::partition_point\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _RandomNumberGenerator > void \fBstd::random_shuffle\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &__rand)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > void \fBstd::random_shuffle\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > _ForwardIterator \fBstd::remove\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _Tp > _OutputIterator \fBstd::remove_copy\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _Predicate > _OutputIterator \fBstd::remove_copy_if\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator \fBstd::remove_if\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > void \fBstd::replace\fP (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__old_value, const _Tp &__new_value)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _Predicate , typename _Tp > _OutputIterator \fBstd::replace_copy_if\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp &__new_value)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate , typename _Tp > void \fBstd::replace_if\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp &__new_value)"
.br
.ti -1c
.RI "template<typename _BidirectionalIterator > void \fBstd::reverse\fP (_BidirectionalIterator __first, _BidirectionalIterator __last)"
.br
.ti -1c
.RI "template<typename _BidirectionalIterator , typename _OutputIterator > _OutputIterator \fBstd::reverse_copy\fP (_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _ForwardIterator > void \fBstd::rotate\fP (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _OutputIterator > _OutputIterator \fBstd::rotate_copy\fP (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator \fBstd::stable_partition\fP (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator2 \fBstd::swap_ranges\fP (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _BinaryOperation > _OutputIterator \fBstd::transform\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _UnaryOperation > _OutputIterator \fBstd::transform\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _BinaryPredicate > _ForwardIterator \fBstd::unique\fP (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator > _ForwardIterator \fBstd::unique\fP (_ForwardIterator __first, _ForwardIterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator , typename _BinaryPredicate > _OutputIterator \fBstd::unique_copy\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _OutputIterator > _OutputIterator \fBstd::unique_copy\fP (_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename _II , typename _OI > _OI std::copy (_II __first, _II __last, _OI __result)\fC [inline]\fP"
.PP
Copies the range [first,last) into result. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
result + (first - last)
.RE
.PP
This inline function will boil down to a call to \fCmemmove\fP whenever possible. Failing that, if random access iterators are passed, then the loop count will be known (and therefore a candidate for compiler optimizations such as unrolling). Result may not be contained within [first,last); the copy_backward function should be used instead.
.PP
Note that the end of the output range is permitted to be contained within [first,last). 
.PP
Definition at line 458 of file stl_algobase.h.
.SS "template<typename _BI1 , typename _BI2 > _BI2 std::copy_backward (_BI1 __first, _BI1 __last, _BI2 __result)\fC [inline]\fP"
.PP
Copies the range [first,last) into result. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A bidirectional \fBiterator\fP. 
.br
\fIlast\fP A bidirectional \fBiterator\fP. 
.br
\fIresult\fP A bidirectional \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
result - (first - last)
.RE
.PP
The function has the same effect as copy, but starts at the end of the range and works its way to the start, returning the start of the result. This inline function will boil down to a call to \fCmemmove\fP whenever possible. Failing that, if random access iterators are passed, then the loop count will be known (and therefore a candidate for compiler optimizations such as unrolling).
.PP
Result may not be in the range [first,last). Use copy instead. Note that the start of the output range may overlap [first,last). 
.PP
Definition at line 628 of file stl_algobase.h.
.PP
Referenced by std::__insertion_sort(), std::__merge_backward(), std::__rotate_adaptive(), and std::deque< _Tp, _Alloc >::_M_reallocate_map().
.SS "template<typename _InputIterator , typename _OutputIterator , typename _Predicate > _OutputIterator std::copy_if (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)\fC [inline]\fP"
.PP
Copy the elements of a sequence for which a predicate is true. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies each element in the range \fC\fP[first,last) for which \fCpred\fP returns true to the range beginning at \fCresult\fP.
.PP
copy_if() is stable, so the relative order of elements that are copied is unchanged. 
.PP
Definition at line 965 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _Size , typename _OutputIterator > _OutputIterator std::copy_n (_InputIterator __first, _Size __n, _OutputIterator __result)\fC [inline]\fP"
.PP
Copies the range [first,first+n) into [result,result+n). 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIn\fP The number of elements to copy. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
result+n.
.RE
.PP
This inline function will boil down to a call to \fCmemmove\fP whenever possible. Failing that, if random access iterators are passed, then the loop count will be known (and therefore a candidate for compiler optimizations such as unrolling). 
.PP
Definition at line 1022 of file stl_algo.h.
.PP
References std::__iterator_category().
.SS "template<typename _ForwardIterator , typename _Tp > void std::fill (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value)\fC [inline]\fP"
.PP
Fills the range [first,last) with copies of value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIvalue\fP A reference-to-const of arbitrary type. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing.
.RE
.PP
This function fills a range with copies of the same value. For char types filling contiguous areas of memory, this becomes an inline call to \fCmemset\fP or \fCwmemset\fP. 
.PP
Definition at line 730 of file stl_algobase.h.
.SS "template<typename _OI , typename _Size , typename _Tp > _OI std::fill_n (_OI __first, _Size __n, const _Tp & __value)\fC [inline]\fP"
.PP
Fills the range [first,first+n) with copies of value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An output \fBiterator\fP. 
.br
\fIn\fP The count of copies to perform. 
.br
\fIvalue\fP A reference-to-const of arbitrary type. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBiterator\fP at first+n.
.RE
.PP
This function fills a range with copies of the same value. For char types filling contiguous areas of memory, this becomes an inline call to \fCmemset\fP or @ wmemset. 
.PP
Definition at line 785 of file stl_algobase.h.
.SS "template<typename _ForwardIterator , typename _Generator > void std::generate (_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)\fC [inline]\fP"
.PP
Assign the result of a function object to each value in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIgen\fP A function object taking no arguments and returning std::iterator_traits<_ForwardIterator>::value_type 
.RE
.PP
\fBReturns:\fP
.RS 4
generate() returns no value.
.RE
.PP
Performs the assignment \fC*i\fP = \fCgen()\fP for each \fCi\fP in the range \fC\fP[first,last). 
.PP
Definition at line 4824 of file stl_algo.h.
.SS "template<typename _OutputIterator , typename _Size , typename _Generator > _OutputIterator std::generate_n (_OutputIterator __first, _Size __n, _Generator __gen)\fC [inline]\fP"
.PP
Assign the result of a function object to each value in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIn\fP The length of the sequence. 
.br
\fIgen\fP A function object taking no arguments and returning std::iterator_traits<_ForwardIterator>::value_type 
.RE
.PP
\fBReturns:\fP
.RS 4
The end of the sequence, \fCfirst+n\fP 
.RE
.PP
Performs the assignment \fC*i\fP = \fCgen()\fP for each \fCi\fP in the range \fC\fP[first,first+n). 
.PP
Definition at line 4852 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _Predicate > bool std::is_partitioned (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Checks whether the sequence is partitioned. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the range \fC\fP[first,last) is partioned by \fCpred\fP, i.e. if all elements that satisfy \fCpred\fP appear before those that do not. 
.RE
.PP

.PP
Definition at line 817 of file stl_algo.h.
.PP
References std::find_if_not(), and std::none_of().
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 > void std::iter_swap (_ForwardIterator1 __a, _ForwardIterator2 __b)\fC [inline]\fP"
.PP
Swaps the contents of two iterators. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP An \fBiterator\fP. 
.br
\fIb\fP Another \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing.
.RE
.PP
This function swaps the values pointed to by two iterators, not the iterators themselves. 
.PP
Definition at line 117 of file stl_algobase.h.
.PP
Referenced by std::__merge_without_buffer(), std::__partition(), std::__reverse(), std::__rotate(), std::__unguarded_partition(), std::next_permutation(), std::prev_permutation(), std::random_shuffle(), and std::swap_ranges().
.SS "template<typename _II , typename _OI > _OI std::move (_II __first, _II __last, _OI __result)\fC [inline]\fP"
.PP
Moves the range [first,last) into result. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
result + (first - last)
.RE
.PP
This inline function will boil down to a call to \fCmemmove\fP whenever possible. Failing that, if random access iterators are passed, then the loop count will be known (and therefore a candidate for compiler optimizations such as unrolling). Result may not be contained within [first,last); the move_backward function should be used instead.
.PP
Note that the end of the output range is permitted to be contained within [first,last). 
.PP
Definition at line 491 of file stl_algobase.h.
.PP
Referenced by std::vector< _Tp, _Alloc >::insert(), std::vector< _Node *, _Nodeptr_Alloc >::insert(), std::list< _Tp, _Alloc >::insert(), std::deque< _Tp, _Alloc >::insert(), and std::forward_list< _Tp, _Alloc >::insert_after().
.SS "template<typename _BI1 , typename _BI2 > _BI2 std::move_backward (_BI1 __first, _BI1 __last, _BI2 __result)\fC [inline]\fP"
.PP
Moves the range [first,last) into result. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A bidirectional \fBiterator\fP. 
.br
\fIlast\fP A bidirectional \fBiterator\fP. 
.br
\fIresult\fP A bidirectional \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
result - (first - last)
.RE
.PP
The function has the same effect as move, but starts at the end of the range and works its way to the start, returning the start of the result. This inline function will boil down to a call to \fCmemmove\fP whenever possible. Failing that, if random access iterators are passed, then the loop count will be known (and therefore a candidate for compiler optimizations such as unrolling).
.PP
Result may not be in the range [first,last). Use move instead. Note that the start of the output range may overlap [first,last). 
.PP
Definition at line 664 of file stl_algobase.h.
.SS "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator std::partition (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Move elements for which a predicate is true to the beginning of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIpred\fP A predicate functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP \fCmiddle\fP such that \fCpred(i)\fP is true for each \fBiterator\fP \fCi\fP in the range \fC\fP[first,middle) and false for each \fCi\fP in the range \fC\fP[middle,last).
.RE
.PP
\fCpred\fP must not modify its operand. \fCpartition()\fP does not preserve the relative ordering of elements in each group, use \fCstable_partition()\fP if this is needed. 
.PP
Definition at line 5019 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__partition().
.SS "template<typename _InputIterator , typename _OutputIterator1 , typename _OutputIterator2 , typename _Predicate > pair<_OutputIterator1, _OutputIterator2> std::partition_copy (_InputIterator __first, _InputIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _Predicate __pred)\fC [inline]\fP"
.PP
Copy the elements of a sequence to separate output sequences depending on the truth value of a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIout_true\fP An output \fBiterator\fP. 
.br
\fIout_false\fP An output \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBpair\fP designating the ends of the resulting sequences.
.RE
.PP
Copies each element in the range \fC\fP[first,last) for which \fCpred\fP returns true to the range beginning at \fCout_true\fP and each element for which \fCpred\fP returns false to \fCout_false\fP. 
.PP
Definition at line 1051 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator std::partition_point (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Find the partition point of a partitioned range. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An \fBiterator\fP. 
.br
\fIlast\fP Another \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP \fCmid\fP such that \fCall_of(first, mid, pred)\fP and \fCnone_of(mid, last, pred)\fP are both true. 
.RE
.PP

.PP
Definition at line 835 of file stl_algo.h.
.PP
References std::advance(), and std::distance().
.SS "template<typename _RandomAccessIterator , typename _RandomNumberGenerator > void std::random_shuffle (_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator & __rand)\fC [inline]\fP"
.PP
Shuffle the elements of a sequence using a random number generator. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIrand\fP The RNG functor or function. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing.
.RE
.PP
Reorders the elements in the range \fC\fP[first,last) using \fCrand\fP to provide a random distribution. Calling \fCrand(N)\fP for a positive integer \fCN\fP should return a randomly chosen integer from the range [0,N). 
.PP
Definition at line 4987 of file stl_algo.h.
.PP
References std::iter_swap().
.SS "template<typename _RandomAccessIterator > void std::random_shuffle (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Randomly shuffle the elements of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing.
.RE
.PP
Reorder the elements in the range \fC\fP[first,last) using a random distribution, so that every possible ordering of the sequence is equally likely. 
.PP
Definition at line 4959 of file stl_algo.h.
.PP
References std::iter_swap().
.SS "template<typename _ForwardIterator , typename _Tp > _ForwardIterator std::remove (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value)\fC [inline]\fP"
.PP
Remove elements from a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIvalue\fP The value to be removed. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
All elements equal to \fCvalue\fP are removed from the range \fC\fP[first,last).
.PP
remove() is stable, so the relative order of elements that are not removed is unchanged.
.PP
Elements between the end of the resulting sequence and \fClast\fP are still present, but their value is unspecified. 
.PP
Definition at line 1100 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _OutputIterator , typename _Tp > _OutputIterator std::remove_copy (_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp & __value)\fC [inline]\fP"
.PP
Copy a sequence, removing elements of a given value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIvalue\fP The value to be removed. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies each element in the range \fC\fP[first,last) not equal to \fCvalue\fP to the range beginning at \fCresult\fP. remove_copy() is stable, so the relative order of elements that are copied is unchanged. 
.PP
Definition at line 888 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _OutputIterator , typename _Predicate > _OutputIterator std::remove_copy_if (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)\fC [inline]\fP"
.PP
Copy a sequence, removing elements for which a predicate is true. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies each element in the range \fC\fP[first,last) for which \fCpred\fP returns false to the range beginning at \fCresult\fP.
.PP
remove_copy_if() is stable, so the relative order of elements that are copied is unchanged. 
.PP
Definition at line 926 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator std::remove_if (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Remove elements from a sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
All elements for which \fCpred\fP returns true are removed from the range \fC\fP[first,last).
.PP
remove_if() is stable, so the relative order of elements that are not removed is unchanged.
.PP
Elements between the end of the resulting sequence and \fClast\fP are still present, but their value is unspecified. 
.PP
Definition at line 1143 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Tp > void std::replace (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __old_value, const _Tp & __new_value)\fC [inline]\fP"
.PP
Replace each occurrence of one value in a sequence with another value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIold_value\fP The value to be replaced. 
.br
\fInew_value\fP The replacement value. 
.RE
.PP
\fBReturns:\fP
.RS 4
replace() returns no value.
.RE
.PP
For each \fBiterator\fP \fCi\fP in the range \fC\fP[first,last) if \fC*i\fP == \fCold_value\fP then the assignment \fC*i\fP = \fCnew_value\fP is performed. 
.PP
Definition at line 4760 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _OutputIterator , typename _Predicate , typename _Tp > _OutputIterator std::replace_copy_if (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp & __new_value)\fC [inline]\fP"
.PP
Copy a sequence, replacing each value for which a predicate returns true with another value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.br
\fInew_value\fP The replacement value. 
.RE
.PP
\fBReturns:\fP
.RS 4
The end of the output sequence, \fCresult+\fP(last-first).
.RE
.PP
Copies each element in the range \fC\fP[first,last) to the range \fC\fP[result,result+(last-first)) replacing elements for which \fCpred\fP returns true with \fCnew_value\fP. 
.PP
Definition at line 3842 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Predicate , typename _Tp > void std::replace_if (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp & __new_value)\fC [inline]\fP"
.PP
Replace each value in a sequence for which a predicate returns true with another value. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.br
\fInew_value\fP The replacement value. 
.RE
.PP
\fBReturns:\fP
.RS 4
replace_if() returns no value.
.RE
.PP
For each \fBiterator\fP \fCi\fP in the range \fC\fP[first,last) if \fCpred(*i)\fP is true then the assignment \fC*i\fP = \fCnew_value\fP is performed. 
.PP
Definition at line 4792 of file stl_algo.h.
.SS "template<typename _BidirectionalIterator > void std::reverse (_BidirectionalIterator __first, _BidirectionalIterator __last)\fC [inline]\fP"
.PP
Reverse a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A bidirectional \fBiterator\fP. 
.br
\fIlast\fP A bidirectional \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
reverse() returns no value.
.RE
.PP
Reverses the order of the elements in the range \fC\fP[first,last), so that the first element becomes the last etc. For every \fCi\fP such that \fC0<=i<=\fP(last-first)/2), \fCreverse()\fP swaps \fC*\fP(first+i) and \fC*\fP(last-(i+1)) 
.PP
Definition at line 1451 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__reverse().
.PP
Referenced by std::next_permutation(), and std::prev_permutation().
.SS "template<typename _BidirectionalIterator , typename _OutputIterator > _OutputIterator std::reverse_copy (_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)\fC [inline]\fP"
.PP
Copy a sequence, reversing its elements. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A bidirectional \fBiterator\fP. 
.br
\fIlast\fP A bidirectional \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies the elements in the range \fC\fP[first,last) to the range \fC\fP[result,result+(last-first)) such that the order of the elements is reversed. For every \fCi\fP such that \fC0<=i<=\fP(last-first), \fCreverse_copy()\fP performs the assignment \fC*\fP(result+(last-first)-i) = *(first+i). The ranges \fC\fP[first,last) and \fC\fP[result,result+(last-first)) must not overlap. 
.PP
Definition at line 1478 of file stl_algo.h.
.SS "template<typename _ForwardIterator > void std::rotate (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\fC [inline]\fP"
.PP
Rotate the elements of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fImiddle\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing.
.RE
.PP
Rotates the elements of the range \fC\fP[first,last) by \fC\fP(middle-first) positions so that the element at \fCmiddle\fP is moved to \fCfirst\fP, the element at \fCmiddle+1\fP is moved to +1 and so on for each element in the range \fC\fP[first,last).
.PP
This effectively swaps the ranges \fC\fP[first,middle) and \fC\fP[middle,last).
.PP
Performs \fC*\fP(first+(n+(last-middle))%(last-first))=*(first+n) for each \fCn\fP in the range \fC\fP[0,last-first). 
.PP
Definition at line 1671 of file stl_algo.h.
.PP
References std::__rotate().
.PP
Referenced by std::__inplace_stable_partition(), std::__merge_without_buffer(), std::__rotate_adaptive(), and std::__stable_partition_adaptive().
.SS "template<typename _ForwardIterator , typename _OutputIterator > _OutputIterator std::rotate_copy (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)\fC [inline]\fP"
.PP
Copy a sequence, rotating its elements. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fImiddle\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies the elements of the range \fC\fP[first,last) to the range beginning at 
.PP
\fBReturns:\fP
.RS 4
, rotating the copied elements by \fC\fP(middle-first) positions so that the element at \fCmiddle\fP is moved to \fCresult\fP, the element at \fCmiddle+1\fP is moved to 
.PP
+1 and so on for each element in the range \fC\fP[first,last).
.RE
.PP
Performs \fC*\fP(result+(n+(last-middle))%(last-first))=*(first+n) for each \fCn\fP in the range \fC\fP[0,last-first). 
.PP
Definition at line 1705 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Predicate > _ForwardIterator std::stable_partition (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Move elements for which a predicate is true to the beginning of a sequence, preserving relative ordering. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIpred\fP A predicate functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP \fCmiddle\fP such that \fCpred(i)\fP is true for each \fBiterator\fP \fCi\fP in the range \fC\fP[first,middle) and false for each \fCi\fP in the range \fC\fP[middle,last).
.RE
.PP
Performs the same function as \fCpartition()\fP with the additional guarantee that the relative ordering of elements in each group is preserved, so any two elements \fCx\fP and \fCy\fP in the range \fC\fP[first,last) such that \fCpred(x)==pred\fP(y) will have the same relative ordering after calling \fCstable_partition()\fP. 
.PP
Definition at line 1863 of file stl_algo.h.
.PP
References std::__inplace_stable_partition(), std::__stable_partition_adaptive(), std::_Temporary_buffer< _ForwardIterator, _Tp >::begin(), std::_Temporary_buffer< _ForwardIterator, _Tp >::requested_size(), and std::_Temporary_buffer< _ForwardIterator, _Tp >::size().
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator2 std::swap_ranges (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)\fC [inline]\fP"
.PP
Swap the elements of two sequences. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP A forward \fBiterator\fP. 
.br
\fIlast1\fP A forward \fBiterator\fP. 
.br
\fIfirst2\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP equal to \fCfirst2+\fP(last1-first1).
.RE
.PP
Swaps each element in the range \fC\fP[first1,last1) with the corresponding element in the range \fC\fP[first2,(last1-first1)). The ranges must not overlap. 
.PP
Definition at line 158 of file stl_algobase.h.
.PP
References std::iter_swap().
.PP
Referenced by std::__rotate(), and __gnu_parallel::parallel_partition().
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _BinaryOperation > _OutputIterator std::transform (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)\fC [inline]\fP"
.PP
Perform an operation on corresponding elements of two sequences. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP An input \fBiterator\fP. 
.br
\fIlast1\fP An input \fBiterator\fP. 
.br
\fIfirst2\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIbinary_op\fP A binary operator. 
.RE
.PP
\fBReturns:\fP
.RS 4
An output \fBiterator\fP equal to \fCresult+\fP(last-first).
.RE
.PP
Applies the operator to the corresponding elements in the two input ranges and assigns the results to successive elements of the output sequence. Evaluates \fC*\fP(result+N)=binary_op(*(first1+N),*(first2+N)) for each \fCN\fP in the range \fC\fP[0,last1-first1).
.PP
\fCbinary_op\fP must not alter either of its arguments. 
.PP
Definition at line 4728 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _OutputIterator , typename _UnaryOperation > _OutputIterator std::transform (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)\fC [inline]\fP"
.PP
Perform an operation on a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIunary_op\fP A unary operator. 
.RE
.PP
\fBReturns:\fP
.RS 4
An output \fBiterator\fP equal to \fCresult+\fP(last-first).
.RE
.PP
Applies the operator to each element in the input range and assigns the results to successive elements of the output sequence. Evaluates \fC*\fP(result+N)=unary_op(*(first+N)) for each \fCN\fP in the range \fC\fP[0,last-first).
.PP
\fCunary_op\fP must not alter its argument. 
.PP
Definition at line 4692 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _BinaryPredicate > _ForwardIterator std::unique (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Remove consecutive values from a sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIbinary_pred\fP A binary predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Removes all but the first element from each group of consecutive values for which \fCbinary_pred\fP returns true. unique() is stable, so the relative order of elements that are not removed is unchanged. Elements between the end of the resulting sequence and \fClast\fP are still present, but their value is unspecified. 
.PP
Definition at line 1223 of file stl_algo.h.
.SS "template<typename _ForwardIterator > _ForwardIterator std::unique (_ForwardIterator __first, _ForwardIterator __last)\fC [inline]\fP"
.PP
Remove consecutive duplicate values from a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Removes all but the first element from each group of consecutive values that compare equal. unique() is stable, so the relative order of elements that are not removed is unchanged. Elements between the end of the resulting sequence and \fClast\fP are still present, but their value is unspecified. 
.PP
Definition at line 1183 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _OutputIterator , typename _BinaryPredicate > _OutputIterator std::unique_copy (_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Copy a sequence, removing consecutive values using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.br
\fIbinary_pred\fP A binary predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies each element in the range \fC\fP[first,last) to the range beginning at \fCresult\fP, except that only the first element is copied from groups of consecutive elements for which \fCbinary_pred\fP returns true. unique_copy() is stable, so the relative order of elements that are copied is unchanged.
.PP
_GLIBCXX_RESOLVE_LIB_DEFECTS DR 241. Does unique_copy() require CopyConstructible and Assignable? 
.PP
Definition at line 4928 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__unique_copy().
.SS "template<typename _InputIterator , typename _OutputIterator > _OutputIterator std::unique_copy (_InputIterator __first, _InputIterator __last, _OutputIterator __result)\fC [inline]\fP"
.PP
Copy a sequence, removing consecutive duplicate values. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIresult\fP An output \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP designating the end of the resulting sequence.
.RE
.PP
Copies each element in the range \fC\fP[first,last) to the range beginning at \fCresult\fP, except that only the first element is copied from groups of consecutive elements that compare equal. unique_copy() is stable, so the relative order of elements that are copied is unchanged.
.PP
_GLIBCXX_RESOLVE_LIB_DEFECTS DR 241. Does unique_copy() require CopyConstructible and Assignable?
.PP
_GLIBCXX_RESOLVE_LIB_DEFECTS DR 538. 241 again: Does unique_copy() require CopyConstructible and Assignable? 
.PP
Definition at line 4888 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__unique_copy().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
