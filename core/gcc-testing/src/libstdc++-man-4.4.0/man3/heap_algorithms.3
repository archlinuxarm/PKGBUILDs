.TH "Heap Algorithms" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Heap Algorithms \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > bool \fBstd::is_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > bool \fBstd::is_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > _RandomAccessIterator \fBstd::is_heap_until\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > _RandomAccessIterator \fBstd::is_heap_until\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > void \fBstd::make_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > void \fBstd::make_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > void \fBstd::pop_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > void \fBstd::pop_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > void \fBstd::push_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > void \fBstd::push_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Compare > void \fBstd::sort_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > void \fBstd::sort_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename _RandomAccessIterator , typename _Compare > bool std::is_heap (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Determines whether a range is a heap using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of range. 
.br
\fIlast\fP End of range. 
.br
\fIcomp\fP Comparison functor to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if range is a heap, false otherwise. 
.RE
.PP

.PP
Definition at line 571 of file stl_heap.h.
.PP
References std::is_heap_until().
.SS "template<typename _RandomAccessIterator > bool std::is_heap (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Determines whether a range is a heap. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of range. 
.br
\fIlast\fP End of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if range is a heap, false otherwise. 
.RE
.PP

.PP
Definition at line 558 of file stl_heap.h.
.PP
References std::is_heap_until().
.SS "template<typename _RandomAccessIterator , typename _Compare > _RandomAccessIterator std::is_heap_until (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Search the end of a heap using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of range. 
.br
\fIlast\fP End of range. 
.br
\fIcomp\fP Comparison functor to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP pointing to the first element not in the heap.
.RE
.PP
This operation returns the last \fBiterator\fP i in [first, last) for which the range [first, i) is a heap. Comparisons are made using comp. 
.PP
Definition at line 536 of file stl_heap.h.
.PP
References std::distance().
.PP
Referenced by std::is_heap().
.SS "template<typename _RandomAccessIterator > _RandomAccessIterator std::is_heap_until (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Search the end of a heap. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of range. 
.br
\fIlast\fP End of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBiterator\fP pointing to the first element not in the heap.
.RE
.PP
This operation returns the last \fBiterator\fP i in [first, last) for which the range [first, i) is a heap. 
.PP
Definition at line 510 of file stl_heap.h.
.PP
References std::distance().
.SS "template<typename _RandomAccessIterator , typename _Compare > void std::make_heap (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Construct a heap over a range using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap. 
.br
\fIcomp\fP Comparison functor to use.
.RE
.PP
This operation makes the elements in [first,last) into a heap. Comparisons are made using comp. 
.PP
Definition at line 413 of file stl_heap.h.
.PP
Referenced by std::__heap_select(), std::partial_sort_copy(), and std::priority_queue< _Tp, _Sequence, _Compare >::priority_queue().
.SS "template<typename _RandomAccessIterator > void std::make_heap (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Construct a heap over a range. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap.
.RE
.PP
This operation makes the elements in [first,last) into a heap. 
.PP
Definition at line 373 of file stl_heap.h.
.SS "template<typename _RandomAccessIterator , typename _Compare > void std::pop_heap (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Pop an element off a heap using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap. 
.br
\fIcomp\fP Comparison functor to use.
.RE
.PP
This operation pops the top of the heap. The elements first and last-1 are swapped and [first,last-1) is made into a heap. Comparisons are made using comp. 
.PP
Definition at line 350 of file stl_heap.h.
.PP
Referenced by std::priority_queue< _Tp, _Sequence, _Compare >::pop().
.SS "template<typename _RandomAccessIterator > void std::pop_heap (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Pop an element off a heap. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap.
.RE
.PP
This operation pops the top of the heap. The elements first and last-1 are swapped and [first,last-1) is made into a heap. 
.PP
Definition at line 276 of file stl_heap.h.
.SS "template<typename _RandomAccessIterator , typename _Compare > void std::push_heap (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Push an element onto a heap using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap + element. 
.br
\fIcomp\fP Comparison functor.
.RE
.PP
This operation pushes the element at last-1 onto the valid heap over the range [first,last-1). After completion, [first,last) is a valid heap. Compare operations are performed using comp. 
.PP
Definition at line 203 of file stl_heap.h.
.PP
Referenced by std::priority_queue< _Tp, _Sequence, _Compare >::push().
.SS "template<typename _RandomAccessIterator > void std::push_heap (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Push an element onto a heap. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap + element.
.RE
.PP
This operation pushes the element at last-1 onto the valid heap over the range [first,last-1). After completion, [first,last) is a valid heap. 
.PP
Definition at line 154 of file stl_heap.h.
.SS "template<typename _RandomAccessIterator , typename _Compare > void std::sort_heap (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\fC [inline]\fP"
.PP
Sort a heap using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap. 
.br
\fIcomp\fP Comparison functor to use.
.RE
.PP
This operation sorts the valid heap in the range [first,last). Comparisons are made using comp. 
.PP
Definition at line 481 of file stl_heap.h.
.PP
Referenced by std::partial_sort(), and std::partial_sort_copy().
.SS "template<typename _RandomAccessIterator > void std::sort_heap (_RandomAccessIterator __first, _RandomAccessIterator __last)\fC [inline]\fP"
.PP
Sort a heap. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Start of heap. 
.br
\fIlast\fP End of heap.
.RE
.PP
This operation sorts the valid heap in the range [first,last). 
.PP
Definition at line 452 of file stl_heap.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
