.TH "std::__ctype_abstract_base" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__ctype_abstract_base \- Common base for \fBctype\fP facet.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits \fBstd::locale::facet\fP, and \fBstd::ctype_base\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef const int * \fB__to_type\fP"
.br
.ti -1c
.RI "typedef _CharT \fBchar_type\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBmask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBchar_type\fP * \fBis\fP (const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi, mask *__vec) const "
.br
.ti -1c
.RI "bool \fBis\fP (mask __m, \fBchar_type\fP __c) const "
.br
.ti -1c
.RI "const \fBchar_type\fP * \fBnarrow\fP (const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi, char __dfault, char *__to) const "
.br
.ti -1c
.RI "char \fBnarrow\fP (\fBchar_type\fP __c, char __dfault) const "
.br
.ti -1c
.RI "const \fBchar_type\fP * \fBscan_is\fP (mask __m, const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const "
.br
.ti -1c
.RI "const \fBchar_type\fP * \fBscan_not\fP (mask __m, const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const "
.br
.ti -1c
.RI "const \fBchar_type\fP * \fBtolower\fP (\fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBtolower\fP (\fBchar_type\fP __c) const "
.br
.ti -1c
.RI "const \fBchar_type\fP * \fBtoupper\fP (\fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBtoupper\fP (\fBchar_type\fP __c) const "
.br
.ti -1c
.RI "const char * \fBwiden\fP (const char *__lo, const char *__hi, \fBchar_type\fP *__to) const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBwiden\fP (char __c) const "
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const mask \fBalnum\fP"
.br
.ti -1c
.RI "static const mask \fBalpha\fP"
.br
.ti -1c
.RI "static const mask \fBcntrl\fP"
.br
.ti -1c
.RI "static const mask \fBdigit\fP"
.br
.ti -1c
.RI "static const mask \fBgraph\fP"
.br
.ti -1c
.RI "static const mask \fBlower\fP"
.br
.ti -1c
.RI "static const mask \fBprint\fP"
.br
.ti -1c
.RI "static const mask \fBpunct\fP"
.br
.ti -1c
.RI "static const mask \fBspace\fP"
.br
.ti -1c
.RI "static const mask \fBupper\fP"
.br
.ti -1c
.RI "static const mask \fBxdigit\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fB__ctype_abstract_base\fP (size_t __refs=0)"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_is\fP (const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi, mask *__vec) const =0"
.br
.ti -1c
.RI "virtual bool \fBdo_is\fP (mask __m, \fBchar_type\fP __c) const =0"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_narrow\fP (const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi, char __dfault, char *__dest) const =0"
.br
.ti -1c
.RI "virtual char \fBdo_narrow\fP (\fBchar_type\fP, char __dfault) const =0"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_scan_is\fP (mask __m, const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const =0"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_scan_not\fP (mask __m, const \fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const =0"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_tolower\fP (\fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const =0"
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_tolower\fP (\fBchar_type\fP) const =0"
.br
.ti -1c
.RI "virtual const \fBchar_type\fP * \fBdo_toupper\fP (\fBchar_type\fP *__lo, const \fBchar_type\fP *__hi) const =0"
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_toupper\fP (\fBchar_type\fP) const =0"
.br
.ti -1c
.RI "virtual const char * \fBdo_widen\fP (const char *__lo, const char *__hi, \fBchar_type\fP *__dest) const =0"
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_widen\fP (char) const =0"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static __c_locale \fB_S_clone_c_locale\fP (__c_locale &__cloc)"
.br
.ti -1c
.RI "static void \fB_S_create_c_locale\fP (__c_locale &__cloc, const char *__s, __c_locale __old=0)"
.br
.ti -1c
.RI "static void \fB_S_destroy_c_locale\fP (__c_locale &__cloc)"
.br
.ti -1c
.RI "static __c_locale \fB_S_get_c_locale\fP ()"
.br
.ti -1c
.RI "static const char * \fB_S_get_c_name\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBlocale::_Impl\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT> class std::__ctype_abstract_base< _CharT >"
Common base for \fBctype\fP facet. 

This template class provides implementations of the public functions that forward to the protected virtual functions.
.PP
This template also provides abstract stubs for the protected virtual functions. 
.PP
Definition at line 144 of file locale_facets.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _CharT> typedef _CharT \fBstd::__ctype_abstract_base\fP< _CharT >::\fBchar_type\fP"
.PP
Typedef for the template parameter. 
.PP
Reimplemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.PP
Definition at line 149 of file locale_facets.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_is (const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi, mask * __vec) const\fC [protected, pure virtual]\fP"
.PP
Return a mask \fBarray\fP. 
.PP
This function finds the mask for each char_type in the range [lo,hi) and successively writes it to vec. vec must have as many elements as the input.
.PP
\fBdo_is()\fP is a hook for a derived facet to change the behavior of classifying. \fBdo_is()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIvec\fP Pointer to an \fBarray\fP of mask storage. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual bool \fBstd::__ctype_abstract_base\fP< _CharT >::do_is (mask __m, \fBchar_type\fP __c) const\fC [protected, pure virtual]\fP"
.PP
Test char_type classification. 
.PP
This function finds a mask M for \fIc\fP and compares it to mask \fIm\fP.
.PP
\fBdo_is()\fP is a hook for a derived facet to change the behavior of classifying. \fBdo_is()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to find the mask of. 
.br
\fIm\fP The mask to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
(M & m) != 0. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_narrow (const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi, char __dfault, char * __dest) const\fC [protected, pure virtual]\fP"
.PP
Narrow char_type \fBarray\fP to char. 
.PP
This virtual function converts each char_type in the range [lo,hi) to char using the simplest reasonable transformation and writes the results to the destination \fBarray\fP. For any element in the input that cannot be converted, \fIdfault\fP is used instead.
.PP
\fBdo_narrow()\fP is a hook for a derived facet to change the behavior of narrowing. \fBdo_narrow()\fP must always return the same result for the same input.
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIdfault\fP Char to use if conversion fails. 
.br
\fIto\fP Pointer to the destination \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual char \fBstd::__ctype_abstract_base\fP< _CharT >::do_narrow (\fBchar_type\fP, char __dfault) const\fC [protected, pure virtual]\fP"
.PP
Narrow char_type to char. 
.PP
This virtual function converts the argument to char using the simplest reasonable transformation. If the conversion fails, dfault is returned instead.
.PP
\fBdo_narrow()\fP is a hook for a derived facet to change the behavior of narrowing. \fBdo_narrow()\fP must always return the same result for the same input.
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.br
\fIdfault\fP Char to return if conversion fails. 
.RE
.PP
\fBReturns:\fP
.RS 4
The converted char. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_scan_is (mask __m, const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [protected, pure virtual]\fP"
.PP
Find char_type matching mask. 
.PP
This function searches for and returns the first char_type c in [lo,hi) for which is(m,c) is true.
.PP
\fBdo_scan_is()\fP is a hook for a derived facet to change the behavior of match searching. \fBdo_is()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The mask to compare against. 
.br
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to a matching char_type if found, else \fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_scan_not (mask __m, const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [protected, pure virtual]\fP"
.PP
Find char_type not matching mask. 
.PP
This function searches for and returns a pointer to the first char_type c of [lo,hi) for which is(m,c) is false.
.PP
\fBdo_scan_is()\fP is a hook for a derived facet to change the behavior of match searching. \fBdo_is()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The mask to compare against. 
.br
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to a non-matching char_type if found, else \fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_tolower (\fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [protected, pure virtual]\fP"
.PP
Convert \fBarray\fP to lowercase. 
.PP
This virtual function converts each char_type in the range [lo,hi) to lowercase if possible. Other elements remain untouched.
.PP
\fBdo_tolower()\fP is a hook for a derived facet to change the behavior of lowercasing. \fBdo_tolower()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::do_tolower (\fBchar_type\fP) const\fC [protected, pure virtual]\fP"
.PP
Convert to lowercase. 
.PP
This virtual function converts the argument to lowercase if possible. If not possible (for example, '2'), returns the argument.
.PP
\fBdo_tolower()\fP is a hook for a derived facet to change the behavior of lowercasing. \fBdo_tolower()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The lowercase char_type if convertible, else \fIc\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::do_toupper (\fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [protected, pure virtual]\fP"
.PP
Convert \fBarray\fP to uppercase. 
.PP
This virtual function converts each char_type in the range [lo,hi) to uppercase if possible. Other elements remain untouched.
.PP
\fBdo_toupper()\fP is a hook for a derived facet to change the behavior of uppercasing. \fBdo_toupper()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::do_toupper (\fBchar_type\fP) const\fC [protected, pure virtual]\fP"
.PP
Convert to uppercase. 
.PP
This virtual function converts the char_type argument to uppercase if possible. If not possible (for example, '2'), returns the argument.
.PP
\fBdo_toupper()\fP is a hook for a derived facet to change the behavior of uppercasing. \fBdo_toupper()\fP must always return the same result for the same input.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The uppercase char_type if convertible, else \fIc\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual const char* \fBstd::__ctype_abstract_base\fP< _CharT >::do_widen (const char * __lo, const char * __hi, \fBchar_type\fP * __dest) const\fC [protected, pure virtual]\fP"
.PP
Widen char \fBarray\fP. 
.PP
This function converts each char in the input to char_type using the simplest reasonable transformation.
.PP
\fBdo_widen()\fP is a hook for a derived facet to change the behavior of widening. \fBdo_widen()\fP must always return the same result for the same input.
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIto\fP Pointer to the destination \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> virtual \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::do_widen (char) const\fC [protected, pure virtual]\fP"
.PP
Widen char. 
.PP
This virtual function converts the char to char_type using the simplest reasonable transformation.
.PP
\fBdo_widen()\fP is a hook for a derived facet to change the behavior of widening. \fBdo_widen()\fP must always return the same result for the same input.
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The converted char_type 
.RE
.PP

.PP
Implemented in \fBstd::ctype< _CharT >\fP, \fBstd::ctype< wchar_t >\fP, and \fBstd::ctype< _CharT >\fP.
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::is (const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi, mask * __vec) const\fC [inline]\fP"
.PP
Return a mask \fBarray\fP. 
.PP
This function finds the mask for each char_type in the range [lo,hi) and successively writes it to vec. vec must have as many elements as the char \fBarray\fP. It does so by returning the value of \fBctype<char_type>::do_is()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIvec\fP Pointer to an \fBarray\fP of mask storage. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Definition at line 179 of file locale_facets.h.
.SS "template<typename _CharT> bool \fBstd::__ctype_abstract_base\fP< _CharT >::is (mask __m, \fBchar_type\fP __c) const\fC [inline]\fP"
.PP
Test char_type classification. 
.PP
This function finds a mask M for \fIc\fP and compares it to mask \fIm\fP. It does so by returning the value of \fBctype<char_type>::do_is()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to compare the mask of. 
.br
\fIm\fP The mask to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
(M & m) != 0. 
.RE
.PP

.PP
Definition at line 162 of file locale_facets.h.
.PP
Referenced by std::basic_istream< _CharT, _Traits >::basic_istream::sentry::sentry().
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::narrow (const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi, char __dfault, char * __to) const\fC [inline]\fP"
.PP
Narrow \fBarray\fP to char \fBarray\fP. 
.PP
This function converts each char_type in the input to char using the simplest reasonable transformation and writes the results to the destination \fBarray\fP. For any char_type in the input that cannot be converted, \fIdfault\fP is used instead. It does so by returning ctype<char_type>::do_narrow(lo, hi, dfault, to).
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIdfault\fP Char to use if conversion fails. 
.br
\fIto\fP Pointer to the destination \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Definition at line 346 of file locale_facets.h.
.SS "template<typename _CharT> char \fBstd::__ctype_abstract_base\fP< _CharT >::narrow (\fBchar_type\fP __c, char __dfault) const\fC [inline]\fP"
.PP
Narrow char_type to char. 
.PP
This function converts the char_type to char using the simplest reasonable transformation. If the conversion fails, dfault is returned instead. It does so by returning ctype<char_type>::do_narrow(c).
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.br
\fIdfault\fP Char to return if conversion fails. 
.RE
.PP
\fBReturns:\fP
.RS 4
The converted char. 
.RE
.PP

.PP
Definition at line 324 of file locale_facets.h.
.PP
Referenced by std::time_get< _CharT, _InIter >::do_get_year(), and std::time_put< _CharT, _OutIter >::put().
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::scan_is (mask __m, const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [inline]\fP"
.PP
Find char_type matching a mask. 
.PP
This function searches for and returns the first char_type c in [lo,hi) for which is(m,c) is true. It does so by returning \fBctype<char_type>::do_scan_is()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The mask to compare against. 
.br
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to matching char_type if found, else \fIhi\fP. 
.RE
.PP

.PP
Definition at line 195 of file locale_facets.h.
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::scan_not (mask __m, const \fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [inline]\fP"
.PP
Find char_type not matching a mask. 
.PP
This function searches for and returns the first char_type c in [lo,hi) for which is(m,c) is false. It does so by returning \fBctype<char_type>::do_scan_not()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The mask to compare against. 
.br
\fIlo\fP Pointer to first char in range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to non-matching char if found, else \fIhi\fP. 
.RE
.PP

.PP
Definition at line 211 of file locale_facets.h.
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::tolower (\fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [inline]\fP"
.PP
Convert \fBarray\fP to lowercase. 
.PP
This function converts each char_type in the range [lo,hi) to lowercase if possible. Other elements remain untouched. It does so by returning ctype<char_type>:: do_tolower(lo, hi).
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Definition at line 269 of file locale_facets.h.
.SS "template<typename _CharT> \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::tolower (\fBchar_type\fP __c) const\fC [inline]\fP"
.PP
Convert to lowercase. 
.PP
This function converts the argument to lowercase if possible. If not possible (for example, '2'), returns the argument. It does so by returning ctype<char_type>::do_tolower(c).
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The lowercase char_type if convertible, else \fIc\fP. 
.RE
.PP

.PP
Definition at line 254 of file locale_facets.h.
.SS "template<typename _CharT> const \fBchar_type\fP* \fBstd::__ctype_abstract_base\fP< _CharT >::toupper (\fBchar_type\fP * __lo, const \fBchar_type\fP * __hi) const\fC [inline]\fP"
.PP
Convert \fBarray\fP to uppercase. 
.PP
This function converts each char_type in the range [lo,hi) to uppercase if possible. Other elements remain untouched. It does so by returning ctype<char_type>:: do_toupper(lo, hi).
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Definition at line 240 of file locale_facets.h.
.SS "template<typename _CharT> \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::toupper (\fBchar_type\fP __c) const\fC [inline]\fP"
.PP
Convert to uppercase. 
.PP
This function converts the argument to uppercase if possible. If not possible (for example, '2'), returns the argument. It does so by returning \fBctype<char_type>::do_toupper()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char_type to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The uppercase char_type if convertible, else \fIc\fP. 
.RE
.PP

.PP
Definition at line 225 of file locale_facets.h.
.SS "template<typename _CharT> const char* \fBstd::__ctype_abstract_base\fP< _CharT >::widen (const char * __lo, const char * __hi, \fBchar_type\fP * __to) const\fC [inline]\fP"
.PP
Widen \fBarray\fP to char_type. 
.PP
This function converts each char in the input to char_type using the simplest reasonable transformation. It does so by returning ctype<char_type>::do_widen(c).
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIlo\fP Pointer to start of range. 
.br
\fIhi\fP Pointer to end of range. 
.br
\fIto\fP Pointer to the destination \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fIhi\fP. 
.RE
.PP

.PP
Definition at line 305 of file locale_facets.h.
.SS "template<typename _CharT> \fBchar_type\fP \fBstd::__ctype_abstract_base\fP< _CharT >::widen (char __c) const\fC [inline]\fP"
.PP
Widen char to char_type. 
.PP
This function converts the char argument to char_type using the simplest reasonable transformation. It does so by returning ctype<char_type>::do_widen(c).
.PP
Note: this is not what you want for codepage conversions. See \fBcodecvt\fP for that.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The char to convert. 
.RE
.PP
\fBReturns:\fP
.RS 4
The converted char_type. 
.RE
.PP

.PP
Definition at line 286 of file locale_facets.h.
.PP
Referenced by std::money_get< _CharT, _InIter >::do_get(), std::time_put< _CharT, _OutIter >::do_put(), std::money_put< _CharT, _OutIter >::do_put(), and std::operator<<().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
