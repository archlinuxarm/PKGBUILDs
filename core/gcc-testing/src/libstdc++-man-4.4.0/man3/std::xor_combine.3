.TH "std::xor_combine" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::xor_combine \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef __gnu_cxx::__conditional_type<(sizeof(_Result_type1) > \fB_Result_type1\fP"
.br
.ti -1c
.RI "typedef _UniformRandomNumberGenerator1 \fBbase1_type\fP"
.br
.ti -1c
.RI "typedef _UniformRandomNumberGenerator2 \fBbase2_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__conditional_type<(sizeof(_Result_type1) > _Result_type2::__type \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBbase1_type\fP & \fBbase1\fP () const "
.br
.ti -1c
.RI "const \fBbase2_type\fP & \fBbase2\fP () const "
.br
.ti -1c
.RI "result_type \fBmax\fP () const "
.br
.ti -1c
.RI "result_type \fBmin\fP () const "
.br
.ti -1c
.RI "result_type \fBoperator()\fP ()"
.br
.ti -1c
.RI "template<class _Gen > void \fBseed\fP (_Gen &__g)"
.br
.ti -1c
.RI "void \fBseed\fP ()"
.br
.ti -1c
.RI "typedef __gnu_cxx::__conditional_type<(sizeof(_Result_type1) > \fBsizeof\fP (_Result_type2))"
.br
.ti -1c
.RI "template<class _Gen > \fBxor_combine\fP (_Gen &__g)"
.br
.ti -1c
.RI "\fBxor_combine\fP (unsigned long __s)"
.br
.ti -1c
.RI "\fBxor_combine\fP (const \fBbase1_type\fP &__rng1, const \fBbase2_type\fP &__rng2)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBshift1\fP"
.br
.ti -1c
.RI "static const int \fBshift2\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBxor_combine\fP &__lhs, const \fBxor_combine\fP &__rhs)"
.br
.ti -1c
.RI "template<class _UniformRandomNumberGenerator11 , int __s11, class _UniformRandomNumberGenerator21 , int __s21, typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, _Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fBxor_combine\fP< _UniformRandomNumberGenerator11, __s11, _UniformRandomNumberGenerator21, __s21 > &__x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBxor_combine\fP &__lhs, const \fBxor_combine\fP &__rhs)"
.br
.ti -1c
.RI "template<class _UniformRandomNumberGenerator11 , int __s11, class _UniformRandomNumberGenerator21 , int __s21, typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, _Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &__is, \fBxor_combine\fP< _UniformRandomNumberGenerator11, __s11, _UniformRandomNumberGenerator21, __s21 > &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> class std::xor_combine< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >"
A random number generator adaptor class that combines two random number generator engines into a single output sequence. 
.PP
Definition at line 1284 of file tr1_impl/random.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> typedef _UniformRandomNumberGenerator1 \fBstd::xor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >::\fBbase1_type\fP"
.PP
The type of the first underlying generator engine. 
.PP
Definition at line 1293 of file tr1_impl/random.
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> typedef _UniformRandomNumberGenerator2 \fBstd::xor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >::\fBbase2_type\fP"
.PP
The type of the second underlying generator engine. 
.PP
Definition at line 1295 of file tr1_impl/random.
.SH "Member Function Documentation"
.PP 
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> result_type \fBstd::xor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >::operator() ()\fC [inline]\fP"
.PP
Gets the next random number in the sequence. 
.PP
Definition at line 1365 of file tr1_impl/random.
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> typedef __gnu_cxx::__conditional_type<(sizeof(_Result_type1) > \fBstd::xor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 >::sizeof (_Result_type2)"
.PP
The type of the generated random value. 
.SH "Friends And Related Function Documentation"
.PP 
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> bool operator!= (const \fBxor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 > & __lhs, const \fBxor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 > & __rhs)\fC [friend]\fP"
.PP
Compares two xor_combine random number generator objects of the same type for inequality.
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP A xor_combine random number generator object. 
.br
\fI__rhs\fP Another xor_combine random number generator object.
.RE
.PP
\fBReturns:\fP
.RS 4
true if the two objects are not equal, false otherwise. 
.RE
.PP

.PP
Definition at line 1399 of file tr1_impl/random.
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> template<class _UniformRandomNumberGenerator11 , int __s11, class _UniformRandomNumberGenerator21 , int __s21, typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > & __os, const \fBxor_combine\fP< _UniformRandomNumberGenerator11, __s11, _UniformRandomNumberGenerator21, __s21 > & __x)\fC [friend]\fP"
.PP
Inserts the current state of a xor_combine random number generator engine \fC__x\fP into the output stream \fC__os\fP.
.PP
\fBParameters:\fP
.RS 4
\fI__os\fP An output stream. 
.br
\fI__x\fP A xor_combine random number generator engine.
.RE
.PP
\fBReturns:\fP
.RS 4
The output stream with the state of \fC__x\fP inserted or in an error state. 
.RE
.PP

.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> bool operator== (const \fBxor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 > & __lhs, const \fBxor_combine\fP< _UniformRandomNumberGenerator1, __s1, _UniformRandomNumberGenerator2, __s2 > & __rhs)\fC [friend]\fP"
.PP
Compares two xor_combine random number generator objects of the same type for equality.
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP A xor_combine random number generator object. 
.br
\fI__rhs\fP Another xor_combine random number generator object.
.RE
.PP
\fBReturns:\fP
.RS 4
true if the two objects are equal, false otherwise. 
.RE
.PP

.PP
Definition at line 1382 of file tr1_impl/random.
.SS "template<class _UniformRandomNumberGenerator1, int __s1, class _UniformRandomNumberGenerator2, int __s2> template<class _UniformRandomNumberGenerator11 , int __s11, class _UniformRandomNumberGenerator21 , int __s21, typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > & __is, \fBxor_combine\fP< _UniformRandomNumberGenerator11, __s11, _UniformRandomNumberGenerator21, __s21 > & __x)\fC [friend]\fP"
.PP
Extracts the current state of a xor_combine random number generator engine \fC__x\fP from the input stream \fC__is\fP.
.PP
\fBParameters:\fP
.RS 4
\fI__is\fP An input stream. 
.br
\fI__x\fP A xor_combine random number generator engine.
.RE
.PP
\fBReturns:\fP
.RS 4
The input stream with the state of \fC__x\fP extracted or in an error state. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
