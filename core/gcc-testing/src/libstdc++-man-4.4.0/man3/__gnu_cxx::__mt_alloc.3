.TH "__gnu_cxx::__mt_alloc" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__mt_alloc \- This is a fixed size (power of 2) allocator which - when compiled with thread support - will maintain one freelist per size per thread plus a 'global' one. Steps are taken to limit the per thread freelist sizes (by returning excess back to the 'global' list).
.PP
Further details: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch32.html.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits \fB__mt_alloc_base< _Tp >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Poolp \fB__policy_type\fP"
.br
.ti -1c
.RI "typedef _Poolp::pool_type \fB__pool_type\fP"
.br
.ti -1c
.RI "typedef const _Tp * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename _Tp1 , typename _Poolp1 > \fB__mt_alloc\fP (const \fB__mt_alloc\fP< _Tp1, _Poolp1 > &)  throw ()"
.br
.ti -1c
.RI "\fB__mt_alloc\fP (const \fB__mt_alloc\fP &)  throw ()"
.br
.ti -1c
.RI "const __pool_base::_Tune \fB_M_get_options\fP ()"
.br
.ti -1c
.RI "void \fB_M_set_options\fP (__pool_base::_Tune __t)"
.br
.ti -1c
.RI "const_pointer \fBaddress\fP (const_reference __x) const"
.br
.ti -1c
.RI "pointer \fBaddress\fP (reference __x) const"
.br
.ti -1c
.RI "pointer \fBallocate\fP (size_type __n, const void *=0)"
.br
.ti -1c
.RI "void \fBconstruct\fP (pointer __p, _Args &&...__args)"
.br
.ti -1c
.RI "void \fBconstruct\fP (pointer __p, const _Tp &__val)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (pointer __p, size_type __n)"
.br
.ti -1c
.RI "void \fBdestroy\fP (pointer __p)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const  throw ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Poolp = __common_pool_policy<__pool,  true >> class __gnu_cxx::__mt_alloc< _Tp, _Poolp >"
This is a fixed size (power of 2) allocator which - when compiled with thread support - will maintain one freelist per size per thread plus a 'global' one. Steps are taken to limit the per thread freelist sizes (by returning excess back to the 'global' list).
.PP
Further details: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch32.html. 
.PP
Definition at line 625 of file mt_allocator.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
