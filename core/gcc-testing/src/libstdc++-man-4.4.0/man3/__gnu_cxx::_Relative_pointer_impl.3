.TH "__gnu_cxx::_Relative_pointer_impl" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::_Relative_pointer_impl \- A storage policy for use with _Pointer_adapter<> which stores the pointer's address as an offset value which is relative to its own address.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBelement_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "_Tp * \fBget\fP () const "
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fB_Relative_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fB_Relative_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "void \fBset\fP (_Tp *__arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp> class __gnu_cxx::_Relative_pointer_impl< _Tp >"
A storage policy for use with _Pointer_adapter<> which stores the pointer's address as an offset value which is relative to its own address. 

This is intended for pointers within shared memory regions which might be mapped at different addresses by different processes. For null pointers, a value of 1 is used. (0 is legitimate sometimes for nodes in circularly linked lists) This value was chosen as the least likely to generate an incorrect null, As there is no reason why any normal pointer would point 1 byte into its own pointer address. 
.PP
Definition at line 99 of file pointer.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
