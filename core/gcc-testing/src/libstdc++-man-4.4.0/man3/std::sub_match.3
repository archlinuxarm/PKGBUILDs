.TH "std::sub_match" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::sub_match \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBpair< _BiIter, _BiIter >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBiterator_traits\fP< _BiIter >::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _BiIter \fBfirst_type\fP"
.br
.ti -1c
.RI "typedef _BiIter \fBiterator\fP"
.br
.ti -1c
.RI "typedef _BiIter \fBsecond_type\fP"
.br
.ti -1c
.RI "typedef \fBiterator_traits\fP< _BiIter >::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "int \fBcompare\fP (const value_type *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBbasic_string\fP< value_type > &__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBsub_match\fP &__s) const "
.br
.ti -1c
.RI "difference_type \fBlength\fP () const "
.br
.ti -1c
.RI "\fBoperator basic_string< value_type >\fP () const "
.br
.ti -1c
.RI "\fBbasic_string\fP< value_type > \fBstr\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBpair\fP &&__p)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "_BiIter \fBfirst\fP"
.br
.ti -1c
.RI "bool \fBmatched\fP"
.br
.ti -1c
.RI "_BiIter \fBsecond\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _BiIter> class std::sub_match< _BiIter >"
A sequence of characters matched by a particular marked sub-expression.
.PP
An object of this class is essentially a \fBpair\fP of iterators marking a matched subexpression within a regular expression pattern match. Such objects can be converted to and compared with \fBstd::basic_string\fP objects of a similar base character type as the pattern matched by the regular expression.
.PP
The iterators that make up the \fBpair\fP are the usual half-open interval referencing the actual original pattern matched. 
.PP
Definition at line 1086 of file tr1_impl/regex.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef _BiIter  \fBstd::pair\fP< _BiIter , _BiIter  >::\fBfirst_type\fP\fC [inherited]\fP"
.PP
\fCfirst_type\fP is the first bound type 
.PP
Definition at line 69 of file stl_pair.h.
.SS "typedef _BiIter  \fBstd::pair\fP< _BiIter , _BiIter  >::\fBsecond_type\fP\fC [inherited]\fP"
.PP
\fCsecond_type\fP is the second bound type 
.PP
Definition at line 70 of file stl_pair.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _BiIter> int \fBstd::sub_match\fP< _BiIter >::compare (const value_type * __s) const\fC [inline]\fP"
.PP
Compares this \fBsub_match\fP to a C-style string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP A C-style string to compare to this \fBsub_match\fP.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI<0\fP this matched sequence will \fBcollate\fP before \fCs\fP. 
.br
\fI=0\fP this matched sequence is equivalent to \fCs\fP. 
.br
\fI<0\fP this matched sequence will \fBcollate\fP after \fCs\fP. 
.RE
.PP

.PP
Definition at line 1170 of file tr1_impl/regex.
.SS "template<typename _BiIter> int \fBstd::sub_match\fP< _BiIter >::compare (const \fBbasic_string\fP< value_type > & __s) const\fC [inline]\fP"
.PP
Compares this \fBsub_match\fP to a string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP A string to compare to this \fBsub_match\fP.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI<0\fP this matched sequence will \fBcollate\fP before \fCs\fP. 
.br
\fI=0\fP this matched sequence is equivalent to \fCs\fP. 
.br
\fI<0\fP this matched sequence will \fBcollate\fP after \fCs\fP. 
.RE
.PP

.PP
Definition at line 1157 of file tr1_impl/regex.
.SS "template<typename _BiIter> int \fBstd::sub_match\fP< _BiIter >::compare (const \fBsub_match\fP< _BiIter > & __s) const\fC [inline]\fP"
.PP
Compares this and another matched sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Another matched sequence to compare to this one.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI<0\fP this matched sequence will \fBcollate\fP before \fCs\fP. 
.br
\fI=0\fP this matched sequence is equivalent to \fCs\fP. 
.br
\fI<0\fP this matched sequence will \fBcollate\fP after \fCs\fP. 
.RE
.PP

.PP
Definition at line 1144 of file tr1_impl/regex.
.PP
Referenced by std::operator!=(), std::operator==(), std::operator>(), and std::operator>=().
.SS "template<typename _BiIter> difference_type \fBstd::sub_match\fP< _BiIter >::length () const\fC [inline]\fP"
.PP
Gets the length of the matching sequence. 
.PP
Definition at line 1101 of file tr1_impl/regex.
.SS "template<typename _BiIter> \fBstd::sub_match\fP< _BiIter >::operator \fBbasic_string\fP< value_type > () const\fC [inline]\fP"
.PP
Gets the matching sequence as a string. 
.PP
\fBReturns:\fP
.RS 4
the matching sequence as a string.
.RE
.PP
This is the implicit conversion operator. It is identical to the \fBstr()\fP member function except that it will want to pop up in unexpected places and cause a great deal of confusion and cursing from the unwary. 
.PP
Definition at line 1114 of file tr1_impl/regex.
.SS "template<typename _BiIter> \fBbasic_string\fP<value_type> \fBstd::sub_match\fP< _BiIter >::str () const\fC [inline]\fP"
.PP
Gets the matching sequence as a string. 
.PP
\fBReturns:\fP
.RS 4
the matching sequence as a string. 
.RE
.PP

.PP
Definition at line 1127 of file tr1_impl/regex.
.PP
Referenced by std::sub_match< _Bi_iter >::compare(), std::operator!=(), std::operator<(), std::operator<=(), std::operator==(), std::operator>(), and std::operator>=().
.SH "Member Data Documentation"
.PP 
.SS "_BiIter  \fBstd::pair\fP< _BiIter , _BiIter  >::\fBfirst\fP\fC [inherited]\fP"
.PP
\fCfirst\fP is a copy of the first object 
.PP
Definition at line 72 of file stl_pair.h.
.PP
Referenced by std::sub_match< _Bi_iter >::length(), std::sub_match< _Bi_iter >::operator basic_string< value_type >(), and std::sub_match< _Bi_iter >::str().
.SS "_BiIter  \fBstd::pair\fP< _BiIter , _BiIter  >::\fBsecond\fP\fC [inherited]\fP"
.PP
\fCsecond\fP is a copy of the second object 
.PP
Definition at line 73 of file stl_pair.h.
.PP
Referenced by std::sub_match< _Bi_iter >::length(), std::sub_match< _Bi_iter >::operator basic_string< value_type >(), and std::sub_match< _Bi_iter >::str().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
