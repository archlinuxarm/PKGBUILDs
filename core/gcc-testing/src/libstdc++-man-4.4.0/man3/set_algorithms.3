.TH "Set Operation Algorithms" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Set Operation Algorithms \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _Compare > bool \fBstd::includes\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 > bool \fBstd::includes\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator \fBstd::set_difference\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator \fBstd::set_difference\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator \fBstd::set_intersection\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator \fBstd::set_intersection\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator \fBstd::set_symmetric_difference\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator \fBstd::set_symmetric_difference\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator \fBstd::set_union\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator \fBstd::set_union\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)"
.br
.in -1c
.SH "Detailed Description"
.PP 
These algorithms are common \fBset\fP operations performed on sequences that are already sorted. The number of comparisons will be linear. 
.SH "Function Documentation"
.PP 
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _Compare > bool std::includes (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\fC [inline]\fP"
.PP
Determines whether all elements of a sequence exists in a range using comparison. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of search range. 
.br
\fIlast1\fP End of search range. 
.br
\fIfirst2\fP Start of sequence 
.br
\fIlast2\fP End of sequence. 
.br
\fIcomp\fP Comparison function to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if each element in [first2,last2) is contained in order within [first1,last1) according to comp. False otherwise.
.RE
.PP
This operation expects both [first1,last1) and [first2,last2) to be sorted. Searches for the presence of each element in [first2,last2) within [first1,last1), using comp to decide. The iterators over each range only move forward, so this is a linear algorithm. If an element in [first2,last2) is not found before the search \fBiterator\fP reaches \fIlast2\fP, false is returned. 
.PP
Definition at line 3520 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 > bool std::includes (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\fC [inline]\fP"
.PP
Determines whether all elements of a sequence exists in a range. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of search range. 
.br
\fIlast1\fP End of search range. 
.br
\fIfirst2\fP Start of sequence 
.br
\fIlast2\fP End of sequence. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if each element in [first2,last2) is contained in order within [first1,last1). False otherwise.
.RE
.PP
This operation expects both [first1,last1) and [first2,last2) to be sorted. Searches for the presence of each element in [first2,last2) within [first1,last1). The iterators over each range only move forward, so this is a linear algorithm. If an element in [first2,last2) is not found before the search \fBiterator\fP reaches \fIlast2\fP, false is returned. 
.PP
Definition at line 3470 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator std::set_difference (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\fC [inline]\fP"
.PP
Return the difference of two sorted ranges using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.br
\fIcomp\fP The comparison functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range. Iterators increment for each range. When the current element of the first range is \fBless\fP than the second according to \fIcomp\fP, that element is copied and the \fBiterator\fP advances. If the current element of the second range is \fBless\fP, no element is copied and the \fBiterator\fP advances. If an element is contained in both ranges according to \fIcomp\fP, no elements are copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5806 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator std::set_difference (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\fC [inline]\fP"
.PP
Return the difference of two sorted ranges. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range. Iterators increment for each range. When the current element of the first range is \fBless\fP than the second, that element is copied and the \fBiterator\fP advances. If the current element of the second range is \fBless\fP, the \fBiterator\fP advances, but no element is copied. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5745 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator std::set_intersection (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\fC [inline]\fP"
.PP
Return the intersection of two sorted ranges using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.br
\fIcomp\fP The comparison functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other according to \fIcomp\fP, that \fBiterator\fP advances. If an element is contained in both ranges according to \fIcomp\fP, the element from the first range is copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5687 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator std::set_intersection (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\fC [inline]\fP"
.PP
Return the intersection of two sorted ranges. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other, that \fBiterator\fP advances. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5630 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator std::set_symmetric_difference (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\fC [inline]\fP"
.PP
Return the symmetric difference of two sorted ranges using comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.br
\fIcomp\fP The comparison functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other according to \fIcomp\fP, that element is copied and the \fBiterator\fP advances. If an element is contained in both ranges according to \fIcomp\fP, no elements are copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5930 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator std::set_symmetric_difference (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\fC [inline]\fP"
.PP
Return the symmetric difference of two sorted ranges. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other, that element is copied and the \fBiterator\fP advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5864 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator , typename _Compare > _OutputIterator std::set_union (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\fC [inline]\fP"
.PP
Return the union of two sorted ranges using a comparison functor. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.br
\fIcomp\fP The comparison functor. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other according to \fIcomp\fP, that element is copied and the \fBiterator\fP advanced. If an equivalent element according to \fIcomp\fP is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5563 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _OutputIterator > _OutputIterator std::set_union (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\fC [inline]\fP"
.PP
Return the union of two sorted ranges. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of first range. 
.br
\fIlast1\fP End of first range. 
.br
\fIfirst2\fP Start of second range. 
.br
\fIlast2\fP End of second range. 
.RE
.PP
\fBReturns:\fP
.RS 4
End of the output range.
.RE
.PP
This operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is \fBless\fP than the other, that element is copied and the \fBiterator\fP advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range. 
.PP
Definition at line 5496 of file stl_algo.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
