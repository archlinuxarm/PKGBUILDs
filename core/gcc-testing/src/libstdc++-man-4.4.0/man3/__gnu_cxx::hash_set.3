.TH "__gnu_cxx::hash_set" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::hash_set \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Ht::allocator_type \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Ht::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Alloc::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Alloc::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Ht::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Ht::hasher \fBhasher\fP"
.br
.ti -1c
.RI "typedef _Ht::const_iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Ht::key_equal \fBkey_equal\fP"
.br
.ti -1c
.RI "typedef _Ht::key_type \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Alloc::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Alloc::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Ht::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Ht::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "size_type \fBbucket_count\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "size_type \fBcount\fP (const key_type &__key) const "
.br
.ti -1c
.RI "size_type \fBelems_in_bucket\fP (size_type __n) const "
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP () const "
.br
.ti -1c
.RI "\fBpair\fP< iterator, iterator > \fBequal_range\fP (const key_type &__key) const "
.br
.ti -1c
.RI "void \fBerase\fP (iterator __f, iterator __l)"
.br
.ti -1c
.RI "void \fBerase\fP (iterator __it)"
.br
.ti -1c
.RI "size_type \fBerase\fP (const key_type &__key)"
.br
.ti -1c
.RI "iterator \fBfind\fP (const key_type &__key) const "
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "hasher \fBhash_funct\fP () const "
.br
.ti -1c
.RI "template<class _InputIterator > \fBhash_set\fP (_InputIterator __f, _InputIterator __l, size_type __n, const hasher &__hf, const key_equal &__eql, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "template<class _InputIterator > \fBhash_set\fP (_InputIterator __f, _InputIterator __l, size_type __n, const hasher &__hf)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBhash_set\fP (_InputIterator __f, _InputIterator __l, size_type __n)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBhash_set\fP (_InputIterator __f, _InputIterator __l)"
.br
.ti -1c
.RI "\fBhash_set\fP (size_type __n, const hasher &__hf, const key_equal &__eql, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBhash_set\fP (size_type __n, const hasher &__hf)"
.br
.ti -1c
.RI "\fBhash_set\fP (size_type __n)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBinsert\fP (_InputIterator __f, _InputIterator __l)"
.br
.ti -1c
.RI "\fBpair\fP< iterator, bool > \fBinsert\fP (const value_type &__obj)"
.br
.ti -1c
.RI "\fBpair\fP< iterator, bool > \fBinsert_noresize\fP (const value_type &__obj)"
.br
.ti -1c
.RI "key_equal \fBkey_eq\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_bucket_count\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "void \fBresize\fP (size_type __hint)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBhash_set\fP &__hs)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<class _Val , class _HF , class _EqK , class _Al > bool \fBoperator==\fP (const \fBhash_set\fP< _Val, _HF, _EqK, _Al > &, const \fBhash_set\fP< _Val, _HF, _EqK, _Al > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Value, class _HashFcn = hash<_Value>, class _EqualKey = equal_to<_Value>, class _Alloc = allocator<_Value>> class __gnu_cxx::hash_set< _Value, _HashFcn, _EqualKey, _Alloc >"
This is an SGI extension.
.PP
\fBTodo\fP
.RS 4
Doc me! See doc/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more. 
.RE
.PP

.PP
Definition at line 79 of file hash_set.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
