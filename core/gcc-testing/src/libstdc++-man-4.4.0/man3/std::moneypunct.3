.TH "std::moneypunct" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::moneypunct \- Facet for formatting data for money amounts.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits \fBstd::locale::facet\fP, and \fBstd::money_base\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum { \fB_S_minus\fP, \fB_S_zero\fP, \fB_S_end\fP }"
.br
.ti -1c
.RI "typedef __moneypunct_cache< _CharT, _Intl > \fB__cache_type\fP"
.br
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef _CharT \fBchar_type\fP"
.br
.ti -1c
.RI "typedef \fBbasic_string\fP< _CharT > \fBstring_type\fP"
.br
.in -1c
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "template<> void \fB_M_initialize_moneypunct\fP (__c_locale, const char *)"
.br
.ti -1c
.RI "\fBstring_type\fP \fBcurr_symbol\fP () const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBdecimal_point\fP () const "
.br
.ti -1c
.RI "int \fBfrac_digits\fP () const "
.br
.ti -1c
.RI "\fBstring\fP \fBgrouping\fP () const "
.br
.ti -1c
.RI "\fBmoneypunct\fP (__c_locale __cloc, const char *__s, size_t __refs=0)"
.br
.ti -1c
.RI "\fBmoneypunct\fP (__cache_type *__cache, size_t __refs=0)"
.br
.ti -1c
.RI "\fBmoneypunct\fP (size_t __refs=0)"
.br
.ti -1c
.RI "\fBstring_type\fP \fBnegative_sign\fP () const "
.br
.ti -1c
.RI "\fBstring_type\fP \fBpositive_sign\fP () const "
.br
.ti -1c
.RI "\fBchar_type\fP \fBthousands_sep\fP () const "
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "pattern \fBneg_format\fP () const "
.br
.ti -1c
.RI "pattern \fBpos_format\fP () const "
.br
.in -1c
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static pattern \fB_S_construct_pattern\fP (char __precedes, char __space, char __posn)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const char * \fB_S_atoms\fP"
.br
.ti -1c
.RI "static const pattern \fB_S_default_pattern\fP"
.br
.ti -1c
.RI "static \fBlocale::id\fP \fBid\fP"
.br
.ti -1c
.RI "static const bool \fBintl\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_initialize_moneypunct\fP (__c_locale __cloc=NULL, const char *__name=NULL)"
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_curr_symbol\fP () const "
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_decimal_point\fP () const "
.br
.ti -1c
.RI "virtual int \fBdo_frac_digits\fP () const "
.br
.ti -1c
.RI "virtual \fBstring\fP \fBdo_grouping\fP () const "
.br
.ti -1c
.RI "virtual pattern \fBdo_neg_format\fP () const "
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_negative_sign\fP () const "
.br
.ti -1c
.RI "virtual pattern \fBdo_pos_format\fP () const "
.br
.ti -1c
.RI "virtual \fBstring_type\fP \fBdo_positive_sign\fP () const "
.br
.ti -1c
.RI "virtual \fBchar_type\fP \fBdo_thousands_sep\fP () const "
.br
.ti -1c
.RI "virtual \fB~moneypunct\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static __c_locale \fB_S_clone_c_locale\fP (__c_locale &__cloc)"
.br
.ti -1c
.RI "static void \fB_S_create_c_locale\fP (__c_locale &__cloc, const char *__s, __c_locale __old=0)"
.br
.ti -1c
.RI "static void \fB_S_destroy_c_locale\fP (__c_locale &__cloc)"
.br
.ti -1c
.RI "static __c_locale \fB_S_get_c_locale\fP ()"
.br
.ti -1c
.RI "static const char * \fB_S_get_c_name\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBlocale::_Impl\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, bool _Intl> class std::moneypunct< _CharT, _Intl >"
Facet for formatting data for money amounts. 

This facet encapsulates the punctuation, grouping and other formatting features of money amount string representations. 
.PP
Definition at line 919 of file locale_facets_nonio.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _CharT, bool _Intl> typedef _CharT \fBstd::moneypunct\fP< _CharT, _Intl >::\fBchar_type\fP"
.PP
Public typedefs. 
.PP
Reimplemented in \fBstd::moneypunct_byname< _CharT, _Intl >\fP.
.PP
Definition at line 925 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> typedef \fBbasic_string\fP<_CharT> \fBstd::moneypunct\fP< _CharT, _Intl >::\fBstring_type\fP"
.PP
Public typedefs. 
.PP
Reimplemented in \fBstd::moneypunct_byname< _CharT, _Intl >\fP.
.PP
Definition at line 926 of file locale_facets_nonio.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _CharT, bool _Intl> \fBstd::moneypunct\fP< _CharT, _Intl >::\fBmoneypunct\fP (size_t __refs = \fC0\fP)\fC [inline, explicit]\fP"
.PP
Constructor performs initialization. 
.PP
This is the constructor provided by the standard.
.PP
\fBParameters:\fP
.RS 4
\fIrefs\fP Passed to the base facet class. 
.RE
.PP

.PP
Definition at line 948 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBstd::moneypunct\fP< _CharT, _Intl >::\fBmoneypunct\fP (__cache_type * __cache, size_t __refs = \fC0\fP)\fC [inline, explicit]\fP"
.PP
Constructor performs initialization. 
.PP
This is an internal constructor.
.PP
\fBParameters:\fP
.RS 4
\fIcache\fP Cache for optimization. 
.br
\fIrefs\fP Passed to the base facet class. 
.RE
.PP

.PP
Definition at line 960 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBstd::moneypunct\fP< _CharT, _Intl >::\fBmoneypunct\fP (__c_locale __cloc, const char * __s, size_t __refs = \fC0\fP)\fC [inline, explicit]\fP"
.PP
Internal constructor. Not for general use. 
.PP
This is a constructor for use by the library itself to \fBset\fP up new locales.
.PP
\fBParameters:\fP
.RS 4
\fIcloc\fP The 'C' \fBlocale\fP. 
.br
\fIs\fP The name of a \fBlocale\fP. 
.br
\fIrefs\fP Passed to the base facet class. 
.RE
.PP

.PP
Definition at line 975 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> virtual \fBstd::moneypunct\fP< _CharT, _Intl >::~\fBmoneypunct\fP ()\fC [protected, virtual]\fP"
.PP
Destructor. 
.PP
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT, bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::curr_symbol () const\fC [inline]\fP"
.PP
Return currency symbol string. 
.PP
This function returns a string_type to use as a currency symbol. It does so by returning returning \fBmoneypunct<char_type>::do_curr_symbol()\fP.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a currency symbol. 
.RE
.PP

.PP
Definition at line 1044 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::decimal_point () const\fC [inline]\fP"
.PP
Return decimal point character. 
.PP
This function returns a char_type to use as a decimal point. It does so by returning returning \fBmoneypunct<char_type>::do_decimal_point()\fP.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representing a decimal point. 
.RE
.PP

.PP
Definition at line 989 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_curr_symbol () const\fC [inline, protected, virtual]\fP"
.PP
Return currency symbol string. 
.PP
This function returns a string_type to use as a currency symbol. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBcurr_symbol()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a currency symbol. 
.RE
.PP

.PP
Definition at line 1189 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::curr_symbol().
.SS "template<typename _CharT, bool _Intl> virtual \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_decimal_point () const\fC [inline, protected, virtual]\fP"
.PP
Return decimal point character. 
.PP
Returns a char_type to use as a decimal point. This function is a hook for derived classes to change the value returned.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representing a decimal point. 
.RE
.PP

.PP
Definition at line 1151 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::decimal_point().
.SS "template<typename _CharT, bool _Intl> virtual int \fBstd::moneypunct\fP< _CharT, _Intl >::do_frac_digits () const\fC [inline, protected, virtual]\fP"
.PP
Return number of digits in fraction. 
.PP
This function returns the exact number of digits that make up the fractional part of a money amount. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBfrac_digits()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
Number of digits in amount fraction. 
.RE
.PP

.PP
Definition at line 1229 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::frac_digits().
.SS "template<typename _CharT, bool _Intl> virtual \fBstring\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_grouping () const\fC [inline, protected, virtual]\fP"
.PP
Return grouping specification. 
.PP
Returns a string representing groupings for the integer part of a number. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBgrouping()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
String representing grouping specification. 
.RE
.PP

.PP
Definition at line 1176 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::grouping().
.SS "template<typename _CharT, bool _Intl> virtual pattern \fBstd::moneypunct\fP< _CharT, _Intl >::do_neg_format () const\fC [inline, protected, virtual]\fP"
.PP
Return pattern for money values. 
.PP
This function returns a pattern describing the formatting of a negative valued money amount. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBneg_format()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
Pattern for money values. 
.RE
.PP

.PP
Definition at line 1257 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::neg_format().
.SS "template<typename _CharT, bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_negative_sign () const\fC [inline, protected, virtual]\fP"
.PP
Return negative sign string. 
.PP
This function returns a string_type to use as a sign for negative amounts. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBnegative_sign()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a negative sign. 
.RE
.PP

.PP
Definition at line 1215 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::negative_sign().
.SS "template<typename _CharT, bool _Intl> virtual pattern \fBstd::moneypunct\fP< _CharT, _Intl >::do_pos_format () const\fC [inline, protected, virtual]\fP"
.PP
Return pattern for money values. 
.PP
This function returns a pattern describing the formatting of a positive valued money amount. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBpos_format()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
Pattern for money values. 
.RE
.PP

.PP
Definition at line 1243 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::pos_format().
.SS "template<typename _CharT, bool _Intl> virtual \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_positive_sign () const\fC [inline, protected, virtual]\fP"
.PP
Return positive sign string. 
.PP
This function returns a string_type to use as a sign for positive amounts. This function is a hook for derived classes to change the value returned. 
.PP
\fBSee also:\fP
.RS 4
\fBpositive_sign()\fP for details.
.RE
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a positive sign. 
.RE
.PP

.PP
Definition at line 1202 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::positive_sign().
.SS "template<typename _CharT, bool _Intl> virtual \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::do_thousands_sep () const\fC [inline, protected, virtual]\fP"
.PP
Return thousands separator character. 
.PP
Returns a char_type to use as a thousands separator. This function is a hook for derived classes to change the value returned.
.PP
\fBReturns:\fP
.RS 4
\fIchar_type\fP representing a thousands separator. 
.RE
.PP

.PP
Definition at line 1163 of file locale_facets_nonio.h.
.PP
Referenced by std::moneypunct< _CharT, _Intl >::thousands_sep().
.SS "template<typename _CharT, bool _Intl> int \fBstd::moneypunct\fP< _CharT, _Intl >::frac_digits () const\fC [inline]\fP"
.PP
Return number of digits in fraction. 
.PP
This function returns the exact number of digits that make up the fractional part of a money amount. It does so by returning returning \fBmoneypunct<char_type>::do_frac_digits()\fP.
.PP
The fractional part of a money amount is optional. But if it is present, there must be \fBfrac_digits()\fP digits.
.PP
\fBReturns:\fP
.RS 4
Number of digits in amount fraction. 
.RE
.PP

.PP
Definition at line 1094 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBstring\fP \fBstd::moneypunct\fP< _CharT, _Intl >::grouping () const\fC [inline]\fP"
.PP
Return grouping specification. 
.PP
This function returns a string representing groupings for the integer part of an amount. Groupings indicate where thousands separators should be inserted.
.PP
Each char in the return string is interpret as an integer rather than a character. These numbers represent the number of digits in a group. The first char in the string represents the number of digits in the least significant group. If a char is negative, it indicates an unlimited number of digits for the group. If more chars from the string are required to group a number, the last char is used repeatedly.
.PP
For example, if the \fBgrouping()\fP returns '\\003\\002' and is applied to the number 123456789, this corresponds to 12,34,56,789. Note that if the string was '32', this would put more than 50 digits into the least significant group if the character \fBset\fP is ASCII.
.PP
The string is returned by calling \fBmoneypunct<char_type>::do_grouping()\fP.
.PP
\fBReturns:\fP
.RS 4
string representing grouping specification. 
.RE
.PP

.PP
Definition at line 1031 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> pattern \fBstd::moneypunct\fP< _CharT, _Intl >::neg_format () const\fC [inline]\fP"
.PP
Return pattern for money values. 
.PP
This function returns a pattern describing the formatting of a positive or negative valued money amount. It does so by returning returning \fBmoneypunct<char_type>::do_pos_format()\fP or \fBmoneypunct<char_type>::do_neg_format()\fP.
.PP
The pattern has 4 fields describing the ordering of symbol, sign, value, and none or space. There must be one of each in the pattern. The none and space enums may not appear in the first field and space may not appear in the final field.
.PP
The parts of a money string must appear in the order indicated by the fields of the pattern. The symbol field indicates that the value of \fBcurr_symbol()\fP may be present. The sign field indicates that the value of \fBpositive_sign()\fP or \fBnegative_sign()\fP must be present. The value field indicates that the absolute value of the money amount is present. none indicates 0 or more whitespace characters, except at the end, where it permits no whitespace. space indicates that 1 or more whitespace characters must be present.
.PP
For example, for the US \fBlocale\fP and \fBpos_format()\fP pattern {symbol,sign,value,none}, \fBcurr_symbol()\fP == '$' \fBpositive_sign()\fP == '+', and value 10.01, and options \fBset\fP to force the symbol, the corresponding string is '$+10.01'.
.PP
\fBReturns:\fP
.RS 4
Pattern for money values. 
.RE
.PP

.PP
Definition at line 1133 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::negative_sign () const\fC [inline]\fP"
.PP
Return negative sign string. 
.PP
This function returns a string_type to use as a sign for negative amounts. It does so by returning returning \fBmoneypunct<char_type>::do_negative_sign()\fP.
.PP
If the return value contains more than one character, the first character appears in the position indicated by \fBneg_format()\fP and the remainder appear at the end of the formatted string.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a negative sign. 
.RE
.PP

.PP
Definition at line 1078 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> pattern \fBstd::moneypunct\fP< _CharT, _Intl >::pos_format () const\fC [inline]\fP"
.PP
Return pattern for money values. 
.PP
This function returns a pattern describing the formatting of a positive or negative valued money amount. It does so by returning returning \fBmoneypunct<char_type>::do_pos_format()\fP or \fBmoneypunct<char_type>::do_neg_format()\fP.
.PP
The pattern has 4 fields describing the ordering of symbol, sign, value, and none or space. There must be one of each in the pattern. The none and space enums may not appear in the first field and space may not appear in the final field.
.PP
The parts of a money string must appear in the order indicated by the fields of the pattern. The symbol field indicates that the value of \fBcurr_symbol()\fP may be present. The sign field indicates that the value of \fBpositive_sign()\fP or \fBnegative_sign()\fP must be present. The value field indicates that the absolute value of the money amount is present. none indicates 0 or more whitespace characters, except at the end, where it permits no whitespace. space indicates that 1 or more whitespace characters must be present.
.PP
For example, for the US \fBlocale\fP and \fBpos_format()\fP pattern {symbol,sign,value,none}, \fBcurr_symbol()\fP == '$' \fBpositive_sign()\fP == '+', and value 10.01, and options \fBset\fP to force the symbol, the corresponding string is '$+10.01'.
.PP
\fBReturns:\fP
.RS 4
Pattern for money values. 
.RE
.PP

.PP
Definition at line 1129 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBstring_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::positive_sign () const\fC [inline]\fP"
.PP
Return positive sign string. 
.PP
This function returns a string_type to use as a sign for positive amounts. It does so by returning returning \fBmoneypunct<char_type>::do_positive_sign()\fP.
.PP
If the return value contains more than one character, the first character appears in the position indicated by \fBpos_format()\fP and the remainder appear at the end of the formatted string.
.PP
\fBReturns:\fP
.RS 4
\fIstring_type\fP representing a positive sign. 
.RE
.PP

.PP
Definition at line 1061 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> \fBchar_type\fP \fBstd::moneypunct\fP< _CharT, _Intl >::thousands_sep () const\fC [inline]\fP"
.PP
Return thousands separator character. 
.PP
This function returns a char_type to use as a thousands separator. It does so by returning returning \fBmoneypunct<char_type>::do_thousands_sep()\fP.
.PP
\fBReturns:\fP
.RS 4
char_type representing a thousands separator. 
.RE
.PP

.PP
Definition at line 1002 of file locale_facets_nonio.h.
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT, bool _Intl> \fBlocale::id\fP \fBstd::moneypunct\fP< _CharT, _Intl >::\fBid\fP\fC [inline, static]\fP"
.PP
Numpunct facet id. 
.PP
Definition at line 938 of file locale_facets_nonio.h.
.SS "template<typename _CharT, bool _Intl> const bool \fBstd::moneypunct\fP< _CharT, _Intl >::\fBintl\fP\fC [inline, static]\fP"
.PP
This value is provided by the standard, but no reason for its existence. 
.PP
Reimplemented in \fBstd::moneypunct_byname< _CharT, _Intl >\fP.
.PP
Definition at line 936 of file locale_facets_nonio.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
