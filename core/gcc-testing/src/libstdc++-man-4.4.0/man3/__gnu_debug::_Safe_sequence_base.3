.TH "__gnu_debug::_Safe_sequence_base" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_debug::_Safe_sequence_base \- Base class that supports tracking of iterators that reference a sequence.  

.PP
.SH SYNOPSIS
.br
.PP
Inherited by \fB__gnu_debug::_Safe_sequence< _Sequence >\fP, \fB__gnu_debug::_Safe_sequence< basic_string< _CharT, _Traits, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< deque< _Tp, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< list< _Tp, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< map< _Key, _Tp, _Compare, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< multimap< _Key, _Tp, _Compare, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< multiset< _Key, _Compare, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< set< _Key, _Compare, _Allocator > >\fP, \fB__gnu_debug::_Safe_sequence< unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > >\fP, \fB__gnu_debug::_Safe_sequence< unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > >\fP, \fB__gnu_debug::_Safe_sequence< unordered_multiset< _Value, _Hash, _Pred, _Alloc > >\fP, \fB__gnu_debug::_Safe_sequence< unordered_set< _Value, _Hash, _Pred, _Alloc > >\fP, \fB__gnu_debug::_Safe_sequence< vector< _Tp, _Allocator > >\fP, and std::__debug::bitset< _Nb >.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_invalidate_all\fP () const "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fB_Safe_iterator_base\fP * \fB_M_const_iterators\fP"
.br
.ti -1c
.RI "\fB_Safe_iterator_base\fP * \fB_M_iterators\fP"
.br
.ti -1c
.RI "unsigned int \fB_M_version\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_detach_all\fP ()"
.br
.ti -1c
.RI "void \fB_M_detach_singular\fP ()"
.br
.ti -1c
.RI "__gnu_cxx::__mutex & \fB_M_get_mutex\fP ()"
.br
.ti -1c
.RI "void \fB_M_revalidate_singular\fP ()"
.br
.ti -1c
.RI "void \fB_M_swap\fP (\fB_Safe_sequence_base\fP &__x)"
.br
.ti -1c
.RI "\fB~_Safe_sequence_base\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class that supports tracking of iterators that reference a sequence. 

The _Safe_sequence_base class provides basic support for tracking iterators into a sequence. Sequences that track iterators must derived from _Safe_sequence_base publicly, so that safe iterators (which inherit \fB_Safe_iterator_base\fP) can attach to them. This class contains two linked lists of iterators, one for constant iterators and one for mutable iterators, and a version number that allows very fast invalidation of all iterators that reference the container.
.PP
This class must ensure that no operation on it may throw an exception, otherwise 'safe' sequences may fail to provide the exception-safety guarantees required by the C++ standard. 
.PP
Definition at line 159 of file safe_base.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base ()\fC [inline, protected]\fP"
.PP
Notify all iterators that reference this sequence that the sequence is being destroyed. 
.PP
Definition at line 179 of file safe_base.h.
.PP
References _M_detach_all().
.SH "Member Function Documentation"
.PP 
.SS "void __gnu_debug::_Safe_sequence_base::_M_detach_all ()\fC [protected]\fP"
.PP
Detach all iterators, leaving them singular. 
.PP
Referenced by ~_Safe_sequence_base().
.SS "void __gnu_debug::_Safe_sequence_base::_M_detach_singular ()\fC [protected]\fP"
.PP
Detach all singular iterators. 
.PP
\fBPostcondition:\fP
.RS 4
for all iterators i attached to this sequence, i->_M_version == _M_version. 
.RE
.PP

.SS "__gnu_cxx::__mutex& __gnu_debug::_Safe_sequence_base::_M_get_mutex ()\fC [protected]\fP"
.PP
For use in \fB_Safe_sequence\fP. 
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "void __gnu_debug::_Safe_sequence_base::_M_invalidate_all () const\fC [inline]\fP"
.PP
Invalidates all iterators. 
.PP
Definition at line 215 of file safe_base.h.
.PP
References _M_version.
.SS "void __gnu_debug::_Safe_sequence_base::_M_revalidate_singular ()\fC [protected]\fP"
.PP
Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again). 
.SS "void __gnu_debug::_Safe_sequence_base::_M_swap (\fB_Safe_sequence_base\fP & __x)\fC [protected]\fP"
.PP
Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. 
.SH "Member Data Documentation"
.PP 
.SS "\fB_Safe_iterator_base\fP* \fB__gnu_debug::_Safe_sequence_base::_M_const_iterators\fP"
.PP
The list of constant iterators that reference this container. 
.PP
Definition at line 166 of file safe_base.h.
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_invalidate_single(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "\fB_Safe_iterator_base\fP* \fB__gnu_debug::_Safe_sequence_base::_M_iterators\fP"
.PP
The list of mutable iterators that reference this container. 
.PP
Definition at line 163 of file safe_base.h.
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_invalidate_single(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "unsigned int \fB__gnu_debug::_Safe_sequence_base::_M_version\fP\fC [mutable]\fP"
.PP
The container version number. This number may never be 0. 
.PP
Definition at line 169 of file safe_base.h.
.PP
Referenced by _M_invalidate_all().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
