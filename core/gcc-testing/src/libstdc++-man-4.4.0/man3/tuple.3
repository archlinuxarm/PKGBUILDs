.TH "tuple" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tuple \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::_Tuple_impl< _Idx >\fP"
.br
.ti -1c
.RI "struct \fBstd::_Tuple_impl< _Idx, _Head, _Tail...>\fP"
.br
.ti -1c
.RI "class \fBstd::tuple< _Elements >\fP"
.br
.RI "\fI\fBtuple\fP \fP"
.ti -1c
.RI "class \fBstd::tuple< _T1, _T2 >\fP"
.br
.RI "\fI\fBtuple\fP (2-element), with construction and assignment from a \fBpair\fP. \fP"
.ti -1c
.RI "struct \fBstd::tuple_element< 0, tuple< _Head, _Tail...> >\fP"
.br
.ti -1c
.RI "struct \fBstd::tuple_element< __i, tuple< _Head, _Tail...> >\fP"
.br
.ti -1c
.RI "struct \fBstd::tuple_size< tuple< _Elements...> >\fP"
.br
.RI "\fIclass tuple_size \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBstd\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_GLIBCXX_TUPLE\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<std::size_t __i, typename _Head , typename... _Tail> __add_c_ref< _Head >::type \fBstd::__get_helper\fP (const _Tuple_impl< __i, _Head, _Tail...> &__t)"
.br
.ti -1c
.RI "template<std::size_t __i, typename _Head , typename... _Tail> __add_ref< _Head >::type \fBstd::__get_helper\fP (_Tuple_impl< __i, _Head, _Tail...> &__t)"
.br
.ti -1c
.RI "template<typename... _TElements, std::size_t... _TIdx, typename... _UElements, std::size_t... _UIdx> tuple< _TElements..., _UElements...> \fBstd::__tuple_cat_helper\fP (tuple< _TElements...> &&__t, const __index_holder< _TIdx...> &, tuple< _UElements...> &&__u, const __index_holder< _UIdx...> &)"
.br
.ti -1c
.RI "template<typename... _TElements, std::size_t... _TIdx, typename... _UElements, std::size_t... _UIdx> tuple< _TElements..., _UElements...> \fBstd::__tuple_cat_helper\fP (const tuple< _TElements...> &__t, const __index_holder< _TIdx...> &, tuple< _UElements...> &&__u, const __index_holder< _UIdx...> &)"
.br
.ti -1c
.RI "template<typename... _TElements, std::size_t... _TIdx, typename... _UElements, std::size_t... _UIdx> tuple< _TElements..., _UElements...> \fBstd::__tuple_cat_helper\fP (tuple< _TElements...> &&__t, const __index_holder< _TIdx...> &, const tuple< _UElements...> &__u, const __index_holder< _UIdx...> &)"
.br
.ti -1c
.RI "template<typename... _TElements, std::size_t... _TIdx, typename... _UElements, std::size_t... _UIdx> tuple< _TElements..., _UElements...> \fBstd::__tuple_cat_helper\fP (const tuple< _TElements...> &__t, const __index_holder< _TIdx...> &, const tuple< _UElements...> &__u, const __index_holder< _UIdx...> &)"
.br
.ti -1c
.RI "template<std::size_t __i, typename... _Elements> __add_c_ref< typename tuple_element< __i, tuple< _Elements...> >::type >::type \fBstd::get\fP (const tuple< _Elements...> &__t)"
.br
.ti -1c
.RI "template<std::size_t __i, typename... _Elements> __add_ref< typename tuple_element< __i, tuple< _Elements...> >::type >::type \fBstd::get\fP (tuple< _Elements...> &__t)"
.br
.ti -1c
.RI "template<typename... _Elements> tuple< typename __decay_and_strip< _Elements >::__type...> \fBstd::make_tuple\fP (_Elements &&...__args)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator!=\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator<\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator<=\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator==\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator>\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> bool \fBstd::operator>=\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _Elements> void \fBstd::swap\fP (tuple< _Elements...> &__x, tuple< _Elements...> &&__y)"
.br
.ti -1c
.RI "template<typename... _Elements> void \fBstd::swap\fP (tuple< _Elements...> &&__x, tuple< _Elements...> &__y)"
.br
.ti -1c
.RI "template<typename... _Elements> void \fBstd::swap\fP (tuple< _Elements...> &__x, tuple< _Elements...> &__y)"
.br
.ti -1c
.RI "template<typename... _Elements> tuple< _Elements &...> \fBstd::tie\fP (_Elements &...__args)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> tuple< _TElements..., _UElements...> \fBstd::tuple_cat\fP (tuple< _TElements...> &&__t, tuple< _UElements...> &&__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> tuple< _TElements..., _UElements...> \fBstd::tuple_cat\fP (const tuple< _TElements...> &__t, tuple< _UElements...> &&__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> tuple< _TElements..., _UElements...> \fBstd::tuple_cat\fP (tuple< _TElements...> &&__t, const tuple< _UElements...> &__u)"
.br
.ti -1c
.RI "template<typename... _TElements, typename... _UElements> tuple< _TElements..., _UElements...> \fBstd::tuple_cat\fP (const tuple< _TElements...> &__t, const tuple< _UElements...> &__u)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a Standard C++ Library header. 
.PP
Definition in file \fBtuple\fP.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
