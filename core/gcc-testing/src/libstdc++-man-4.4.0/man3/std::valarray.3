.TH "std::valarray" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::valarray \- Smart \fBarray\fP designed to support numeric processing.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "_Expr< _RefFunClos< _ValArray, _Tp >, _Tp > \fBapply\fP (_Tp func(const _Tp &)) const "
.br
.ti -1c
.RI "_Expr< _ValFunClos< _ValArray, _Tp >, _Tp > \fBapply\fP (_Tp func(_Tp)) const "
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBcshift\fP (int) const "
.br
.ti -1c
.RI "_Tp \fBmax\fP () const "
.br
.ti -1c
.RI "_Tp \fBmin\fP () const "
.br
.ti -1c
.RI "_UnaryOp< __logical_not >::_Rt \fBoperator!\fP () const "
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator%=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator%=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator%=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator&=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator&=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator&=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator*=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator*=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator*=\fP (const _Tp &)"
.br
.ti -1c
.RI "_UnaryOp< __unary_plus >::_Rt \fBoperator+\fP () const "
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator+=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator+=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator+=\fP (const _Tp &)"
.br
.ti -1c
.RI "_UnaryOp< __negate >::_Rt \fBoperator-\fP () const "
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator-=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator-=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator-=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator/=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator/=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator/=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator<<=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP & \fBoperator=\fP (\fBinitializer_list\fP< _Tp >)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBindirect_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBmask_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBgslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator>>=\fP (const _Tp &)"
.br
.ti -1c
.RI "\fBindirect_array\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< size_t > &)"
.br
.ti -1c
.RI "_Expr< _IClos< _ValArray, _Tp >, _Tp > \fBoperator[]\fP (const \fBvalarray\fP< size_t > &) const "
.br
.ti -1c
.RI "\fBmask_array\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< bool > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBoperator[]\fP (const \fBvalarray\fP< bool > &) const "
.br
.ti -1c
.RI "\fBgslice_array\fP< _Tp > \fBoperator[]\fP (const \fBgslice\fP &)"
.br
.ti -1c
.RI "_Expr< _GClos< _ValArray, _Tp >, _Tp > \fBoperator[]\fP (const \fBgslice\fP &) const "
.br
.ti -1c
.RI "\fBslice_array\fP< _Tp > \fBoperator[]\fP (\fBslice\fP)"
.br
.ti -1c
.RI "_Expr< _SClos< _ValArray, _Tp >, _Tp > \fBoperator[]\fP (\fBslice\fP) const "
.br
.ti -1c
.RI "const _Tp & \fBoperator[]\fP (size_t) const "
.br
.ti -1c
.RI "_Tp & \fBoperator[]\fP (size_t)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator^=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator^=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator^=\fP (const _Tp &)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP< _Tp > & \fBoperator|=\fP (const _Expr< _Dom, _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator|=\fP (const \fBvalarray\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > & \fBoperator|=\fP (const _Tp &)"
.br
.ti -1c
.RI "_UnaryOp< __bitwise_not >::_Rt \fBoperator~\fP () const "
.br
.ti -1c
.RI "void \fBresize\fP (size_t __size, _Tp __c=_Tp())"
.br
.ti -1c
.RI "\fBvalarray\fP< _Tp > \fBshift\fP (int) const "
.br
.ti -1c
.RI "size_t \fBsize\fP () const "
.br
.ti -1c
.RI "_Tp \fBsum\fP () const "
.br
.ti -1c
.RI "template<typename _Tp> \fBvalarray\fP (const _Tp *__restrict__ __p, size_t __n)"
.br
.ti -1c
.RI "template<class _Dom > \fBvalarray\fP (const _Expr< _Dom, _Tp > &__e)"
.br
.ti -1c
.RI "\fBvalarray\fP (\fBinitializer_list\fP< _Tp >)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBindirect_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBmask_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBgslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBslice_array\fP< _Tp > &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const \fBvalarray\fP &)"
.br
.ti -1c
.RI "\fBvalarray\fP (const _Tp *__restrict__, size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP (const _Tp &, size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP (size_t)"
.br
.ti -1c
.RI "\fBvalarray\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB_Array< _Tp >\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Tp> class std::valarray< _Tp >"
Smart \fBarray\fP designed to support numeric processing. 

A \fBvalarray\fP is an \fBarray\fP that provides constraints intended to allow for effective optimization of numeric \fBarray\fP processing by reducing the aliasing that can result from pointer representations. It represents a one-dimensional \fBarray\fP from which different multidimensional subsets can be accessed and modified.
.PP
\fBParameters:\fP
.RS 4
\fITp\fP Type of object in the \fBarray\fP. 
.RE
.PP

.PP
Definition at line 112 of file valarray.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class _Tp> \fBstd::valarray\fP< _Tp >::\fBvalarray\fP (const _Tp * __restrict__, size_t)"
.PP
Construct an \fBarray\fP initialized to the first \fIn\fP elements of \fIt\fP. 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
