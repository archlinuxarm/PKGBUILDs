.TH "Sequences" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Sequences \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::array< _Tp, _Nm >\fP"
.br
.RI "\fIA standard container for storing a fixed size sequence of elements. \fP"
.ti -1c
.RI "class \fBstd::basic_string< _CharT, _Traits, _Alloc >\fP"
.br
.RI "\fIManaging sequences of characters and character-like objects. \fP"
.ti -1c
.RI "class \fBstd::deque< _Tp, _Alloc >\fP"
.br
.RI "\fIA standard container using fixed-size memory allocation and constant-time manipulation of elements at either end. \fP"
.ti -1c
.RI "class \fBstd::forward_list< _Tp, _Alloc >\fP"
.br
.RI "\fIA standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence. \fP"
.ti -1c
.RI "class \fBstd::list< _Tp, _Alloc >\fP"
.br
.RI "\fIA standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence. \fP"
.ti -1c
.RI "class \fBstd::priority_queue< _Tp, _Sequence, _Compare >\fP"
.br
.RI "\fIA standard container automatically sorting its contents. \fP"
.ti -1c
.RI "class \fBstd::queue< _Tp, _Sequence >\fP"
.br
.RI "\fIA standard container giving FIFO behavior. \fP"
.ti -1c
.RI "class \fBstd::stack< _Tp, _Sequence >\fP"
.br
.RI "\fIA standard container giving FILO behavior. \fP"
.ti -1c
.RI "class \fBstd::vector< _Tp, _Alloc >\fP"
.br
.RI "\fIA standard container which offers fixed time access to individual elements in any order. \fP"
.ti -1c
.RI "class \fBstd::vector< bool, _Alloc >\fP"
.br
.RI "\fIA specialization of \fBvector\fP for booleans which offers fixed time access to individual elements in any order. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Sequences arrange a collection of objects into a strictly linear order.
.PP
The differences between sequences are usually due to one or both of the following:
.IP "\(bu" 2
memory management
.IP "\(bu" 2
algorithmic complexity
.PP
.PP
As an example of the first case, \fCvector\fP is required to use a contiguous memory layout, while other sequences such as \fCdeque\fP are not.
.PP
The prime reason for choosing one sequence over another should be based on the second category of differences, algorithmic complexity. For example, if you need to perform many inserts and removals from the middle of a sequence, \fClist\fP would be ideal. But if you need to perform constant-time access to random elements of the sequence, then \fClist\fP should not be used.
.PP
All sequences must meet certain requirements, summarized in \fCtables\fP. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
