.TH "cstdatomic" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cstdatomic \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::atomic< _Tp >\fP"
.br
.RI "\fI\fBatomic\fP 29.4.3, Generic \fBatomic\fP type, primary class template. \fP"
.ti -1c
.RI "struct \fBstd::atomic< _Tp * >\fP"
.br
.RI "\fIPartial specialization for pointer types. \fP"
.ti -1c
.RI "struct \fBstd::atomic< bool >\fP"
.br
.RI "\fIExplicit specialization for bool. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char >\fP"
.br
.RI "\fIExplicit specialization for char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char16_t >\fP"
.br
.RI "\fIExplicit specialization for char16_t. \fP"
.ti -1c
.RI "struct \fBstd::atomic< char32_t >\fP"
.br
.RI "\fIExplicit specialization for char32_t. \fP"
.ti -1c
.RI "struct \fBstd::atomic< int >\fP"
.br
.RI "\fIExplicit specialization for int. \fP"
.ti -1c
.RI "struct \fBstd::atomic< long >\fP"
.br
.RI "\fIExplicit specialization for long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< long long >\fP"
.br
.RI "\fIExplicit specialization for long long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< short >\fP"
.br
.RI "\fIExplicit specialization for short. \fP"
.ti -1c
.RI "struct \fBstd::atomic< signed char >\fP"
.br
.RI "\fIExplicit specialization for signed char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned char >\fP"
.br
.RI "\fIExplicit specialization for unsigned char. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned int >\fP"
.br
.RI "\fIExplicit specialization for unsigned int. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned long >\fP"
.br
.RI "\fIExplicit specialization for unsigned long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned long long >\fP"
.br
.RI "\fIExplicit specialization for unsigned long long. \fP"
.ti -1c
.RI "struct \fBstd::atomic< unsigned short >\fP"
.br
.RI "\fIExplicit specialization for unsigned short. \fP"
.ti -1c
.RI "struct \fBstd::atomic< void * >\fP"
.br
.RI "\fIExplicit specialization for void*. \fP"
.ti -1c
.RI "struct \fBstd::atomic< wchar_t >\fP"
.br
.RI "\fIExplicit specialization for wchar_t. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBstd\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_GLIBCXX_STDATOMIC\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "memory_order \fBstd::__calculate_memory_order\fP (memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_strong\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong\fP (volatile atomic_bool *__a, bool *__i1, bool __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong\fP (volatile atomic_address *__a, void **__v1, void *__v2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile atomic_bool *__a, bool *__i1, bool __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_strong_explicit\fP (volatile atomic_address *__a, void **__v1, void *__v2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_weak\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak\fP (volatile atomic_bool *__a, bool *__i1, bool __i2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak\fP (volatile atomic_address *__a, void **__v1, void *__v2)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp *__i1, _ITp __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile atomic_bool *__a, bool *__i1, bool __i2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "bool \fBstd::atomic_compare_exchange_weak_explicit\fP (volatile atomic_address *__a, void **__v1, void *__v2, memory_order __m1, memory_order __m2)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_exchange\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "bool \fBstd::atomic_exchange\fP (volatile atomic_bool *__a, bool __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_exchange\fP (volatile atomic_address *__a, void *__v)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_exchange_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_exchange_explicit\fP (volatile atomic_bool *__a, bool __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_exchange_explicit\fP (volatile atomic_address *__a, void *__v, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_add\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_add\fP (volatile atomic_address *__a, ptrdiff_t __d)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_add_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_add_explicit\fP (volatile atomic_address *__a, ptrdiff_t __d, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_and\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_and_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_or\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_or_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_sub\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_sub\fP (volatile atomic_address *__a, ptrdiff_t __d)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_sub_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_fetch_sub_explicit\fP (volatile atomic_address *__a, ptrdiff_t __d, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_xor\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_fetch_xor_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_flag_clear_explicit\fP (volatile atomic_flag *__a, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_flag_test_and_set_explicit\fP (volatile atomic_flag *__a, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > bool \fBstd::atomic_is_lock_free\fP (const volatile __atomic_base< _ITp > *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_is_lock_free\fP (const volatile atomic_bool *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_is_lock_free\fP (const volatile atomic_address *__a)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_load\fP (const volatile __atomic_base< _ITp > *__a)"
.br
.ti -1c
.RI "bool \fBstd::atomic_load\fP (const volatile atomic_bool *__a)"
.br
.ti -1c
.RI "void * \fBstd::atomic_load\fP (const volatile atomic_address *__a)"
.br
.ti -1c
.RI "template<typename _ITp > _ITp \fBstd::atomic_load_explicit\fP (const volatile __atomic_base< _ITp > *__a, memory_order __m)"
.br
.ti -1c
.RI "bool \fBstd::atomic_load_explicit\fP (const volatile atomic_bool *__a, memory_order __m)"
.br
.ti -1c
.RI "void * \fBstd::atomic_load_explicit\fP (const volatile atomic_address *__a, memory_order __m)"
.br
.ti -1c
.RI "template<typename _ITp > void \fBstd::atomic_store\fP (volatile __atomic_base< _ITp > *__a, _ITp __i)"
.br
.ti -1c
.RI "void \fBstd::atomic_store\fP (volatile atomic_bool *__a, bool __i)"
.br
.ti -1c
.RI "void \fBstd::atomic_store\fP (volatile atomic_address *__a, void *__v)"
.br
.ti -1c
.RI "template<typename _ITp > void \fBstd::atomic_store_explicit\fP (volatile __atomic_base< _ITp > *__a, _ITp __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_store_explicit\fP (volatile atomic_bool *__a, bool __i, memory_order __m)"
.br
.ti -1c
.RI "void \fBstd::atomic_store_explicit\fP (volatile atomic_address *__a, void *__v, memory_order __m)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::kill_dependency\fP (_Tp __y)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a Standard C++ Library file. You should \fCinclude\fP this file in your programs, rather than any of the '*.h' implementation files.
.PP
This is the C++ version of the Standard C Library header \fC\fBstdatomic.h\fP\fP, and its contents are (mostly) the same as that header, but are all contained in the namespace \fC\fBstd\fP\fP (except for names which are defined as macros in C). 
.PP
Definition in file \fBcstdatomic\fP.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
