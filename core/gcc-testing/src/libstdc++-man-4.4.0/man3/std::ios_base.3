.TH "std::ios_base" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::ios_base \- The base of the I/O class hierarchy.
.PP
This class defines everything that can be defined about I/O that does not depend on the type of characters being input or output. Most people will only see \fC\fBios_base\fP\fP when they need to specify the full name of the various I/O flags (e.g., the openmodes).  

.PP
.SH SYNOPSIS
.br
.PP
Inherited by \fBstd::basic_ios< _CharT, _Traits >\fP, \fBstd::basic_ios< char, _Traits >\fP, and \fBstd::basic_ios< _CharT, _Traits >\fP.
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBfailure\fP"
.br
.RI "\fIThese are thrown to indicate problems with io.
.PP
27.4.2.1.1 Class \fBios_base::failure\fP. \fP"
.in -1c
.SS "Public Types"
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBlocale\fP & \fB_M_getloc\fP () const "
.br
.ti -1c
.RI "\fBfmtflags\fP \fBflags\fP (\fBfmtflags\fP __fmtfl)"
.br
.ti -1c
.RI "\fBfmtflags\fP \fBflags\fP () const "
.br
.ti -1c
.RI "\fBlocale\fP \fBgetloc\fP () const "
.br
.ti -1c
.RI "\fBlocale\fP \fBimbue\fP (const \fBlocale\fP &__loc)"
.br
.ti -1c
.RI "long & \fBiword\fP (int __ix)"
.br
.ti -1c
.RI "\fBstreamsize\fP \fBprecision\fP (\fBstreamsize\fP __prec)"
.br
.ti -1c
.RI "\fBstreamsize\fP \fBprecision\fP () const "
.br
.ti -1c
.RI "void *& \fBpword\fP (int __ix)"
.br
.ti -1c
.RI "void \fBregister_callback\fP (\fBevent_callback\fP __fn, int __index)"
.br
.ti -1c
.RI "\fBfmtflags\fP \fBsetf\fP (\fBfmtflags\fP __fmtfl, \fBfmtflags\fP __mask)"
.br
.ti -1c
.RI "\fBfmtflags\fP \fBsetf\fP (\fBfmtflags\fP __fmtfl)"
.br
.ti -1c
.RI "void \fBunsetf\fP (\fBfmtflags\fP __mask)"
.br
.ti -1c
.RI "\fBstreamsize\fP \fBwidth\fP (\fBstreamsize\fP __wide)"
.br
.ti -1c
.RI "\fBstreamsize\fP \fBwidth\fP () const "
.br
.ti -1c
.RI "virtual \fB~ios_base\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBsync_with_stdio\fP (bool __sync=true)"
.br
.ti -1c
.RI "static int \fBxalloc\fP ()  throw ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const \fBfmtflags\fP \fBadjustfield\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBapp\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBate\fP"
.br
.ti -1c
.RI "static const \fBiostate\fP \fBbadbit\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBbasefield\fP"
.br
.ti -1c
.RI "static const \fBseekdir\fP \fBbeg\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBbinary\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBboolalpha\fP"
.br
.ti -1c
.RI "static const \fBseekdir\fP \fBcur\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBdec\fP"
.br
.ti -1c
.RI "static const \fBseekdir\fP \fBend\fP"
.br
.ti -1c
.RI "static const \fBiostate\fP \fBeofbit\fP"
.br
.ti -1c
.RI "static const \fBiostate\fP \fBfailbit\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBfixed\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBfloatfield\fP"
.br
.ti -1c
.RI "static const \fBiostate\fP \fBgoodbit\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBhex\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBin\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBinternal\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBleft\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBoct\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBout\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBright\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBscientific\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBshowbase\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBshowpoint\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBshowpos\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBskipws\fP"
.br
.ti -1c
.RI "static const \fBopenmode\fP \fBtrunc\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBunitbuf\fP"
.br
.ti -1c
.RI "static const \fBfmtflags\fP \fBuppercase\fP"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum { \fB_S_local_word_size\fP }"
.br
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_call_callbacks\fP (\fBevent\fP __ev)  throw ()"
.br
.ti -1c
.RI "void \fB_M_dispose_callbacks\fP (void)"
.br
.ti -1c
.RI "_Words & \fB_M_grow_words\fP (int __index, bool __iword)"
.br
.ti -1c
.RI "void \fB_M_init\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Callback_list * \fB_M_callbacks\fP"
.br
.ti -1c
.RI "\fBlocale\fP \fB_M_ios_locale\fP"
.br
.ti -1c
.RI "_Words \fB_M_local_word\fP [_S_local_word_size]"
.br
.ti -1c
.RI "_Words * \fB_M_word\fP"
.br
.ti -1c
.RI "int \fB_M_word_size\fP"
.br
.ti -1c
.RI "_Words \fB_M_word_zero\fP"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBiostate\fP \fB_M_exception\fP"
.br
.ti -1c
.RI "\fBfmtflags\fP \fB_M_flags\fP"
.br
.ti -1c
.RI "\fBstreamsize\fP \fB_M_precision\fP"
.br
.ti -1c
.RI "\fBiostate\fP \fB_M_streambuf_state\fP"
.br
.ti -1c
.RI "\fBstreamsize\fP \fB_M_width\fP"
.br
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
The base of the I/O class hierarchy.
.PP
This class defines everything that can be defined about I/O that does not depend on the type of characters being input or output. Most people will only see \fC\fBios_base\fP\fP when they need to specify the full name of the various I/O flags (e.g., the openmodes). 
.PP
Definition at line 207 of file ios_base.h.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef void(* \fBstd::ios_base::event_callback\fP)(\fBevent\fP, \fBios_base\fP &, int)"
.PP
The type of an event callback function. 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP One of the members of the event enum. 
.br
\fI\fBios_base\fP\fP Reference to the \fBios_base\fP object. 
.br
\fIint\fP The integer provided when the callback was registered.
.RE
.PP
Event callbacks are user defined functions that get called during several \fBios_base\fP and \fBbasic_ios\fP functions, specifically \fBimbue()\fP, copyfmt(), and ~ios(). 
.SS "typedef _Ios_Fmtflags \fBstd::ios_base::fmtflags\fP"
.PP
This is a bitmask type. 
.PP
\fC'_Ios_Fmtflags'\fP is implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type fmtflags are:
.IP "\(bu" 2
boolalpha
.IP "\(bu" 2
dec
.IP "\(bu" 2
fixed
.IP "\(bu" 2
hex
.IP "\(bu" 2
internal
.IP "\(bu" 2
left
.IP "\(bu" 2
oct
.IP "\(bu" 2
right
.IP "\(bu" 2
scientific
.IP "\(bu" 2
showbase
.IP "\(bu" 2
showpoint
.IP "\(bu" 2
showpos
.IP "\(bu" 2
skipws
.IP "\(bu" 2
unitbuf
.IP "\(bu" 2
uppercase
.IP "\(bu" 2
adjustfield
.IP "\(bu" 2
basefield
.IP "\(bu" 2
floatfield 
.PP

.PP
Definition at line 263 of file ios_base.h.
.SS "typedef _Ios_Iostate \fBstd::ios_base::iostate\fP"
.PP
This is a bitmask type. 
.PP
\fC'_Ios_Iostate'\fP is implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type iostate are:
.IP "\(bu" 2
badbit
.IP "\(bu" 2
eofbit
.IP "\(bu" 2
failbit
.IP "\(bu" 2
goodbit 
.PP

.PP
Definition at line 338 of file ios_base.h.
.SS "typedef _Ios_Openmode \fBstd::ios_base::openmode\fP"
.PP
This is a bitmask type. 
.PP
\fC'_Ios_Openmode'\fP is implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type openmode are:
.IP "\(bu" 2
app
.IP "\(bu" 2
ate
.IP "\(bu" 2
binary
.IP "\(bu" 2
in
.IP "\(bu" 2
out
.IP "\(bu" 2
trunc 
.PP

.PP
Definition at line 369 of file ios_base.h.
.SS "typedef _Ios_Seekdir \fBstd::ios_base::seekdir\fP"
.PP
This is an enumerated type. 
.PP
\fC'_Ios_Seekdir'\fP is implementation-defined. Defined values of type seekdir are:
.IP "\(bu" 2
beg
.IP "\(bu" 2
cur, equivalent to \fCSEEK_CUR\fP in the C standard library.
.IP "\(bu" 2
end, equivalent to \fCSEEK_END\fP in the C standard library. 
.PP

.PP
Definition at line 401 of file ios_base.h.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBstd::ios_base::event\fP"
.PP
The \fBset\fP of events that may be passed to an event callback. 
.PP
erase_event is used during ~ios() and copyfmt(). imbue_event is used during \fBimbue()\fP. copyfmt_event is used during copyfmt(). 
.PP
Definition at line 427 of file ios_base.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual std::ios_base::~ios_base ()\fC [virtual]\fP"
.PP
Invokes each callback with erase_event. Destroys local storage.
.PP
Note that the \fBios_base\fP object for the standard streams never gets destroyed. As a result, any callbacks registered with the standard streams will not get invoked with erase_event (unless copyfmt is used). 
.SH "Member Function Documentation"
.PP 
.SS "const \fBlocale\fP& std::ios_base::_M_getloc () const\fC [inline]\fP"
.PP
Locale access. 
.PP
\fBReturns:\fP
.RS 4
A reference to the current \fBlocale\fP.
.RE
.PP
Like getloc above, but returns a reference instead of generating a copy. 
.PP
Definition at line 710 of file ios_base.h.
.PP
Referenced by std::money_get< _CharT, _InIter >::do_get(), std::num_get< _CharT, _InIter >::do_get(), std::time_get< _CharT, _InIter >::do_get_date(), std::time_get< _CharT, _InIter >::do_get_monthname(), std::time_get< _CharT, _InIter >::do_get_time(), std::time_get< _CharT, _InIter >::do_get_weekday(), std::time_get< _CharT, _InIter >::do_get_year(), std::time_put< _CharT, _OutIter >::do_put(), std::num_put< _CharT, _OutIter >::do_put(), and std::time_put< _CharT, _OutIter >::put().
.SS "\fBfmtflags\fP std::ios_base::flags (\fBfmtflags\fP __fmtfl)\fC [inline]\fP"
.PP
Setting new format flags all at once. 
.PP
\fBParameters:\fP
.RS 4
\fIfmtfl\fP The new flags to \fBset\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous format control flags.
.RE
.PP
This function overwrites all the format flags with \fIfmtfl\fP. 
.PP
Definition at line 566 of file ios_base.h.
.SS "\fBfmtflags\fP std::ios_base::flags () const\fC [inline]\fP"
.PP
Access to format flags. 
.PP
\fBReturns:\fP
.RS 4
The format control flags for both input and output. 
.RE
.PP

.PP
Definition at line 555 of file ios_base.h.
.PP
Referenced by std::basic_ios< _CharT, _Traits >::copyfmt(), std::num_get< _CharT, _InIter >::do_get(), std::num_put< _CharT, _OutIter >::do_put(), std::basic_ostream< _CharT, _Traits >::operator<<(), and std::operator<<().
.SS "\fBlocale\fP std::ios_base::getloc () const\fC [inline]\fP"
.PP
Locale access. 
.PP
\fBReturns:\fP
.RS 4
A copy of the current \fBlocale\fP.
.RE
.PP
If \fCimbue(loc)\fP has previously been called, then this function returns \fCloc\fP. Otherwise, it returns a copy of \fCstd::locale()\fP, the global C++ \fBlocale\fP. 
.PP
Definition at line 699 of file ios_base.h.
.PP
Referenced by std::basic_ios< _CharT, _Traits >::copyfmt(), std::money_put< _CharT, _OutIter >::do_put(), std::basic_ios< _CharT, _Traits >::imbue(), std::operator>>(), and std::ws().
.SS "\fBlocale\fP std::ios_base::imbue (const \fBlocale\fP & __loc)"
.PP
Setting a new \fBlocale\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIloc\fP The new \fBlocale\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous \fBlocale\fP.
.RE
.PP
Sets the new \fBlocale\fP for this stream, and then invokes each callback with imbue_event. 
.PP
Reimplemented in \fBstd::basic_ios< _CharT, _Traits >\fP, \fBstd::basic_ios< _CharT, _Traits >\fP, and \fBstd::basic_ios< char, _Traits >\fP.
.SS "long& std::ios_base::iword (int __ix)\fC [inline]\fP"
.PP
Access to integer \fBarray\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__ix\fP Index into the \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to an integer associated with the index.
.RE
.PP
The iword function provides access to an \fBarray\fP of integers that can be used for any purpose. The \fBarray\fP grows as required to hold the supplied index. All integers in the \fBarray\fP are initialized to 0.
.PP
The implementation reserves several indices. You should use xalloc to obtain an index that is safe to use. Also note that since the \fBarray\fP can grow dynamically, it is not safe to hold onto the reference. 
.PP
Definition at line 745 of file ios_base.h.
.SS "\fBstreamsize\fP std::ios_base::precision (\fBstreamsize\fP __prec)\fC [inline]\fP"
.PP
Changing flags. 
.PP
\fBParameters:\fP
.RS 4
\fIprec\fP The new precision value. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous value of \fBprecision()\fP. 
.RE
.PP

.PP
Definition at line 634 of file ios_base.h.
.SS "\fBstreamsize\fP std::ios_base::precision () const\fC [inline]\fP"
.PP
Flags access. 
.PP
\fBReturns:\fP
.RS 4
The precision to generate on certain output operations.
.RE
.PP
Be careful if you try to give a definition of 'precision' here; see DR 189. 
.PP
Definition at line 625 of file ios_base.h.
.PP
Referenced by std::basic_ios< _CharT, _Traits >::copyfmt(), and std::operator<<().
.SS "void*& std::ios_base::pword (int __ix)\fC [inline]\fP"
.PP
Access to void pointer \fBarray\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__ix\fP Index into the \fBarray\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to a void* associated with the index.
.RE
.PP
The pword function provides access to an \fBarray\fP of pointers that can be used for any purpose. The \fBarray\fP grows as required to hold the supplied index. All pointers in the \fBarray\fP are initialized to 0.
.PP
The implementation reserves several indices. You should use xalloc to obtain an index that is safe to use. Also note that since the \fBarray\fP can grow dynamically, it is not safe to hold onto the reference. 
.PP
Definition at line 766 of file ios_base.h.
.SS "void std::ios_base::register_callback (\fBevent_callback\fP __fn, int __index)"
.PP
Add the callback __fn with parameter __index. 
.PP
\fBParameters:\fP
.RS 4
\fI__fn\fP The function to add. 
.br
\fI__index\fP The integer to pass to the function when invoked.
.RE
.PP
Registers a function as an event callback with an integer parameter to be passed to the function when invoked. Multiple copies of the function are allowed. If there are multiple callbacks, they are invoked in the order they were registered. 
.SS "\fBfmtflags\fP std::ios_base::setf (\fBfmtflags\fP __fmtfl, \fBfmtflags\fP __mask)\fC [inline]\fP"
.PP
Setting new format flags. 
.PP
\fBParameters:\fP
.RS 4
\fIfmtfl\fP Additional flags to \fBset\fP. 
.br
\fImask\fP The flags mask for \fIfmtfl\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous format control flags.
.RE
.PP
This function clears \fImask\fP in the format flags, then sets \fIfmtfl\fP \fC&\fP \fImask\fP. An example mask is \fC\fBios_base::adjustfield\fP\fP. 
.PP
Definition at line 599 of file ios_base.h.
.SS "\fBfmtflags\fP std::ios_base::setf (\fBfmtflags\fP __fmtfl)\fC [inline]\fP"
.PP
Setting new format flags. 
.PP
\fBParameters:\fP
.RS 4
\fIfmtfl\fP Additional flags to \fBset\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous format control flags.
.RE
.PP
This function sets additional flags in format control. Flags that were previously \fBset\fP remain \fBset\fP. 
.PP
Definition at line 582 of file ios_base.h.
.PP
Referenced by std::boolalpha(), std::dec(), std::fixed(), std::hex(), std::internal(), std::left(), std::oct(), std::right(), std::scientific(), std::showbase(), std::showpoint(), std::showpos(), std::skipws(), std::unitbuf(), and std::uppercase().
.SS "static bool std::ios_base::sync_with_stdio (bool __sync = \fCtrue\fP)\fC [static]\fP"
.PP
Interaction with the standard C I/O objects. 
.PP
\fBParameters:\fP
.RS 4
\fIsync\fP Whether to synchronize or not. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the standard streams were previously synchronized.
.RE
.PP
The synchronization referred to is \fIonly\fP that between the standard C facilities (e.g., stdout) and the standard C++ objects (e.g., cout). User-declared streams are unaffected. See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch28s02.html 
.SS "void std::ios_base::unsetf (\fBfmtflags\fP __mask)\fC [inline]\fP"
.PP
Clearing format flags. 
.PP
\fBParameters:\fP
.RS 4
\fImask\fP The flags to unset.
.RE
.PP
This function clears \fImask\fP in the format flags. 
.PP
Definition at line 614 of file ios_base.h.
.PP
Referenced by std::noboolalpha(), std::noshowbase(), std::noshowpoint(), std::noshowpos(), std::noskipws(), std::nounitbuf(), and std::nouppercase().
.SS "\fBstreamsize\fP std::ios_base::width (\fBstreamsize\fP __wide)\fC [inline]\fP"
.PP
Changing flags. 
.PP
\fBParameters:\fP
.RS 4
\fIwide\fP The new width value. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous value of \fBwidth()\fP. 
.RE
.PP

.PP
Definition at line 657 of file ios_base.h.
.SS "\fBstreamsize\fP std::ios_base::width () const\fC [inline]\fP"
.PP
Flags access. 
.PP
\fBReturns:\fP
.RS 4
The minimum field width to generate on output operations.
.RE
.PP
'Minimum field width' refers to the number of characters. 
.PP
Definition at line 648 of file ios_base.h.
.PP
Referenced by std::basic_ios< _CharT, _Traits >::copyfmt(), std::num_put< _CharT, _OutIter >::do_put(), and std::operator>>().
.SS "static int std::ios_base::xalloc ()  throw ()\fC [static]\fP"
.PP
Access to unique indices. 
.PP
\fBReturns:\fP
.RS 4
An integer different from all previous calls.
.RE
.PP
This function returns a unique integer every time it is called. It can be used for any purpose, but is primarily intended to be a unique index for the iword and pword functions. The expectation is that an application calls xalloc in order to obtain an index in the iword and pword arrays that can be used without fear of conflict.
.PP
The implementation maintains a static variable that is incremented and returned on each invocation. xalloc is guaranteed to return an index that is safe to use in the iword and pword arrays. 
.SH "Member Data Documentation"
.PP 
.SS "\fBiostate\fP \fBstd::ios_base::_M_exception\fP\fC [protected]\fP"
.PP
\fBios_base\fP data members (doc me) 
.PP
Definition at line 467 of file ios_base.h.
.SS "\fBfmtflags\fP \fBstd::ios_base::_M_flags\fP\fC [protected]\fP"
.PP
\fBios_base\fP data members (doc me) 
.PP
Definition at line 466 of file ios_base.h.
.SS "\fBstreamsize\fP \fBstd::ios_base::_M_precision\fP\fC [protected]\fP"
.PP
\fBios_base\fP data members (doc me) 
.PP
Definition at line 464 of file ios_base.h.
.SS "\fBiostate\fP \fBstd::ios_base::_M_streambuf_state\fP\fC [protected]\fP"
.PP
\fBios_base\fP data members (doc me) 
.PP
Definition at line 468 of file ios_base.h.
.SS "\fBstreamsize\fP \fBstd::ios_base::_M_width\fP\fC [protected]\fP"
.PP
\fBios_base\fP data members (doc me) 
.PP
Definition at line 465 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::adjustfield\fP\fC [static]\fP"
.PP
A mask of left|right|internal. Useful for the 2-arg form of \fCsetf\fP. 
.PP
Definition at line 318 of file ios_base.h.
.PP
Referenced by std::num_put< _CharT, _OutIter >::do_put().
.SS "const \fBopenmode\fP \fBstd::ios_base::app\fP\fC [static]\fP"
.PP
Seek to end before each write. 
.PP
Definition at line 372 of file ios_base.h.
.SS "const \fBopenmode\fP \fBstd::ios_base::ate\fP\fC [static]\fP"
.PP
Open and seek to end immediately after opening. 
.PP
Definition at line 375 of file ios_base.h.
.SS "const \fBiostate\fP \fBstd::ios_base::badbit\fP\fC [static]\fP"
.PP
Indicates a loss of integrity in an input or output sequence (such as an irrecoverable read error from a file). 
.PP
Definition at line 342 of file ios_base.h.
.PP
Referenced by std::basic_istream< _CharT, _Traits >::get(), std::basic_istream< _CharT, _Traits >::ignore(), std::operator<<(), std::basic_ostream< _CharT, _Traits >::operator<<(), std::basic_istream< _CharT, _Traits >::putback(), std::basic_istream< _CharT, _Traits >::read(), std::basic_istream< _CharT, _Traits >::seekg(), std::basic_ostream< _CharT, _Traits >::seekp(), std::basic_istream< _CharT, _Traits >::sync(), std::basic_ostream< _CharT, _Traits >::tellp(), and std::basic_ostream< _CharT, _Traits >::write().
.SS "const \fBfmtflags\fP \fBstd::ios_base::basefield\fP\fC [static]\fP"
.PP
A mask of dec|oct|hex. Useful for the 2-arg form of \fCsetf\fP. 
.PP
Definition at line 321 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), and std::basic_ostream< _CharT, _Traits >::operator<<().
.SS "const \fBseekdir\fP \fBstd::ios_base::beg\fP\fC [static]\fP"
.PP
Request a seek relative to the beginning of the stream. 
.PP
Definition at line 404 of file ios_base.h.
.PP
Referenced by std::basic_filebuf< _CharT, _Traits >::seekpos().
.SS "const \fBopenmode\fP \fBstd::ios_base::binary\fP\fC [static]\fP"
.PP
Perform input and output in binary mode (as opposed to text mode). This is probably not what you think it is; see http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch27s02.html. 
.PP
Definition at line 380 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::boolalpha\fP\fC [static]\fP"
.PP
Insert/extract \fCbool\fP in alphabetic rather than numeric format. 
.PP
Definition at line 266 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), and std::num_put< _CharT, _OutIter >::do_put().
.SS "const \fBseekdir\fP \fBstd::ios_base::cur\fP\fC [static]\fP"
.PP
Request a seek relative to the current position within the sequence. 
.PP
Definition at line 407 of file ios_base.h.
.PP
Referenced by std::basic_filebuf< _CharT, _Traits >::imbue(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekoff(), and std::basic_ostream< _CharT, _Traits >::tellp().
.SS "const \fBfmtflags\fP \fBstd::ios_base::dec\fP\fC [static]\fP"
.PP
Converts integer input or generates integer output in decimal base. 
.PP
Definition at line 269 of file ios_base.h.
.SS "const \fBseekdir\fP \fBstd::ios_base::end\fP\fC [static]\fP"
.PP
Request a seek relative to the current end of the sequence. 
.PP
Definition at line 410 of file ios_base.h.
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekoff().
.SS "const \fBiostate\fP \fBstd::ios_base::eofbit\fP\fC [static]\fP"
.PP
Indicates that an input operation reached the end of an input sequence. 
.PP
Definition at line 345 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), std::time_get< _CharT, _InIter >::do_get_date(), std::time_get< _CharT, _InIter >::do_get_monthname(), std::basic_istream< _CharT, _Traits >::get(), std::basic_istream< _CharT, _Traits >::ignore(), std::basic_istream< _CharT, _Traits >::operator>>(), and std::basic_istream< _CharT, _Traits >::read().
.SS "const \fBiostate\fP \fBstd::ios_base::failbit\fP\fC [static]\fP"
.PP
Indicates that an input operation failed to read the expected characters, or that an output operation failed to generate the desired characters. 
.PP
Definition at line 350 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), std::time_get< _CharT, _InIter >::do_get_monthname(), std::basic_istream< _CharT, _Traits >::get(), std::basic_ostream< _CharT, _Traits >::operator<<(), std::basic_istream< _CharT, _Traits >::operator>>(), std::operator>>(), std::basic_istream< _CharT, _Traits >::read(), std::basic_istream< _CharT, _Traits >::seekg(), and std::basic_ostream< _CharT, _Traits >::seekp().
.SS "const \fBfmtflags\fP \fBstd::ios_base::fixed\fP\fC [static]\fP"
.PP
Generate floating-point output in fixed-point notation. 
.PP
Definition at line 272 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::floatfield\fP\fC [static]\fP"
.PP
A mask of scientific|fixed. Useful for the 2-arg form of \fCsetf\fP. 
.PP
Definition at line 324 of file ios_base.h.
.SS "const \fBiostate\fP \fBstd::ios_base::goodbit\fP\fC [static]\fP"
.PP
Indicates all is well. 
.PP
Definition at line 353 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), std::time_get< _CharT, _InIter >::do_get_monthname(), std::basic_istream< _CharT, _Traits >::get(), std::basic_istream< _CharT, _Traits >::ignore(), std::basic_ostream< _CharT, _Traits >::operator<<(), std::basic_istream< _CharT, _Traits >::operator>>(), std::basic_istream< _CharT, _Traits >::putback(), std::basic_istream< _CharT, _Traits >::read(), std::basic_istream< _CharT, _Traits >::seekg(), std::basic_ostream< _CharT, _Traits >::seekp(), and std::basic_istream< _CharT, _Traits >::sync().
.SS "const \fBfmtflags\fP \fBstd::ios_base::hex\fP\fC [static]\fP"
.PP
Converts integer input or generates integer output in hexadecimal base. 
.PP
Definition at line 275 of file ios_base.h.
.PP
Referenced by std::num_get< _CharT, _InIter >::do_get(), std::num_put< _CharT, _OutIter >::do_put(), and std::basic_ostream< _CharT, _Traits >::operator<<().
.SS "const \fBopenmode\fP \fBstd::ios_base::in\fP\fC [static]\fP"
.PP
Open for input. Default for \fCifstream\fP and fstream. 
.PP
Definition at line 383 of file ios_base.h.
.PP
Referenced by std::basic_istream< _CharT, _Traits >::seekg(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekoff(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekpos(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::underflow(), std::basic_filebuf< _CharT, _Traits >::underflow(), and std::basic_filebuf< _CharT, _Traits >::xsgetn().
.SS "const \fBfmtflags\fP \fBstd::ios_base::internal\fP\fC [static]\fP"
.PP
Adds fill characters at a designated internal point in certain generated output, or identical to \fCright\fP if no such point is designated. 
.PP
Definition at line 280 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::left\fP\fC [static]\fP"
.PP
Adds fill characters on the right (final positions) of certain generated output. (I.e., the thing you print is flush left.). 
.PP
Definition at line 284 of file ios_base.h.
.PP
Referenced by std::num_put< _CharT, _OutIter >::do_put().
.SS "const \fBfmtflags\fP \fBstd::ios_base::oct\fP\fC [static]\fP"
.PP
Converts integer input or generates integer output in octal base. 
.PP
Definition at line 287 of file ios_base.h.
.PP
Referenced by std::basic_ostream< _CharT, _Traits >::operator<<().
.SS "const \fBopenmode\fP \fBstd::ios_base::out\fP\fC [static]\fP"
.PP
Open for output. Default for \fCofstream\fP and fstream. 
.PP
Definition at line 386 of file ios_base.h.
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), std::basic_filebuf< _CharT, _Traits >::overflow(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekoff(), std::basic_ostream< _CharT, _Traits >::seekp(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::seekpos(), and std::basic_ostream< _CharT, _Traits >::tellp().
.SS "const \fBfmtflags\fP \fBstd::ios_base::right\fP\fC [static]\fP"
.PP
Adds fill characters on the left (initial positions) of certain generated output. (I.e., the thing you print is flush right.). 
.PP
Definition at line 291 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::scientific\fP\fC [static]\fP"
.PP
Generates floating-point output in scientific notation. 
.PP
Definition at line 294 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::showbase\fP\fC [static]\fP"
.PP
Generates a prefix indicating the numeric base of generated integer output. 
.PP
Definition at line 298 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::showpoint\fP\fC [static]\fP"
.PP
Generates a decimal-point character unconditionally in generated floating-point output. 
.PP
Definition at line 302 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::showpos\fP\fC [static]\fP"
.PP
Generates a + sign in non-negative generated numeric output. 
.PP
Definition at line 305 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::skipws\fP\fC [static]\fP"
.PP
Skips leading white space before certain input operations. 
.PP
Definition at line 308 of file ios_base.h.
.SS "const \fBopenmode\fP \fBstd::ios_base::trunc\fP\fC [static]\fP"
.PP
Open for input. Default for \fCofstream\fP. 
.PP
Definition at line 389 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::unitbuf\fP\fC [static]\fP"
.PP
Flushes output after each output operation. 
.PP
Definition at line 311 of file ios_base.h.
.SS "const \fBfmtflags\fP \fBstd::ios_base::uppercase\fP\fC [static]\fP"
.PP
Replaces certain lowercase letters with their uppercase equivalents in generated output. 
.PP
Definition at line 315 of file ios_base.h.
.PP
Referenced by std::num_put< _CharT, _OutIter >::do_put().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
