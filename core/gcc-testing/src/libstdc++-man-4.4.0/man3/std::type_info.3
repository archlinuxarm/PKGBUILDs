.TH "std::type_info" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::type_info \- Part of RTTI.  

.PP
.SH SYNOPSIS
.br
.PP
Inherited by __cxxabiv1::__array_type_info, __cxxabiv1::__class_type_info, __cxxabiv1::__enum_type_info, __cxxabiv1::__function_type_info, __cxxabiv1::__fundamental_type_info, and __cxxabiv1::__pbase_type_info.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fB__do_catch\fP (const \fBtype_info\fP *__thr_type, void **__thr_obj, unsigned __outer) const "
.br
.ti -1c
.RI "virtual bool \fB__do_upcast\fP (const __cxxabiv1::__class_type_info *__target, void **__obj_ptr) const "
.br
.ti -1c
.RI "virtual bool \fB__is_function_p\fP () const "
.br
.ti -1c
.RI "virtual bool \fB__is_pointer_p\fP () const "
.br
.ti -1c
.RI "bool \fBbefore\fP (const \fBtype_info\fP &__arg) const "
.br
.ti -1c
.RI "const char * \fBname\fP () const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBtype_info\fP &__arg) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBtype_info\fP &__arg) const "
.br
.ti -1c
.RI "virtual \fB~type_info\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBtype_info\fP (const char *__n)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const char * \fB__name\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Part of RTTI. 

The \fC\fBtype_info\fP\fP class describes type information generated by an implementation. 
.PP
Definition at line 88 of file typeinfo.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual std::type_info::~type_info ()\fC [virtual]\fP"
.PP
Destructor first. Being the first non-inline virtual function, this controls in which translation unit the vtable is emitted. The compiler makes use of that information to know where to emit the runtime-mandated \fBtype_info\fP structures in the new-abi. 
.SH "Member Function Documentation"
.PP 
.SS "const char* std::type_info::name () const\fC [inline]\fP"
.PP
Returns an \fIimplementation-defined\fP byte string; this is not portable between compilers! 
.PP
Definition at line 99 of file typeinfo.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
