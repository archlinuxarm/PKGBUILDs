.TH "complex" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
complex \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::complex< _Tp >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fB__gnu_cxx\fP"
.br
.ti -1c
.RI "namespace \fBstd\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_GLIBCXX_COMPLEX\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::__complex_abs\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::__complex_arg\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_cos\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_cosh\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_exp\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_log\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_pow\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > \fBstd::complex\fP< _Tp > \fBstd::__complex_proj\fP (const \fBstd::complex\fP< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_sin\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_sinh\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_sqrt\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_tan\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::__complex_tanh\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::abs\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::arg\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::conj\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::cos\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::cosh\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::exp\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::imag\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::log\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::log10\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::norm\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator+\fP (const complex< _Tp > &__x)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator-\fP (const complex< _Tp > &__x)"
.br
.ti -1c
.RI "template<typename _Tp , typename _CharT , class _Traits > basic_ostream< _CharT, _Traits > & \fBstd::operator<<\fP (basic_ostream< _CharT, _Traits > &__os, const complex< _Tp > &__x)"
.br
.ti -1c
.RI "template<typename _Tp , typename _CharT , class _Traits > basic_istream< _CharT, _Traits > & \fBstd::operator>>\fP (basic_istream< _CharT, _Traits > &__is, complex< _Tp > &__x)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::polar\fP (const _Tp &, const _Tp &=0)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::pow\fP (const _Tp &, const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::pow\fP (const complex< _Tp > &, const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::pow\fP (const complex< _Tp > &, const _Tp &)"
.br
.ti -1c
.RI "template<typename _Tp > \fBstd::complex\fP< typename __gnu_cxx::__promote< _Tp >::__type > \fBstd::proj\fP (_Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > \fBstd::complex\fP< _Tp > \fBstd::proj\fP (const \fBstd::complex\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::real\fP (const complex< _Tp > &__z)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::sin\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::sinh\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::sqrt\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::tan\fP (const complex< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::tanh\fP (const complex< _Tp > &)"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator!=\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator!=\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator!=\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator*\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator*\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator*\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator+\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator+\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator+\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator-\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator-\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator-\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator/\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator/\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > complex< _Tp > \fBstd::operator/\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator==\fP (const _Tp &__x, const complex< _Tp > &__y)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator==\fP (const complex< _Tp > &__x, const _Tp &__y)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBstd::operator==\fP (const complex< _Tp > &__x, const complex< _Tp > &__y)"
.br
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
This is a Standard C++ Library header. 
.PP
Definition in file \fBcomplex\fP.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
