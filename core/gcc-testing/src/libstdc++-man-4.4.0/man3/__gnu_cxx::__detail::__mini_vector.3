.TH "__gnu_cxx::__detail::__mini_vector" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__detail::__mini_vector \- __mini_vector<> is a stripped down version of the full-fledged std::vector<>.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef const _Tp & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef pointer \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Tp * \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Tp & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "reference \fBback\fP () const   throw ()"
.br
.ti -1c
.RI "iterator \fBbegin\fP () const   throw ()"
.br
.ti -1c
.RI "void \fBclear\fP ()  throw ()"
.br
.ti -1c
.RI "iterator \fBend\fP () const   throw ()"
.br
.ti -1c
.RI "void \fBerase\fP (iterator __pos)  throw ()"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __pos, const_reference __x)"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (const size_type __pos) const   throw ()"
.br
.ti -1c
.RI "void \fBpop_back\fP ()  throw ()"
.br
.ti -1c
.RI "void \fBpush_back\fP (const_reference __x)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const   throw ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp> class __gnu_cxx::__detail::__mini_vector< _Tp >"
__mini_vector<> is a stripped down version of the full-fledged std::vector<>. 

It is to be used only for built-in types or PODs. Notable differences are:
.PP
1. Not all accessor functions are present. 2. Used ONLY for PODs. 3. No Allocator template argument. Uses \fBoperator new()\fP to get memory, and \fBoperator delete()\fP to free it. Caveat: The dtor does NOT free the memory allocated, so this a memory-leaking vector! 
.PP
Definition at line 71 of file bitmap_allocator.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
