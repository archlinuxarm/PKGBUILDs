.TH "std::indirect_array" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::indirect_array \- Reference to arbitrary subset of an \fBarray\fP.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBindirect_array\fP (const \fBindirect_array\fP &)"
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator%=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator%=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator&=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator&=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator*=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator*=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator+=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator-=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator-=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator/=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator/=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator<<=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator<<=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator=\fP (const _Tp &) const "
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "\fBindirect_array\fP & \fBoperator=\fP (const \fBindirect_array\fP &)"
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator>>=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator>>=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator^=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator^=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.ti -1c
.RI "template<class _Dom > void \fBoperator|=\fP (const _Expr< _Dom, _Tp > &) const "
.br
.ti -1c
.RI "void \fBoperator|=\fP (const \fBvalarray\fP< _Tp > &) const "
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBgslice_array< _Tp >\fP"
.br
.ti -1c
.RI "class \fBvalarray< _Tp >\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Tp> class std::indirect_array< _Tp >"
Reference to arbitrary subset of an \fBarray\fP. 

An \fBindirect_array\fP is a reference to the actual elements of an \fBarray\fP specified by an ordered \fBarray\fP of indices. The way to get an \fBindirect_array\fP is to call operator[](valarray<size_t>) on a \fBvalarray\fP. The returned \fBindirect_array\fP then permits carrying operations out on the referenced subset of elements in the original \fBvalarray\fP.
.PP
For example, if an \fBindirect_array\fP is obtained using the \fBarray\fP (4,2,0) as an argument, and then assigned to an \fBarray\fP containing (1,2,3), then the underlying \fBarray\fP will have \fBarray\fP[0]==3, \fBarray\fP[2]==2, and \fBarray\fP[4]==1.
.PP
\fBParameters:\fP
.RS 4
\fITp\fP Element type. 
.RE
.PP

.PP
Definition at line 61 of file indirect_array.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
