.TH "cmath" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cmath \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBstd\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_GLIBCXX_CMATH\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::__cmath_power\fP (_Tp, unsigned int)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fBstd::__pow_helper\fP (_Tp __x, int __n)"
.br
.ti -1c
.RI "long double \fBstd::abs\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::abs\fP (float __x)"
.br
.ti -1c
.RI "double \fBstd::abs\fP (double __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::acos\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::acos\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::acos\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::asin\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::asin\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::asin\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::atan\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::atan\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::atan\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Up > __gnu_cxx::__promote_2< typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp >::__value &&__is_arithmetic< _Up >::__value, _Tp >::__type, _Up >::__type \fBstd::atan2\fP (_Tp __y, _Up __x)"
.br
.ti -1c
.RI "long double \fBstd::atan2\fP (long double __y, long double __x)"
.br
.ti -1c
.RI "float \fBstd::atan2\fP (float __y, float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::ceil\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::ceil\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::ceil\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::cos\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::cos\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::cos\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::cosh\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::cosh\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::cosh\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::exp\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::exp\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::exp\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::fabs\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::fabs\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::fabs\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::floor\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::floor\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::floor\fP (float __x)"
.br
.ti -1c
.RI "long double \fBstd::fmod\fP (long double __x, long double __y)"
.br
.ti -1c
.RI "float \fBstd::fmod\fP (float __x, float __y)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::frexp\fP (_Tp __x, int *__exp)"
.br
.ti -1c
.RI "long double \fBstd::frexp\fP (long double __x, int *__exp)"
.br
.ti -1c
.RI "float \fBstd::frexp\fP (float __x, int *__exp)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::ldexp\fP (_Tp __x, int __exp)"
.br
.ti -1c
.RI "long double \fBstd::ldexp\fP (long double __x, int __exp)"
.br
.ti -1c
.RI "float \fBstd::ldexp\fP (float __x, int __exp)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::log\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::log\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::log\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::log10\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::log10\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::log10\fP (float __x)"
.br
.ti -1c
.RI "long double \fBstd::modf\fP (long double __x, long double *__iptr)"
.br
.ti -1c
.RI "float \fBstd::modf\fP (float __x, float *__iptr)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Up > __gnu_cxx::__promote_2< typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp >::__value &&__is_arithmetic< _Up >::__value, _Tp >::__type, _Up >::__type \fBstd::pow\fP (_Tp __x, _Up __y)"
.br
.ti -1c
.RI "long double \fBstd::pow\fP (long double __x, long double __y)"
.br
.ti -1c
.RI "float \fBstd::pow\fP (float __x, float __y)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::sin\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::sin\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::sin\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::sinh\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::sinh\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::sinh\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::sqrt\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::sqrt\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::sqrt\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::tan\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::tan\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::tan\fP (float __x)"
.br
.ti -1c
.RI "template<typename _Tp > __gnu_cxx::__enable_if< __is_integer< _Tp >::__value, double >::__type \fBstd::tanh\fP (_Tp __x)"
.br
.ti -1c
.RI "long double \fBstd::tanh\fP (long double __x)"
.br
.ti -1c
.RI "float \fBstd::tanh\fP (float __x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a Standard C++ Library file. You should \fCinclude\fP this file in your programs, rather than any of the '*.h' implementation files.
.PP
This is the C++ version of the Standard C Library header \fC\fBmath.h\fP\fP, and its contents are (mostly) the same as that header, but are all contained in the namespace \fC\fBstd\fP\fP (except for names which are defined as macros in C). 
.PP
Definition in file \fBcmath\fP.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
