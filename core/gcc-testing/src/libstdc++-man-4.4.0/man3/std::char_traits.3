.TH "std::char_traits" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::char_traits \- Basis for explicit traits specializations.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits \fBchar_traits< _CharT >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _CharT \fBchar_type\fP"
.br
.ti -1c
.RI "typedef _Char_types< _CharT >::int_type \fBint_type\fP"
.br
.ti -1c
.RI "typedef _Char_types< _CharT >::off_type \fBoff_type\fP"
.br
.ti -1c
.RI "typedef _Char_types< _CharT >::\fBpos_type\fP \fBpos_type\fP"
.br
.ti -1c
.RI "typedef _Char_types< _CharT >::state_type \fBstate_type\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static char_type * \fBassign\fP (char_type *__s, std::size_t __n, char_type __a)"
.br
.ti -1c
.RI "static void \fBassign\fP (char_type &__c1, const char_type &__c2)"
.br
.ti -1c
.RI "static int \fBcompare\fP (const char_type *__s1, const char_type *__s2, std::size_t __n)"
.br
.ti -1c
.RI "static char_type * \fBcopy\fP (char_type *__s1, const char_type *__s2, std::size_t __n)"
.br
.ti -1c
.RI "static int_type \fBeof\fP ()"
.br
.ti -1c
.RI "static bool \fBeq\fP (const char_type &__c1, const char_type &__c2)"
.br
.ti -1c
.RI "static bool \fBeq_int_type\fP (const int_type &__c1, const int_type &__c2)"
.br
.ti -1c
.RI "static const char_type * \fBfind\fP (const char_type *__s, std::size_t __n, const char_type &__a)"
.br
.ti -1c
.RI "static std::size_t \fBlength\fP (const char_type *__s)"
.br
.ti -1c
.RI "static bool \fBlt\fP (const char_type &__c1, const char_type &__c2)"
.br
.ti -1c
.RI "static char_type * \fBmove\fP (char_type *__s1, const char_type *__s2, std::size_t __n)"
.br
.ti -1c
.RI "static int_type \fBnot_eof\fP (const int_type &__c)"
.br
.ti -1c
.RI "static char_type \fBto_char_type\fP (const int_type &__c)"
.br
.ti -1c
.RI "static int_type \fBto_int_type\fP (const char_type &__c)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _CharT> struct std::char_traits< _CharT >"
Basis for explicit traits specializations. 

\fBNote:\fP
.RS 4
For any given actual character type, this definition is probably wrong. Since this is just a thin wrapper around \fB__gnu_cxx::char_traits\fP, it is possible to achieve a more appropriate definition by specializing \fB__gnu_cxx::char_traits\fP.
.RE
.PP
See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html for advice on how to make use of this class for 'unusual' character types. Also, check out \fBinclude/ext/pod_char_traits.h\fP. 
.PP
Definition at line 231 of file char_traits.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
