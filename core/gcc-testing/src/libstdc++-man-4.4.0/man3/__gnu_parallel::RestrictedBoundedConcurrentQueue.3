.TH "__gnu_parallel::RestrictedBoundedConcurrentQueue" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_parallel::RestrictedBoundedConcurrentQueue \- Double-ended queue of bounded size, allowing lock-free atomic access. \fBpush_front()\fP and \fBpop_front()\fP must not be called concurrently to each other, while \fBpop_back()\fP can be called concurrently at all times. \fCempty()\fP, \fCsize()\fP, and \fCtop()\fP are intentionally not provided. Calling them would not make sense in a concurrent setting.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBpop_back\fP (T &t)"
.br
.ti -1c
.RI "bool \fBpop_front\fP (T &t)"
.br
.ti -1c
.RI "void \fBpush_front\fP (const T &t)"
.br
.ti -1c
.RI "\fBRestrictedBoundedConcurrentQueue\fP (\fBsequence_index_t\fP max_size)"
.br
.ti -1c
.RI "\fB~RestrictedBoundedConcurrentQueue\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T> class __gnu_parallel::RestrictedBoundedConcurrentQueue< T >"
Double-ended queue of bounded size, allowing lock-free atomic access. \fBpush_front()\fP and \fBpop_front()\fP must not be called concurrently to each other, while \fBpop_back()\fP can be called concurrently at all times. \fCempty()\fP, \fCsize()\fP, and \fCtop()\fP are intentionally not provided. Calling them would not make sense in a concurrent setting. 

\fBParameters:\fP
.RS 4
\fIT\fP Contained element type. 
.RE
.PP

.PP
Definition at line 52 of file queue.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T> \fB__gnu_parallel::RestrictedBoundedConcurrentQueue\fP< T >::\fBRestrictedBoundedConcurrentQueue\fP (\fBsequence_index_t\fP max_size)\fC [inline]\fP"
.PP
Constructor. Not to be called concurrent, of course. 
.PP
\fBParameters:\fP
.RS 4
\fImax_size\fP Maximal number of elements to be contained. 
.RE
.PP

.PP
Definition at line 68 of file queue.h.
.SS "template<typename T> \fB__gnu_parallel::RestrictedBoundedConcurrentQueue\fP< T >::~\fBRestrictedBoundedConcurrentQueue\fP ()\fC [inline]\fP"
.PP
Destructor. Not to be called concurrent, of course. 
.PP
Definition at line 77 of file queue.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T> bool \fB__gnu_parallel::RestrictedBoundedConcurrentQueue\fP< T >::pop_back (T & t)\fC [inline]\fP"
.PP
Pops one element from the queue at the front end. Must not be called concurrently with \fBpop_front()\fP. 
.PP
Definition at line 124 of file queue.h.
.SS "template<typename T> bool \fB__gnu_parallel::RestrictedBoundedConcurrentQueue\fP< T >::pop_front (T & t)\fC [inline]\fP"
.PP
Pops one element from the queue at the front end. Must not be called concurrently with \fBpop_front()\fP. 
.PP
Definition at line 100 of file queue.h.
.PP
Referenced by __gnu_parallel::qsb_local_sort_with_helping().
.SS "template<typename T> void \fB__gnu_parallel::RestrictedBoundedConcurrentQueue\fP< T >::push_front (const T & t)\fC [inline]\fP"
.PP
Pushes one element into the queue at the front end. Must not be called concurrently with \fBpop_front()\fP. 
.PP
Definition at line 83 of file queue.h.
.PP
Referenced by __gnu_parallel::qsb_local_sort_with_helping().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
