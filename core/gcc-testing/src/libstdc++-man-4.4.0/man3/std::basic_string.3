.TH "std::basic_string" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::basic_string \- Managing sequences of characters and character-like objects.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< const_pointer, \fBbasic_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< pointer, \fBbasic_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename _InIterator > _CharT * \fB_S_construct\fP (_InIterator __beg, _InIterator __end, const _Alloc &__a, \fBforward_iterator_tag\fP)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "const_reference \fBat\fP (size_type __n) const "
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (\fBinitializer_list\fP< _CharT > __l, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, size_type __n, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n, const _Alloc &__a)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _Alloc &__a)"
.br
.ti -1c
.RI "\fBbasic_string\fP ()"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const "
.br
.ti -1c
.RI "size_type \fBcapacity\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const "
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const "
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "const_iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBerase\fP (size_type __pos=0, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __p, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, \fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBinsert\fP (iterator __p, _InputIterator __beg, _InputIterator __end)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBlength\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (\fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const "
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP ()"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, \fBinitializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, iterator __k1, iterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__k1, const _CharT *__k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "void \fBreserve\fP (size_type __res_arg=0)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "\fBbasic_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fBnpos\fP) const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_string\fP &__s)"
.br
.ti -1c
.RI "\fB~basic_string\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_type \fBnpos\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, typename _Traits, typename _Alloc> class std::basic_string< _CharT, _Traits, _Alloc >"
Managing sequences of characters and character-like objects. 

Meets the requirements of a \fCcontainer\fP, a \fCreversible container\fP, and a \fCsequence\fP. Of the \fCoptional sequence requirements\fP, only \fCpush_back\fP, \fCat\fP, and \fBarray\fP access are supported.
.PP
\fBTodo\fP
.RS 4
Doc me! See doc/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.
.RE
.PP
Documentation? What's that? Nathan Myers <ncm@cantrip.org>.
.PP
A string looks like this:
.PP
.PP
.nf
                                        [_Rep]
                                        _M_length
   [basic_string<char_type>]            _M_capacity
   _M_dataplus                          _M_refcount
   _M_p ---------------->               unnamed array of char_type
.fi
.PP
.PP
Where the _M_p points to the first character in the string, and you cast it to a pointer-to-_Rep and subtract 1 to get a pointer to the header.
.PP
This approach has the enormous advantage that a string object requires only one allocation. All the ugliness is confined within a single \fBpair\fP of inline functions, which each compile to a single 'add' instruction: _Rep::_M_data(), and string::_M_rep(); and the allocation function which gets a block of raw bytes and with room enough and constructs a _Rep object at the front.
.PP
The reason you want _M_data pointing to the character \fBarray\fP and not the _Rep is so that the debugger can see the string contents. (Probably we should add a non-inline member to get the _Rep for the debugger to use, so users can check the actual string length.)
.PP
Note that the _Rep object is a POD so that you can have a static 'empty string' _Rep object already 'constructed' before static constructors have run. The reference-count encoding is chosen so that a 0 indicates one reference, so you never try to destroy the empty-string _Rep object.
.PP
All but the last paragraph is considered pretty conventional for a C++ string implementation. 
.PP
Definition at line 104 of file basic_string.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP ()\fC [inline]\fP"
.PP
Default constructor creates an empty string. 
.PP
Definition at line 2148 of file basic_string.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _Alloc & __a)\fC [inline, explicit]\fP"
.PP
Construct an empty string using \fBallocator\fP \fIa\fP. 
.PP
Definition at line 179 of file basic_string.tcc.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Construct string with copy of value of \fIstr\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Source string. 
.RE
.PP

.PP
Definition at line 171 of file basic_string.tcc.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"
.PP
Construct string as copy of a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Source string. 
.br
\fIpos\fP Index of first character to copy from. 
.br
\fIn\fP Number of characters to copy (default remainder). 
.RE
.PP

.PP
Definition at line 185 of file basic_string.tcc.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos, size_type __n, const _Alloc & __a)\fC [inline]\fP"
.PP
Construct string as copy of a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Source string. 
.br
\fIpos\fP Index of first character to copy from. 
.br
\fIn\fP Number of characters to copy. 
.br
\fIa\fP Allocator to use. 
.RE
.PP

.PP
Definition at line 195 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _CharT * __s, size_type __n, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string initialized by a character \fBarray\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Source character \fBarray\fP. 
.br
\fIn\fP Number of characters to copy. 
.br
\fIa\fP Allocator to use (default is default \fBallocator\fP).
.RE
.PP
NB: \fIs\fP must have at least \fIn\fP characters, '\\0' has no special meaning. 
.PP
Definition at line 207 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (const _CharT * __s, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as copy of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Source C string. 
.br
\fIa\fP Allocator to use (default is default \fBallocator\fP). 
.RE
.PP

.PP
Definition at line 214 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (size_type __n, _CharT __c, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Number of characters. 
.br
\fIc\fP Character to use. 
.br
\fIa\fP Allocator to use (default is default \fBallocator\fP). 
.RE
.PP

.PP
Definition at line 221 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits , typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (\fBinitializer_list\fP< _CharT > __l, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string from an initializer \fBlist\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP \fBstd::initializer_list\fP of characters. 
.br
\fIa\fP Allocator to use (default is default \fBallocator\fP). 
.RE
.PP

.PP
Definition at line 236 of file basic_string.tcc.
.SS "template<typename _CharT , typename _Traits , typename _Alloc> template<typename _InputIterator > \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBbasic_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as copy of a range. 
.PP
\fBParameters:\fP
.RS 4
\fIbeg\fP Start of range. 
.br
\fIend\fP End of range. 
.br
\fIa\fP Allocator to use (default is default \fBallocator\fP). 
.RE
.PP

.PP
Definition at line 229 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::~\fBbasic_string\fP ()\fC [inline]\fP"
.PP
Destroy the string instance. 
.PP
Definition at line 497 of file basic_string.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Append a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to append. 
.br
\fIlast\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends characters in the range [first,last) to this string. 
.PP
Definition at line 901 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (\fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Append an \fBinitializer_list\fP of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The \fBinitializer_list\fP of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 887 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::append().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Append multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP The number of characters to append. 
.br
\fIc\fP The character to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends n copies of c to this string. 
.PP
Definition at line 282 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::capacity(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const _CharT * __s)\fC [inline]\fP"
.PP
Append a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 863 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Append a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.br
\fIn\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 299 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::capacity(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos, size_type __n)\fC [inline]\fP"
.PP
Append a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.br
\fIpos\fP Index of the first character of str to append. 
.br
\fIn\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fIpos\fP is not a valid index.
.RE
.PP
This function appends \fIn\fP characters from \fIstr\fP starting at \fIpos\fP to this string. If \fIn\fP is is larger than the number of available characters in \fIstr\fP, the remainder of \fIstr\fP is appended. 
.PP
Definition at line 343 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_check(), std::basic_string< _CharT, _Traits, _Alloc >::_M_data(), std::basic_string< _CharT, _Traits, _Alloc >::_M_limit(), std::basic_string< _CharT, _Traits, _Alloc >::capacity(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::append (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Append a string to this string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 326 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_data(), std::basic_string< _CharT, _Traits, _Alloc >::capacity(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.PP
Referenced by std::collate< _CharT >::do_transform(), std::operator+(), std::operator>>(), and std::basic_string< _CharT, _Traits, _Alloc >::resize().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (\fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Set value to an \fBinitializer_list\fP of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The \fBinitializer_list\fP of characters to assign. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 1006 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::assign().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Set value to a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to append. 
.br
\fIlast\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Sets value of string to characters in the range [first,last). 
.PP
Definition at line 996 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Set value to multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Length of the resulting string. 
.br
\fIc\fP The character to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to \fIn\fP copies of character \fIc\fP. 
.PP
Definition at line 983 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const _CharT * __s)\fC [inline]\fP"
.PP
Set value to contents of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The C string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the value of \fIs\fP. The data is copied, so there is no dependence on \fIs\fP once the function returns. 
.PP
Definition at line 967 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Set value to a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The C string to use. 
.br
\fIn\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the first \fIn\fP characters of \fIs\fP. If \fIn\fP is is larger than the number of available characters in \fIs\fP, the remainder of \fIs\fP is used. 
.PP
Definition at line 260 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos, size_type __n)\fC [inline]\fP"
.PP
Set value to a substring of a string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The string to use. 
.br
\fIpos\fP Index of the first character of str. 
.br
\fIn\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fIpos\fP is not a valid index.
.RE
.PP
This function sets this string to the substring of \fIstr\fP consisting of \fIn\fP characters at \fIpos\fP. If \fIn\fP is is larger than the number of available characters in \fIstr\fP, the remainder of \fIstr\fP is used. 
.PP
Definition at line 939 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::assign().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Set value to contents of another string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Source string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 244 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_rep(), and std::basic_string< _CharT, _Traits, _Alloc >::get_allocator().
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), and std::basic_stringbuf< _CharT, _Traits, _Alloc >::str().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::at (size_type __n)\fC [inline]\fP"
.PP
Provides access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIn\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws \fBout_of_range\fP if the check fails. Success results in unsharing the string. 
.PP
Definition at line 775 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::at (size_type __n) const\fC [inline]\fP"
.PP
Provides access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (const) reference to the character. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIn\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws \fBout_of_range\fP if the check fails. 
.PP
Definition at line 756 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::begin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) \fBiterator\fP that points to the first character in the string. 
.PP
Definition at line 560 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::begin ()\fC [inline]\fP"
.PP
Returns a read/write \fBiterator\fP that points to the first character in the string. Unshares the string. 
.PP
Definition at line 549 of file basic_string.h.
.PP
Referenced by std::regex_match(), std::regex_replace(), and std::regex_search().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::c_str () const\fC [inline]\fP"
.PP
Return const pointer to null-terminated contents. 
.PP
This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1615 of file basic_string.h.
.PP
Referenced by std::collate< _CharT >::do_compare(), std::money_get< _CharT, _InIter >::do_get(), std::num_get< _CharT, _InIter >::do_get(), std::collate< _CharT >::do_transform(), and std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >::open().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::capacity () const\fC [inline]\fP"
.PP
Returns the total number of characters that the string can hold before needing to allocate more memory. 
.PP
Definition at line 669 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), and std::basic_string< _CharT, _Traits, _Alloc >::reserve().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::clear ()\fC [inline]\fP"
.PP
Erases the string, making it empty. 
.PP
Definition at line 696 of file basic_string.h.
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::setbuf().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const\fC [inline]\fP"
.PP
Compare substring against a character \fBarray\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIs\fP character \fBarray\fP to compare against. 
.br
\fIn2\fP Number of characters of s. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos1\fP. Form a string from the first \fIn2\fP characters of \fIs\fP. Returns an integer < 0 if this substring is ordered before the string from \fIs\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the string from \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fIn2\fP. The function then compares the two strings by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first.
.PP
NB: s must have at least n2 characters, '\\0' has no special meaning. 
.PP
Definition at line 958 of file basic_string.tcc.
.PP
References std::min().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type __pos, size_type __n1, const _CharT * __s) const\fC [inline]\fP"
.PP
Compare substring to a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIs\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos\fP. Returns an integer < 0 if the substring is ordered before \fIs\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and the length of a string constructed from \fIs\fP. The function then compares the two string by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 942 of file basic_string.tcc.
.PP
References std::min().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (const _CharT * __s) const\fC [inline]\fP"
.PP
Compare to a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fIs\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of \fBsize()\fP and the length of a string constructed from \fIs\fP. The function then compares the two strings by calling traits::compare(\fBdata()\fP,s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 927 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::length(), std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type __pos1, size_type __n1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos2, size_type __n2) const\fC [inline]\fP"
.PP
Compare substring to a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIstr\fP String to compare against. 
.br
\fIpos2\fP Index of first character of substring of str. 
.br
\fIn2\fP Number of characters in substring of str. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos1\fP. Form the substring of \fIstr\fP from the \fIn2\fP characters starting at \fIpos2\fP. Returns an integer < 0 if this substring is ordered before the substring of \fIstr\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the substring of \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of the lengths of the substrings. The function then compares the two strings by calling traits::compare(substring.data(),str.substr(pos2,n2).\fBdata()\fP,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 909 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_check(), std::basic_string< _CharT, _Traits, _Alloc >::_M_limit(), std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::data(), and std::min().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (size_type __pos, size_type __n, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str) const\fC [inline]\fP"
.PP
Compare substring to a string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character of substring. 
.br
\fIn\fP Number of characters in substring. 
.br
\fIstr\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn\fP characters starting at \fIpos\fP. Returns an integer < 0 if the substring is ordered before \fIstr\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fIstr.size()\fP. The function then compares the two strings by calling traits::compare(substring.data(),str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 894 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::data(), std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> int \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::compare (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str) const\fC [inline]\fP"
.PP
Compare to a string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fIstr\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of \fBsize()\fP and str.size(). The function then compares the two strings by calling traits::compare(\fBdata()\fP, str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 2022 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::operator<(), std::operator<=(), std::operator==(), std::operator>(), and std::operator>=().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::copy (_CharT * __s, size_type __n, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Copy substring into C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to copy value into. 
.br
\fIn\fP Number of characters to copy. 
.br
\fIpos\fP Index of first character to copy. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of characters actually copied 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > \fBsize()\fP.
.RE
.PP
Copies up to \fIn\fP characters starting at \fIpos\fP into the C string \fIs\fP. If \fIpos\fP is \fBgreater\fP than \fBsize()\fP, \fBout_of_range\fP is thrown. 
.PP
Definition at line 701 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::data () const\fC [inline]\fP"
.PP
Return const pointer to contents. 
.PP
This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1625 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::basic_string< char >::compare(), std::collate< _CharT >::do_compare(), std::collate< _CharT >::do_transform(), std::basic_string< char >::find(), std::basic_string< char >::find_first_not_of(), std::basic_string< char >::find_first_of(), std::basic_string< char >::find_last_not_of(), std::basic_string< char >::find_last_of(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), std::basic_string< char >::rfind(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(), and std::regex_traits< _Ch_type >::transform().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> bool \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::empty () const\fC [inline]\fP"
.PP
Returns true if the string is empty. Equivalent to *this == ''. 
.PP
Definition at line 703 of file basic_string.h.
.PP
Referenced by std::operator>>().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::end () const\fC [inline]\fP"
.PP
Returns a read-only (constant) \fBiterator\fP that points one past the last character in the string. 
.PP
Definition at line 579 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::end ()\fC [inline]\fP"
.PP
Returns a read/write \fBiterator\fP that points one past the last character in the string. Unshares the string. 
.PP
Definition at line 568 of file basic_string.h.
.PP
Referenced by std::regex_match(), std::regex_replace(), and std::regex_search().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (iterator __first, iterator __last)\fC [inline]\fP"
.PP
Remove a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to remove. 
.br
\fIlast\fP Iterator referencing the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing location of first after removal.
.RE
.PP
Removes the characters in the range [first,last) from this string. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1229 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (iterator __position)\fC [inline]\fP"
.PP
Remove one character. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP Iterator referencing the character to remove. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBiterator\fP referencing same location after removal.
.RE
.PP
Removes the character at \fIposition\fP from this string. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1209 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::erase (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"
.PP
Remove characters. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to remove (default 0). 
.br
\fIn\fP Number of characters to remove (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Removes \fIn\fP characters from this string starting at \fIpos\fP. The length of the string is reduced by \fIn\fP. If there are < \fIn\fP characters to remove, the remainder of the string is truncated. If \fIp\fP is beyond end of string, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1193 of file basic_string.h.
.PP
Referenced by std::getline(), std::operator>>(), and std::basic_string< _CharT, _Traits, _Alloc >::resize().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 738 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::find(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the value of \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1674 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for value of \fIstr\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1660 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::find().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from \fIs\fP to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the first \fIn\fP characters in \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 715 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::find(), and std::basic_string< _CharT, _Traits, _Alloc >::find_first_of().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a different character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character other than \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 842 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character not in C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1913 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a character not in C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 830 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character not in string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1884 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::find_first_not_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the character \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to find(c, pos). 
.PP
Definition at line 1809 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character of C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1790 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a character of C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 794 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::find(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_first_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a character of string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the characters of \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1762 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::find_first_of().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a different character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character other than \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 874 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character not in C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1972 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a character not in C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 853 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character not in string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1943 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::find_last_not_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to rfind(c, pos). 
.PP
Definition at line 1870 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character of C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1851 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a character of C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to locate. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 809 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::find_last_of (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character of string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the characters of \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1823 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::find_last_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> allocator_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::get_allocator () const\fC [inline]\fP"
.PP
Return copy of \fBallocator\fP used to construct this string. 
.PP
Definition at line 1632 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::assign(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and std::basic_string< _CharT, _Traits, _Alloc >::swap().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> iterator \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator __p, _CharT __c)\fC [inline]\fP"
.PP
Insert one character. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing position in string to insert at. 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing newly inserted char. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts character \fIc\fP at position referenced by \fIp\fP. If adding character causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. If \fIp\fP is beyond end of string, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1169 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type __pos, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Insert multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index in string to insert at. 
.br
\fIn\fP Number of characters to insert 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts \fIn\fP copies of character \fIc\fP starting at index \fIpos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. If \fIpos\fP > \fBlength()\fP, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1152 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type __pos, const _CharT * __s)\fC [inline]\fP"
.PP
Insert a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing location in string to insert at. 
.br
\fIs\fP The C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fIn\fP characters of \fIs\fP starting at \fIpos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. If \fIpos\fP is beyond \fBend()\fP, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1129 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type __pos, const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Insert a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing location in string to insert at. 
.br
\fIs\fP The C string to insert. 
.br
\fIn\fP The number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fIn\fP characters of \fIs\fP starting at \fIpos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. If \fIpos\fP is beyond \fBend()\fP, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 361 of file basic_string.tcc.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type __pos1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos2, size_type __n)\fC [inline]\fP"
.PP
Insert a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIpos1\fP Iterator referencing location in string to insert at. 
.br
\fIstr\fP The string to insert. 
.br
\fIpos2\fP Start of characters in str to insert. 
.br
\fIn\fP Number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > \fBsize()\fP or \fIpos2\fP > \fIstr.size()\fP.
.RE
.PP
Starting at \fIpos1\fP, insert \fIn\fP character of \fIstr\fP beginning with \fIpos2\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. If \fIpos1\fP is beyond the end of this string or \fIpos2\fP is beyond the end of \fIstr\fP, \fBout_of_range\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1088 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::insert().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (size_type __pos1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Insert value of a string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos1\fP Iterator referencing location in string to insert at. 
.br
\fIstr\fP The string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts value of \fIstr\fP starting at \fIpos1\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1066 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::insert().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator __p, \fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Insert an \fBinitializer_list\fP of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIl\fP The \fBinitializer_list\fP of characters to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.RE
.PP

.PP
Definition at line 1050 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::insert().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator __p, _InputIterator __beg, _InputIterator __end)\fC [inline]\fP"
.PP
Insert a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIbeg\fP Start of range. 
.br
\fIend\fP End of range. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts characters in range [beg,end). If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1039 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::insert (iterator __p, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Insert multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIn\fP Number of characters to insert 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts \fIn\fP copies of character \fIc\fP starting at the position referenced by \fBiterator\fP \fIp\fP. If adding characters causes the length to exceed \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1023 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::length () const\fC [inline]\fP"
.PP
Returns the number of characters in the string, not including any null-termination. 
.PP
Definition at line 629 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::collate< _CharT >::do_compare(), std::collate< _CharT >::do_transform(), std::match_results< _Bi_iter >::length(), and std::regex_traits< _Ch_type >::length().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::max_size () const\fC [inline]\fP"
.PP
Returns the \fBsize()\fP of the largest possible string. 
.PP
Definition at line 634 of file basic_string.h.
.PP
Referenced by std::getline(), std::operator>>(), and std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (\fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Append an \fBinitializer_list\fP of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The \fBinitializer_list\fP of characters to be appended. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 821 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (_CharT __c)\fC [inline]\fP"
.PP
Append a character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 808 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (const _CharT * __s)\fC [inline]\fP"
.PP
Append a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 799 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator+= (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Append a string to this string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 790 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (\fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Set value to string constructed from initializer \fBlist\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP \fBstd::initializer_list\fP. 
.RE
.PP

.PP
Definition at line 536 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (_CharT __c)\fC [inline]\fP"
.PP
Set value to string of length 1. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Source character.
.RE
.PP
Assigning to a character makes this string length 1 and (*this)[0] == \fIc\fP. 
.PP
Definition at line 524 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (const _CharT * __s)\fC [inline]\fP"
.PP
Copy contents of \fIs\fP into this string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Source null-terminated string. 
.RE
.PP

.PP
Definition at line 513 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator= (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Assign the value of \fIstr\fP to this string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Source string. 
.RE
.PP

.PP
Definition at line 505 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator[] (size_type __pos)\fC [inline]\fP"
.PP
Subscript access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and \fBout_of_range\fP lookups are not defined. (For checked lookups see \fBat()\fP.) Unshares the string. 
.PP
Definition at line 735 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::operator[] (size_type __pos) const\fC [inline]\fP"
.PP
Subscript access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (constant) reference to the character.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and \fBout_of_range\fP lookups are not defined. (For checked lookups see \fBat()\fP.) 
.PP
Definition at line 718 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::push_back (_CharT __c)\fC [inline]\fP"
.PP
Append a single character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to append. 
.RE
.PP

.PP
Definition at line 909 of file basic_string.h.
.PP
Referenced by std::collate< _CharT >::do_transform(), std::operator>>(), and std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rbegin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse \fBiterator\fP that points to the last character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 597 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rbegin ()\fC [inline]\fP"
.PP
Returns a read/write reverse \fBiterator\fP that points to the last character in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 588 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rend () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse \fBiterator\fP that points to one before the first character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 615 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rend ()\fC [inline]\fP"
.PP
Returns a read/write reverse \fBiterator\fP that points to one before the first character in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 606 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, \fBinitializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Replace range of characters with \fBinitializer_list\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIl\fP The \fBinitializer_list\fP of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1513 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> template<class _InputIterator > \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)\fC [inline]\fP"
.PP
Replace range of characters with range. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIk1\fP Iterator referencing start of range to insert. 
.br
\fIk2\fP Iterator referencing end of range to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1445 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Replace range of characters with multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIn\fP Number of characters to insert. 
.br
\fIc\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, \fIn\fP copies of \fIc\fP are inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1422 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, const _CharT * __s)\fC [inline]\fP"
.PP
Replace range of characters with C string. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIs\fP C string value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the characters of \fIs\fP are inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1401 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Replace range of characters with C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIs\fP C string value to insert. 
.br
\fIn\fP Number of characters from s to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the first \fIn\fP characters of \fIs\fP are inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1380 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Replace range of characters with string. 
.PP
\fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIstr\fP String value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the value of \fIstr\fP is inserted. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1362 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c)\fC [inline]\fP"
.PP
Replace characters with multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIn2\fP Number of characters to insert. 
.br
\fIc\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, \fIn2\fP copies of \fIc\fP are inserted. If \fIpos\fP is beyond end of string, \fBout_of_range\fP is thrown. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1344 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type __pos, size_type __n1, const _CharT * __s)\fC [inline]\fP"
.PP
Replace characters with value of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIs\fP C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the first \fIn\fP characters of \fIs\fP are inserted. If \fIpos\fP is beyond end of string, \fBout_of_range\fP is thrown. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1321 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc > & \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2)\fC [inline]\fP"
.PP
Replace characters with value of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIs\fP C string to insert. 
.br
\fIn2\fP Number of characters from \fIs\fP to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the first \fIn2\fP characters of \fIs\fP are inserted, or all of \fIs\fP if \fIn2\fP is too large. If \fIpos\fP is beyond end of string, \fBout_of_range\fP is thrown. If the length of result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 392 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_data().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type __pos1, size_type __n1, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos2, size_type __n2)\fC [inline]\fP"
.PP
Replace characters with value from another string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIstr\fP String to insert. 
.br
\fIpos2\fP Index of first character of str to use. 
.br
\fIn2\fP Number of characters from str to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > \fBsize()\fP or \fIpos2\fP > str.size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos1,pos1 + n) from this string. In place, the value of \fIstr\fP is inserted. If \fIpos\fP is beyond end of string, \fBout_of_range\fP is thrown. If the length of the result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1278 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::replace (size_type __pos, size_type __n, const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str)\fC [inline]\fP"
.PP
Replace characters with value from another string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn\fP Number of characters to be replaced. 
.br
\fIstr\fP String to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos+n) from this string. In place, the value of \fIstr\fP is inserted. If \fIpos\fP is beyond end of string, \fBout_of_range\fP is thrown. If the length of the result exceeds \fBmax_size()\fP, \fBlength_error\fP is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1256 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::replace().
.SS "template<typename _CharT , typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::reserve (size_type __res_arg = \fC0\fP)\fC [inline]\fP"
.PP
Attempt to preallocate enough memory for specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIres_arg\fP Number of characters required. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If \fIres_arg\fP exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
This function attempts to reserve enough memory for the string to hold the specified number of characters. If the number requested is more than \fBmax_size()\fP, \fBlength_error\fP is thrown.
.PP
The advantage of this function is that if optimal code is a necessity and the user can determine the string length that will be required, the user can reserve the memory in advance, and thus prevent a possible reallocation of memory and copying of string data. 
.PP
Definition at line 480 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::capacity(), std::basic_string< _CharT, _Traits, _Alloc >::get_allocator(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(), std::num_get< _CharT, _InIter >::do_get(), std::operator>>(), and std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::resize (size_type __n)\fC [inline]\fP"
.PP
Resizes the string to the specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Number of characters the string should contain.
.RE
.PP
This function will resize the string to the specified length. If the new size is smaller than the string's current size the string is truncated, otherwise the string is extended and new characters are default-constructed. For basic types such as char, this means setting them to 0. 
.PP
Definition at line 661 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::resize().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::resize (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Resizes the string to the specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Number of characters the string should contain. 
.br
\fIc\fP Character to fill any new elements.
.RE
.PP
This function will resize the string to the specified number of characters. If the number is smaller than the string's current size the string is truncated, otherwise the string is extended and new elements are \fBset\fP to \fIc\fP. 
.PP
Definition at line 618 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::append(), std::basic_string< _CharT, _Traits, _Alloc >::erase(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.PP
Referenced by std::money_get< _CharT, _InIter >::do_get().
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a character. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 777 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to start search at (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for the value of \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1732 of file basic_string.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc > \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for the first \fIn\fP characters in \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 756 of file basic_string.tcc.
.PP
References std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::rfind (const \fBbasic_string\fP< _CharT, _Traits, _Alloc > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a string. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP String to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for value of \fIstr\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1704 of file basic_string.h.
.PP
Referenced by std::basic_string< char >::rfind().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::size () const\fC [inline]\fP"
.PP
Returns the number of characters in the string, not including any null-termination. 
.PP
Definition at line 623 of file basic_string.h.
.PP
Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(), std::basic_string< _CharT, _Traits, _Alloc >::assign(), std::bitset< _S_match_flag_last >::bitset(), std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::basic_string< char >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::find(), std::basic_string< char >::find(), std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of(), std::basic_string< char >::find_first_not_of(), std::basic_string< _CharT, _Traits, _Alloc >::find_first_of(), std::basic_string< char >::find_first_of(), std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of(), std::basic_string< char >::find_last_not_of(), std::basic_string< _CharT, _Traits, _Alloc >::find_last_of(), std::basic_string< char >::find_last_of(), std::basic_string< char >::insert(), std::operator+(), std::basic_string< char >::replace(), std::basic_string< _CharT, _Traits, _Alloc >::reserve(), std::basic_string< _CharT, _Traits, _Alloc >::resize(), std::basic_string< _CharT, _Traits, _Alloc >::rfind(), std::basic_string< char >::rfind(), std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(), and std::regex_traits< _Ch_type >::transform().
.SS "template<typename _CharT, typename _Traits, typename _Alloc> \fBbasic_string\fP \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::substr (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Get a substring. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Index of first character (default 0). 
.br
\fIn\fP Number of characters in substring (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
The new string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > \fBsize()\fP.
.RE
.PP
Construct and return a new string using the \fIn\fP characters starting at \fIpos\fP. If the string is too short, use the remainder of the characters. If \fIpos\fP is beyond the end of the string, \fBout_of_range\fP is thrown. 
.PP
Definition at line 2004 of file basic_string.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc > void \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::swap (\fBbasic_string\fP< _CharT, _Traits, _Alloc > & __s)\fC [inline]\fP"
.PP
Swap contents with another string. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP String to swap with.
.RE
.PP
Exchanges the contents of this string with that of \fIs\fP in constant time. 
.PP
Definition at line 497 of file basic_string.tcc.
.PP
References std::basic_string< _CharT, _Traits, _Alloc >::_M_data(), std::basic_string< _CharT, _Traits, _Alloc >::_M_ibegin(), std::basic_string< _CharT, _Traits, _Alloc >::_M_iend(), std::basic_string< _CharT, _Traits, _Alloc >::_M_rep(), and std::basic_string< _CharT, _Traits, _Alloc >::get_allocator().
.PP
Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), and std::swap().
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc> const \fBbasic_string\fP< _CharT, _Traits, _Alloc >::size_type \fBstd::basic_string\fP< _CharT, _Traits, _Alloc >::\fBnpos\fP\fC [inline, static]\fP"
.PP
Value returned by various member functions when they fail. 
.PP
Definition at line 265 of file basic_string.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
