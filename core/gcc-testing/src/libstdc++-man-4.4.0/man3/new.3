.TH "new" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
new \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBstd::bad_alloc\fP"
.br
.RI "\fIException possibly thrown by \fCnew\fP.
.PP
\fC\fBbad_alloc\fP\fP (or classes derived from it) is used to report allocation errors from the throwing forms of \fCnew\fP. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBstd\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBstd::new_handler\fP )()"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "new_handler \fBstd::set_new_handler\fP (new_handler)  throw ()"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBoperator delete\fP (void *, void *)  throw ()"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *, const std::nothrow_t &)  throw ()"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *)  throw ()"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *, void *)  throw ()"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *, const std::nothrow_t &)  throw ()"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new\fP (std::size_t, void *__p)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new\fP (std::size_t, const std::nothrow_t &)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new\fP (std::size_t)  throw (std::bad_alloc)"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (std::size_t, void *__p)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (std::size_t, const std::nothrow_t &)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (std::size_t)  throw (std::bad_alloc)"
.br
.in -1c
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const nothrow_t \fBstd::nothrow\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a Standard C++ Library header.
.PP
The header \fCnew\fP defines several functions to manage dynamic memory and handling memory allocation errors; see http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more. 
.PP
Definition in file \fBnew\fP.
.SH "Function Documentation"
.PP 
.SS "void operator delete (void *, void *)  throw ()\fC [inline]\fP"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.PP
Definition at line 105 of file new.
.SS "void operator delete (void *, const std::nothrow_t &)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void operator delete (void *)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void operator delete[] (void *, void *)  throw ()\fC [inline]\fP"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.PP
Definition at line 106 of file new.
.SS "void operator delete[] (void *, const std::nothrow_t &)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void operator delete[] (void *)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void* operator new (std::size_t, void * __p)  throw ()\fC [inline]\fP"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.PP
Definition at line 101 of file new.
.SS "void* operator new (std::size_t, const std::nothrow_t &)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void* operator new (std::size_t)  throw (\fBstd::bad_alloc\fP)"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void* operator new[] (std::size_t, void * __p)  throw ()\fC [inline]\fP"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.PP
Definition at line 102 of file new.
.SS "void* operator new[] (std::size_t, const std::nothrow_t &)  throw ()"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SS "void* operator new[] (std::size_t)  throw (\fBstd::bad_alloc\fP)"
.PP
These are replaceable signatures:
.IP "\(bu" 2
normal single new and delete (no arguments, throw \fCbad_alloc\fP on error)
.IP "\(bu" 2
normal array new and delete (same)
.IP "\(bu" 2
\fCnothrow\fP single new and delete (take a \fCnothrow\fP argument, return \fCNULL\fP on error)
.IP "\(bu" 2
\fCnothrow\fP array new and delete (same)
.PP
.PP
Placement new and delete signatures (take a memory address argument, does nothing) may not be replaced by a user's program. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
