.TH "Iterators" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Iterators \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstd::bidirectional_iterator_tag\fP"
.br
.RI "\fIBidirectional iterators support a superset of forward \fBiterator\fP operations. \fP"
.ti -1c
.RI "struct \fBstd::forward_iterator_tag\fP"
.br
.RI "\fIForward iterators support a superset of input \fBiterator\fP operations. \fP"
.ti -1c
.RI "struct \fBstd::input_iterator_tag\fP"
.br
.RI "\fIMarking input iterators. \fP"
.ti -1c
.RI "struct \fBstd::iterator< _Category, _Tp, _Distance, _Pointer, _Reference >\fP"
.br
.RI "\fICommon iterator class. \fP"
.ti -1c
.RI "struct \fBstd::iterator_traits< _Iterator >\fP"
.br
.ti -1c
.RI "struct \fBstd::output_iterator_tag\fP"
.br
.RI "\fIMarking output iterators. \fP"
.ti -1c
.RI "struct \fBstd::random_access_iterator_tag\fP"
.br
.RI "\fIRandom-access iterators support a superset of bidirectional \fBiterator\fP operations. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Iter > iterator_traits< _Iter >::iterator_category \fBstd::__iterator_category\fP (const _Iter &)"
.br
.in -1c
.SH "Detailed Description"
.PP 
These are empty types, used to distinguish different iterators. The distinction is not made by what they contain, but simply by what they are. Different underlying algorithms can then be used based on the different operations supported by different \fBiterator\fP types. 
.SH "Function Documentation"
.PP 
.SS "template<typename _Iter > iterator_traits<_Iter>::iterator_category std::__iterator_category (const _Iter &)\fC [inline]\fP"
.PP
This function is not a part of the C++ standard but is syntactic sugar for internal library use only. 
.PP
Definition at line 160 of file stl_iterator_base_types.h.
.PP
Referenced by std::advance(), std::copy_n(), __gnu_cxx::copy_n(), std::distance(), __gnu_cxx::distance(), std::find(), std::find_end(), std::find_if(), std::find_if_not(), std::partition(), std::reverse(), std::search_n(), std::uninitialized_copy_n(), __gnu_cxx::uninitialized_copy_n(), and std::unique_copy().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
