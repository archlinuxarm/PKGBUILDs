.TH "std::basic_regex" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::basic_regex \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBregex_constants::syntax_option_type\fP \fBflag_type\fP"
.br
.ti -1c
.RI "typedef _Rx_traits::locale_type \fBlocale_type\fP"
.br
.ti -1c
.RI "typedef _Rx_traits::string_type \fBstring_type\fP"
.br
.ti -1c
.RI "typedef _Ch_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (\fBinitializer_list\fP< _Ch_type > __l, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_regex\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last, flag_type __flags=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "template<typename _Ch_typeraits , typename _Allocator > \fBbasic_regex\fP & \fBassign\fP (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Allocator > &__s, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const _Ch_type *__p, std::size_t __len, flag_type __flags)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const _Ch_type *__p, flag_type __flags=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBassign\fP (const \fBbasic_regex\fP &__that)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (\fBinitializer_list\fP< _Ch_type > __l, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_regex\fP (_InputIterator __first, _InputIterator __last, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "template<typename _Ch_traits , typename _Ch_alloc > \fBbasic_regex\fP (const \fBbasic_string\fP< _Ch_type, _Ch_traits, _Ch_alloc > &__s, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const \fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const _Ch_type *__p, std::size_t __len, flag_type __f)"
.br
.ti -1c
.RI "\fBbasic_regex\fP (const _Ch_type *__p, flag_type __f=\fBregex_constants::ECMAScript\fP)"
.br
.ti -1c
.RI "\fBbasic_regex\fP ()"
.br
.ti -1c
.RI "flag_type \fBflags\fP () const "
.br
.ti -1c
.RI "locale_type \fBgetloc\fP () const "
.br
.ti -1c
.RI "locale_type \fBimbue\fP (locale_type __loc)"
.br
.ti -1c
.RI "unsigned int \fBmark_count\fP () const "
.br
.ti -1c
.RI "template<typename _Ch_typeraits , typename _Allocator > \fBbasic_regex\fP & \fBoperator=\fP (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Allocator > &__s)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBoperator=\fP (const _Ch_type *__p)"
.br
.ti -1c
.RI "\fBbasic_regex\fP & \fBoperator=\fP (const \fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_regex\fP &__rhs)"
.br
.ti -1c
.RI "\fB~basic_regex\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.PP
.RI "\fBConstants\fP"
.br
\fBtr1\fP [7.8.1] \fBstd\fP [28.8.1] 
.PP
.in +1c
.in +1c
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBawk\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBbasic\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBcollate\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBECMAScript\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBegrep\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBextended\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBgrep\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBicase\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBnosubs\fP"
.br
.ti -1c
.RI "static const \fBregex_constants::syntax_option_type\fP \fBoptimize\fP"
.br
.in -1c
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "flag_type \fB_M_flags\fP"
.br
.ti -1c
.RI "unsigned int \fB_M_mark_count\fP"
.br
.ti -1c
.RI "string_type \fB_M_pattern\fP"
.br
.ti -1c
.RI "_Rx_traits \fB_M_traits\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> class std::basic_regex< _Ch_type, _Rx_traits >"
Objects of specializations of this class represent regular expressions constructed from sequences of character type \fC_Ch_type\fP.
.PP
Storage for the regular expression is allocated and deallocated as necessary by the member functions of this class. 
.PP
Definition at line 709 of file tr1_impl/regex.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP ()\fC [inline]\fP"
.PP
Constructs a basic regular expression that does not match any character sequence. 
.PP
Definition at line 750 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const _Ch_type * __p, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline, explicit]\fP"
.PP
Constructs a basic regular expression from the sequence [p, p + char_traits<_Ch_type>::length(p)) interpreted according to the flags in \fCf\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP A pointer to the start of a C-style null-terminated string containing a regular expression. 
.br
\fIf\fP Flags indicating the syntax rules and options.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fCp\fP is not a valid regular expression. 
.RE
.PP

.PP
Definition at line 766 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const _Ch_type * __p, std::size_t __len, flag_type __f)\fC [inline]\fP"
.PP
Constructs a basic regular expression from the sequence [p, p + len) interpreted according to the flags in \fCf\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP A pointer to the start of a string containing a regular expression. 
.br
\fIlen\fP The length of the string containing the regular expression. 
.br
\fIf\fP Flags indicating the syntax rules and options.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fCp\fP is not a valid regular expression. 
.RE
.PP

.PP
Definition at line 782 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > & __rhs)\fC [inline]\fP"
.PP
Copy-constructs a basic regular expression. 
.PP
\fBParameters:\fP
.RS 4
\fIrhs\fP A \fCregex\fP object. 
.RE
.PP

.PP
Definition at line 791 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_traits , typename _Ch_alloc > \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (const \fBbasic_string\fP< _Ch_type, _Ch_traits, _Ch_alloc > & __s, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline, explicit]\fP"
.PP
Constructs a basic regular expression from the string \fCs\fP interpreted according to the flags in \fCf\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP A string containing a regular expression. 
.br
\fIf\fP Flags indicating the syntax rules and options.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fCs\fP is not a valid regular expression. 
.RE
.PP

.PP
Definition at line 807 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _InputIterator > \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (_InputIterator __first, _InputIterator __last, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Constructs a basic regular expression from the range [first, last) interpreted according to the flags in \fCf\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP The start of a range containing a valid regular expression. 
.br
\fIlast\fP The end of a range containing a valid regular expression. 
.br
\fIf\fP The format flags of the regular expression.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fC\fP[first, last) is not a valid regular expression. 
.RE
.PP

.PP
Definition at line 826 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::\fBbasic_regex\fP (\fBinitializer_list\fP< _Ch_type > __l, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Constructs a basic regular expression from an initializer \fBlist\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The initializer \fBlist\fP. 
.br
\fIf\fP The format flags of the regular expression.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fCl\fP is not a valid regular expression. 
.RE
.PP

.PP
Definition at line 840 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::~\fBbasic_regex\fP ()\fC [inline]\fP"
.PP
Destroys a basic regular expression. 
.PP
Definition at line 849 of file tr1_impl/regex.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (\fBinitializer_list\fP< _Ch_type > __l, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Assigns a new regular expression to a regex object. 
.PP
\fBParameters:\fP
.RS 4
\fIl\fP An initializer \fBlist\fP representing a regular expression. 
.br
\fIflags\fP Syntax option flags.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if \fCl\fP does not contain a valid regular expression pattern interpreted according to \fCflags\fP. If \fBregex_error\fP is thrown, the object remains unchanged. 
.RE
.PP

.PP
Definition at line 982 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign(), std::initializer_list< _E >::begin(), and std::initializer_list< _E >::end().
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _InputIterator > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (_InputIterator __first, _InputIterator __last, flag_type __flags = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Assigns a new regular expression to a regex object. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP The start of a range containing a valid regular expression. 
.br
\fIlast\fP The end of a range containing a valid regular expression. 
.br
\fIflags\fP Syntax option flags.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if p does not contain a valid regular expression pattern interpreted according to \fCflags\fP. If \fBregex_error\fP is thrown, the object remains unchanged. 
.RE
.PP

.PP
Definition at line 966 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign().
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_typeraits , typename _Allocator > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Allocator > & __s, flag_type __f = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Assigns a new regular expression to a regex object from a string containing a regular expression pattern. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP A string containing a regular expression pattern. 
.br
\fIflags\fP Syntax option flags.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if p does not contain a valid regular expression pattern interpreted according to \fCflags\fP. If \fBregex_error\fP is thrown, *this remains unchanged. 
.RE
.PP

.PP
Definition at line 943 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::swap().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const _Ch_type * __p, std::size_t __len, flag_type __flags)\fC [inline]\fP"
.PP
Assigns a new regular expression to a regex object from a C-style string containing a regular expression pattern. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP A pointer to a C-style string containing a regular expression pattern. 
.br
\fIlen\fP The length of the regular expression pattern string. 
.br
\fIflags\fP Syntax option flags.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if p does not contain a valid regular expression pattern interpreted according to \fCflags\fP. If \fBregex_error\fP is thrown, *this remains unchanged. 
.RE
.PP

.PP
Definition at line 927 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign().
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const _Ch_type * __p, flag_type __flags = \fC\fBregex_constants::ECMAScript\fP\fP)\fC [inline]\fP"
.PP
Assigns a new regular expression to a regex object from a C-style null-terminated string containing a regular expression pattern. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP A pointer to a C-style null-terminated string containing a regular expression pattern. 
.br
\fIflags\fP Syntax option flags.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBregex_error\fP\fP if p does not contain a valid regular expression pattern interpreted according to \fCflags\fP. If \fBregex_error\fP is thrown, *this remains unchanged. 
.RE
.PP

.PP
Definition at line 909 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign().
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::assign (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > & __that)\fC [inline]\fP"
.PP
the real assignment operator. 
.PP
\fBParameters:\fP
.RS 4
\fIthat\fP Another regular expression object. 
.RE
.PP

.PP
Definition at line 888 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::swap().
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::operator=().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> flag_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::flags () const\fC [inline]\fP"
.PP
Gets the flags used to construct the regular expression or in the last call to \fBassign()\fP. 
.PP
Definition at line 1001 of file tr1_impl/regex.
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::operator=().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> locale_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::getloc () const\fC [inline]\fP"
.PP
Gets the \fBlocale\fP currently imbued in the regular expression object. 
.PP
Definition at line 1019 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> locale_type \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::imbue (locale_type __loc)\fC [inline]\fP"
.PP
Imbues the regular expression object with the given \fBlocale\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIloc\fP A \fBlocale\fP. 
.RE
.PP

.PP
Definition at line 1011 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> unsigned int \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::mark_count () const\fC [inline]\fP"
.PP
Gets the number of marked subexpressions within the regular expression. 
.PP
Definition at line 993 of file tr1_impl/regex.
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> template<typename _Ch_typeraits , typename _Allocator > \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const \fBbasic_string\fP< _Ch_type, _Ch_typeraits, _Allocator > & __s)\fC [inline]\fP"
.PP
Replaces a regular expression with a new one constructed from a string. 
.PP
\fBParameters:\fP
.RS 4
\fIA\fP pointer to a string containing a regular expression. 
.RE
.PP

.PP
Definition at line 878 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign(), and std::basic_regex< _Ch_type, _Rx_traits >::flags().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const _Ch_type * __p)\fC [inline]\fP"
.PP
Replaces a regular expression with a new one constructed from a C-style null-terminated string. 
.PP
\fBParameters:\fP
.RS 4
\fIA\fP pointer to the start of a null-terminated C-style string containing a regular expression. 
.RE
.PP

.PP
Definition at line 867 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign(), and std::basic_regex< _Ch_type, _Rx_traits >::flags().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> \fBbasic_regex\fP& \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::operator= (const \fBbasic_regex\fP< _Ch_type, _Rx_traits > & __rhs)\fC [inline]\fP"
.PP
Assigns one regular expression to another. 
.PP
Definition at line 856 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::assign().
.SS "template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>> void \fBstd::basic_regex\fP< _Ch_type, _Rx_traits >::swap (\fBbasic_regex\fP< _Ch_type, _Rx_traits > & __rhs)\fC [inline]\fP"
.PP
Swaps the contents of two regular expression objects. 
.PP
\fBParameters:\fP
.RS 4
\fIrhs\fP Another regular expression object. 
.RE
.PP

.PP
Definition at line 1029 of file tr1_impl/regex.
.PP
References std::basic_regex< _Ch_type, _Rx_traits >::_M_flags, std::basic_regex< _Ch_type, _Rx_traits >::_M_mark_count, std::basic_regex< _Ch_type, _Rx_traits >::_M_pattern, and std::basic_regex< _Ch_type, _Rx_traits >::_M_traits.
.PP
Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign(), and std::swap().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
