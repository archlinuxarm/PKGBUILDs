.TH "std::tr1::__detail" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::tr1::__detail \- Implementation details not part of the namespace \fBstd::tr1\fP interface.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fB__floating_point_constant\fP"
.br
.RI "\fIA class to encapsulate type dependent floating point constants. Not everything will be able to be expressed as type logic. \fP"
.ti -1c
.RI "struct \fB__numeric_constants\fP"
.br
.RI "\fIA structure for numeric constants. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Tp > void \fB__airy\fP (const _Tp __x, _Tp &__Ai, _Tp &__Bi, _Tp &__Aip, _Tp &__Bip)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__assoc_laguerre\fP (const unsigned int __n, const unsigned int __m, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__assoc_legendre_p\fP (const unsigned int __l, const unsigned int __m, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__bernoulli\fP (const int __n)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__bernoulli_series\fP (unsigned int __n)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__bessel_ik\fP (const _Tp __nu, const _Tp __x, _Tp &__Inu, _Tp &__Knu, _Tp &__Ipnu, _Tp &__Kpnu)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__bessel_jn\fP (const _Tp __nu, const _Tp __x, _Tp &__Jnu, _Tp &__Nnu, _Tp &__Jpnu, _Tp &__Npnu)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__beta\fP (_Tp __x, _Tp __y)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__beta_gamma\fP (_Tp __x, _Tp __y)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__beta_lgamma\fP (_Tp __x, _Tp __y)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__beta_product\fP (_Tp __x, _Tp __y)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__bincoef\fP (const unsigned int __n, const unsigned int __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__comp_ellint_1\fP (const _Tp __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__comp_ellint_1_series\fP (const _Tp __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__comp_ellint_2\fP (const _Tp __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__comp_ellint_2_series\fP (const _Tp __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__comp_ellint_3\fP (const _Tp __k, const _Tp __nu)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__conf_hyperg\fP (const _Tp __a, const _Tp __c, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__conf_hyperg_luke\fP (const _Tp __a, const _Tp __c, const _Tp __xin)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__conf_hyperg_series\fP (const _Tp __a, const _Tp __c, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__cyl_bessel_i\fP (const _Tp __nu, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__cyl_bessel_ij_series\fP (const _Tp __nu, const _Tp __x, const _Tp __sgn, const unsigned int __max_iter)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__cyl_bessel_j\fP (const _Tp __nu, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__cyl_bessel_jn_asymp\fP (const _Tp __nu, const _Tp __x, _Tp &__Jnu, _Tp &__Nnu)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__cyl_bessel_k\fP (const _Tp __nu, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__cyl_neumann_n\fP (const _Tp __nu, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_1\fP (const _Tp __k, const _Tp __phi)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_2\fP (const _Tp __k, const _Tp __phi)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_3\fP (const _Tp __k, const _Tp __nu, const _Tp __phi)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_rc\fP (const _Tp __x, const _Tp __y)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_rd\fP (const _Tp __x, const _Tp __y, const _Tp __z)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_rf\fP (const _Tp __x, const _Tp __y, const _Tp __z)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__ellint_rj\fP (const _Tp __x, const _Tp __y, const _Tp __z, const _Tp __p)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_asymp\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_E1\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_E1_asymp\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_E1_series\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_Ei\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_Ei_asymp\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_Ei_series\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_En_cont_frac\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_En_recursion\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_En_series\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__expint_large_n\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__gamma\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__gamma_temme\fP (const _Tp __mu, _Tp &__gam1, _Tp &__gam2, _Tp &__gampl, _Tp &__gammi)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hurwitz_zeta\fP (const _Tp __a, const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hurwitz_zeta_glob\fP (const _Tp __a, const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hyperg\fP (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hyperg_luke\fP (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __xin)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hyperg_reflect\fP (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__hyperg_series\fP (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fB__isnan\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<> bool \fB__isnan< float >\fP (const float __x)"
.br
.ti -1c
.RI "template<> bool \fB__isnan< long double >\fP (const long double __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__laguerre\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__log_bincoef\fP (const unsigned int __n, const unsigned int __k)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__log_gamma\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__log_gamma_bernoulli\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__log_gamma_lanczos\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__log_gamma_sign\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__poly_hermite\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__poly_hermite_recursion\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tpa , typename _Tp > _Tp \fB__poly_laguerre\fP (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tpa , typename _Tp > _Tp \fB__poly_laguerre_hyperg\fP (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tpa , typename _Tp > _Tp \fB__poly_laguerre_large_n\fP (const unsigned __n, const _Tpa __alpha1, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tpa , typename _Tp > _Tp \fB__poly_laguerre_recursion\fP (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__poly_legendre_p\fP (const unsigned int __l, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__psi\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__psi\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__psi_asymp\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__psi_series\fP (const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__riemann_zeta\fP (const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__riemann_zeta_alt\fP (const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__riemann_zeta_glob\fP (const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__riemann_zeta_product\fP (const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__riemann_zeta_sum\fP (const _Tp __s)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__sph_bessel\fP (const unsigned int __n, const _Tp __x)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__sph_bessel_ik\fP (const unsigned int __n, const _Tp __x, _Tp &__i_n, _Tp &__k_n, _Tp &__ip_n, _Tp &__kp_n)"
.br
.ti -1c
.RI "template<typename _Tp > void \fB__sph_bessel_jn\fP (const unsigned int __n, const _Tp __x, _Tp &__j_n, _Tp &__n_n, _Tp &__jp_n, _Tp &__np_n)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__sph_legendre\fP (const unsigned int __l, const unsigned int __m, const _Tp __theta)"
.br
.ti -1c
.RI "template<typename _Tp > _Tp \fB__sph_neumann\fP (const unsigned int __n, const _Tp __x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Implementation details not part of the namespace \fBstd::tr1\fP interface. 
.PP
.SH "Function Documentation"
.PP 
.SS "template<typename _Tp > void std::tr1::__detail::__airy (const _Tp __x, _Tp & __Ai, _Tp & __Bi, _Tp & __Aip, _Tp & __Bip)\fC [inline]\fP"
.PP
Compute the Airy functions $ Ai(x) $ and $ Bi(x) $ and their first derivatives $ Ai'(x) $ and $ Bi(x) $ respectively. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Airy functions. 
.br
\fI__x\fP The argument of the Airy functions. 
.br
\fI__i_n\fP The output Airy function. 
.br
\fI__k_n\fP The output Airy function. 
.br
\fI__ip_n\fP The output derivative of the Airy function. 
.br
\fI__kp_n\fP The output derivative of the Airy function. 
.RE
.PP

.PP
Definition at line 370 of file modified_bessel_func.tcc.
.PP
References __bessel_ik(), __bessel_jn(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::tr1::__detail::__numeric_constants< _Tp >::__sqrt3(), std::abs(), and std::sqrt().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__assoc_laguerre (const unsigned int __n, const unsigned int __m, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the associated Laguerre polynomial of order n, degree m: $ L_n^m(x) $. 
.PP
The associated Laguerre polynomial is defined for integral $ \alpha = m $ by: \[ L_n^m(x) = (-1)^m \frac{d^m}{dx^m} L_{n + m}(x) \] where the Laguerre polynomial is defined by: \[ L_n(x) = \frac{e^x}{n!} \frac{d^n}{dx^n} (x^ne^{-x}) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Laguerre polynomial. 
.br
\fI__m\fP The degree of the Laguerre polynomial. 
.br
\fI__x\fP The argument of the Laguerre polynomial. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the associated Laguerre polynomial of order n, degree m, and argument x. 
.RE
.PP

.PP
Definition at line 297 of file poly_laguerre.tcc.
.SS "template<typename _Tp > _Tp std::tr1::__detail::__assoc_legendre_p (const unsigned int __l, const unsigned int __m, const _Tp __x)\fC [inline]\fP"
.PP
Return the associated Legendre function by recursion on $ l $. 
.PP
The associated Legendre function is derived from the Legendre function $ P_l(x) $ by the Rodrigues formula: \[ P_l^m(x) = (1 - x^2)^{m/2}\frac{d^m}{dx^m}P_l(x) \]
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The order of the associated Legendre function. $ l >= 0 $. 
.br
\fIm\fP The order of the associated Legendre function. $ m <= l $. 
.br
\fIx\fP The argument of the associated Legendre function. $ |x| <= 1 $. 
.RE
.PP

.PP
Definition at line 133 of file legendre_function.tcc.
.PP
References __poly_legendre_p(), and std::sqrt().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__bernoulli (const int __n)\fC [inline]\fP"
.PP
This returns Bernoulli number $B_n$. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP the order n of the Bernoulli number. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Bernoulli number of order n. 
.RE
.PP

.PP
Definition at line 133 of file gamma.tcc.
.SS "template<typename _Tp > _Tp std::tr1::__detail::__bernoulli_series (unsigned int __n)\fC [inline]\fP"
.PP
This returns Bernoulli numbers from a table or by summation for larger values. 
.PP
Recursion is unstable.
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP the order n of the Bernoulli number. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Bernoulli number of order n. 
.RE
.PP

.PP
Definition at line 70 of file gamma.tcc.
.PP
References std::pow().
.SS "template<typename _Tp > void std::tr1::__detail::__bessel_ik (const _Tp __nu, const _Tp __x, _Tp & __Inu, _Tp & __Knu, _Tp & __Ipnu, _Tp & __Kpnu)\fC [inline]\fP"
.PP
Compute the modified Bessel functions $ I_\nu(x) $ and $ K_\nu(x) $ and their first derivatives $ I'_\nu(x) $ and $ K'_\nu(x) $ respectively. These four functions are computed together for numerical stability. 
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Bessel functions. 
.br
\fI__x\fP The argument of the Bessel functions. 
.br
\fI__Inu\fP The output regular modified Bessel function. 
.br
\fI__Knu\fP The output irregular modified Bessel function. 
.br
\fI__Ipnu\fP The output derivative of the regular modified Bessel function. 
.br
\fI__Kpnu\fP The output derivative of the irregular modified Bessel function. 
.RE
.PP

.PP
Definition at line 81 of file modified_bessel_func.tcc.
.PP
References __gamma_temme(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::cosh(), std::exp(), std::log(), std::sin(), std::sinh(), and std::sqrt().
.PP
Referenced by __airy(), __cyl_bessel_i(), __cyl_bessel_k(), and __sph_bessel_ik().
.SS "template<typename _Tp > void std::tr1::__detail::__bessel_jn (const _Tp __nu, const _Tp __x, _Tp & __Jnu, _Tp & __Nnu, _Tp & __Jpnu, _Tp & __Npnu)\fC [inline]\fP"
.PP
Compute the Bessel $ J_\nu(x) $ and Neumann $ N_\nu(x) $ functions and their first derivatives $ J'_\nu(x) $ and $ N'_\nu(x) $ respectively. These four functions are computed together for numerical stability. 
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Bessel functions. 
.br
\fI__x\fP The argument of the Bessel functions. 
.br
\fI__Jnu\fP The output Bessel function of the first kind. 
.br
\fI__Nnu\fP The output Neumann function (Bessel function of the second kind). 
.br
\fI__Jpnu\fP The output derivative of the Bessel function of the first kind. 
.br
\fI__Npnu\fP The output derivative of the Neumann function. 
.RE
.PP

.PP
Definition at line 128 of file bessel_function.tcc.
.PP
References __gamma_temme(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::cosh(), std::exp(), std::log(), std::max(), std::sin(), std::sinh(), and std::sqrt().
.PP
Referenced by __airy(), __cyl_bessel_j(), __cyl_neumann_n(), and __sph_bessel_jn().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__beta (_Tp __x, _Tp __y)\fC [inline]\fP"
.PP
Return the beta function $ B(x,y) $. 
.PP
The beta function is defined by \[ B(x,y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first argument of the beta function. 
.br
\fI__y\fP The second argument of the beta function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The beta function. 
.RE
.PP

.PP
Definition at line 185 of file beta_function.tcc.
.PP
References __beta_lgamma().
.PP
Referenced by __ellint_rj().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__beta_gamma (_Tp __x, _Tp __y)\fC [inline]\fP"
.PP
Return the beta function: $B(x,y)$. 
.PP
The beta function is defined by \[ B(x,y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first argument of the beta function. 
.br
\fI__y\fP The second argument of the beta function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The beta function. 
.RE
.PP

.PP
Definition at line 75 of file beta_function.tcc.
.PP
References __gamma().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__beta_lgamma (_Tp __x, _Tp __y)\fC [inline]\fP"
.PP
Return the beta function $B(x,y)$ using the log gamma functions. 
.PP
The beta function is defined by \[ B(x,y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first argument of the beta function. 
.br
\fI__y\fP The second argument of the beta function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The beta function. 
.RE
.PP

.PP
Definition at line 123 of file beta_function.tcc.
.PP
References __log_gamma(), and std::exp().
.PP
Referenced by __beta().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__beta_product (_Tp __x, _Tp __y)\fC [inline]\fP"
.PP
Return the beta function $B(x,y)$ using the product form. 
.PP
The beta function is defined by \[ B(x,y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first argument of the beta function. 
.br
\fI__y\fP The second argument of the beta function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The beta function. 
.RE
.PP

.PP
Definition at line 154 of file beta_function.tcc.
.SS "template<typename _Tp > _Tp std::tr1::__detail::__bincoef (const unsigned int __n, const unsigned int __k)\fC [inline]\fP"
.PP
Return the binomial coefficient. The binomial coefficient is given by: \[ \left( \right) = \frac{n!}{(n-k)! k!} \]. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The first argument of the binomial coefficient. 
.br
\fI__k\fP The second argument of the binomial coefficient. 
.RE
.PP
\fBReturns:\fP
.RS 4
The binomial coefficient. 
.RE
.PP

.PP
Definition at line 310 of file gamma.tcc.
.PP
References std::exp(), and std::log().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__comp_ellint_1 (const _Tp __k)\fC [inline]\fP"
.PP
Return the complete elliptic integral of the first kind $ K(k) $ using the Carlson formulation. 
.PP
The complete elliptic integral of the first kind is defined as \[ K(k) = F(k,\pi/2) = \int_0^{\pi/2}\frac{d\theta} {\sqrt{1 - k^2 sin^2\theta}} \] where $ F(k,\phi) $ is the incomplete elliptic integral of the first kind.
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the complete elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The complete elliptic function of the first kind. 
.RE
.PP

.PP
Definition at line 191 of file ell_integral.tcc.
.PP
References __ellint_rf(), and std::abs().
.PP
Referenced by __ellint_1().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__comp_ellint_1_series (const _Tp __k)\fC [inline]\fP"
.PP
Return the complete elliptic integral of the first kind $ K(k) $ by series expansion. 
.PP
The complete elliptic integral of the first kind is defined as \[ K(k) = F(k,\pi/2) = \int_0^{\pi/2}\frac{d\theta} {\sqrt{1 - k^2sin^2\theta}} \]
.PP
This routine is not bad as long as |k| is somewhat smaller than 1 but is not is good as the Carlson elliptic integral formulation.
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the complete elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The complete elliptic function of the first kind. 
.RE
.PP

.PP
Definition at line 153 of file ell_integral.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__pi_2().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__comp_ellint_2 (const _Tp __k)\fC [inline]\fP"
.PP
Return the complete elliptic integral of the second kind $ E(k) $ using the Carlson formulation. 
.PP
The complete elliptic integral of the second kind is defined as \[ E(k,\pi/2) = \int_0^{\pi/2}\sqrt{1 - k^2 sin^2\theta} \]
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the complete elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The complete elliptic function of the second kind. 
.RE
.PP

.PP
Definition at line 402 of file ell_integral.tcc.
.PP
References __ellint_rd(), __ellint_rf(), and std::abs().
.PP
Referenced by __ellint_2().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__comp_ellint_2_series (const _Tp __k)\fC [inline]\fP"
.PP
Return the complete elliptic integral of the second kind $ E(k) $ by series expansion. 
.PP
The complete elliptic integral of the second kind is defined as \[ E(k,\pi/2) = \int_0^{\pi/2}\sqrt{1 - k^2 sin^2\theta} \]
.PP
This routine is not bad as long as |k| is somewhat smaller than 1 but is not is good as the Carlson elliptic integral formulation.
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the complete elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The complete elliptic function of the second kind. 
.RE
.PP

.PP
Definition at line 266 of file ell_integral.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__pi_2().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__comp_ellint_3 (const _Tp __k, const _Tp __nu)\fC [inline]\fP"
.PP
Return the complete elliptic integral of the third kind $ \Pi(k,\nu) = \Pi(k,\nu,\pi/2) $ using the Carlson formulation. 
.PP
The complete elliptic integral of the third kind is defined as \[ \Pi(k,\nu) = \int_0^{\pi/2} \frac{d\theta} {(1 - \nu \sin^2\theta)\sqrt{1 - k^2 \sin^2\theta}} \]
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the elliptic function. 
.br
\fI__nu\fP The second argument of the elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The complete elliptic function of the third kind. 
.RE
.PP

.PP
Definition at line 670 of file ell_integral.tcc.
.PP
References __ellint_rf(), __ellint_rj(), and std::abs().
.PP
Referenced by __ellint_3().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__conf_hyperg (const _Tp __a, const _Tp __c, const _Tp __x)\fC [inline]\fP"
.PP
Return the confluent hypogeometric function $ _1F_1(a;c;x) $. 
.PP
\fBTodo\fP
.RS 4
Handle b == nonpositive integer blowup - return NaN.
.RE
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP The 'numerator' parameter. 
.br
\fI__c\fP The 'denominator' parameter. 
.br
\fI__x\fP The argument of the confluent hypergeometric function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The confluent hypergeometric function. 
.RE
.PP

.PP
Definition at line 222 of file hypergeometric.tcc.
.PP
References __conf_hyperg_luke(), __conf_hyperg_series(), and std::exp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__conf_hyperg_luke (const _Tp __a, const _Tp __c, const _Tp __xin)\fC [inline]\fP"
.PP
Return the hypogeometric function $ _2F_1(a,b;c;x) $ by an iterative procedure described in Luke, Algorithms for the Computation of Mathematical Functions. 
.PP
Like the case of the 2F1 rational approximations, these are probably guaranteed to converge for x < 0, barring gross numerical instability in the pre-asymptotic regime. 
.PP
Definition at line 115 of file hypergeometric.tcc.
.PP
References std::abs(), and std::pow().
.PP
Referenced by __conf_hyperg().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__conf_hyperg_series (const _Tp __a, const _Tp __c, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the confluent hypergeometric function by series expansion. 
.PP
\[ _1F_1(a;c;x) = \frac{\Gamma(c)}{\Gamma(a)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)}{\Gamma(c+n)} \frac{x^n}{n!} \].PP
If a and b are integers and a < 0 and either b > 0 or b < a then the series is a polynomial with a finite number of terms. If b is an integer and b <= 0 the confluent hypergeometric function is undefined.
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP The 'numerator' parameter. 
.br
\fI__c\fP The 'denominator' parameter. 
.br
\fI__x\fP The argument of the confluent hypergeometric function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The confluent hypergeometric function. 
.RE
.PP

.PP
Definition at line 78 of file hypergeometric.tcc.
.PP
References std::abs().
.PP
Referenced by __conf_hyperg().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__cyl_bessel_i (const _Tp __nu, const _Tp __x)\fC [inline]\fP"
.PP
Return the regular modified Bessel function of order $ \nu $: $ I_{\nu}(x) $. 
.PP
The regular modified cylindrical Bessel function is: \[ I_{\nu}(x) = \sum_{k=0}^{\infty} \frac{(x/2)^{\nu + 2k}}{k!\Gamma(\nu+k+1)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the regular modified Bessel function. 
.br
\fI__x\fP The argument of the regular modified Bessel function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output regular modified Bessel function. 
.RE
.PP

.PP
Definition at line 265 of file modified_bessel_func.tcc.
.PP
References __bessel_ik(), and __cyl_bessel_ij_series().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__cyl_bessel_ij_series (const _Tp __nu, const _Tp __x, const _Tp __sgn, const unsigned int __max_iter)\fC [inline]\fP"
.PP
This routine returns the cylindrical Bessel functions of order $ \nu $: $ J_{\nu} $ or $ I_{\nu} $ by series expansion. 
.PP
The modified cylindrical Bessel function is: \[ Z_{\nu}(x) = \sum_{k=0}^{\infty} \frac{\sigma^k (x/2)^{\nu + 2k}}{k!\Gamma(\nu+k+1)} \] where $ \sigma = +1 $ or$ -1 $ for $ Z = I $ or $ J $ respectively.
.PP
See Abramowitz & Stegun, 9.1.10 Abramowitz & Stegun, 9.6.7 (1) Handbook of Mathematical Functions, ed. Milton Abramowitz and Irene A. Stegun, Dover Publications, Equation 9.1.10 p. 360 and Equation 9.6.10 p. 375
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Bessel function. 
.br
\fI__x\fP The argument of the Bessel function. 
.br
\fI__sgn\fP The sign of the alternate terms -1 for the Bessel function of the first kind. +1 for the modified Bessel function of the first kind. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output Bessel function. 
.RE
.PP

.PP
Definition at line 410 of file bessel_function.tcc.
.PP
References __log_gamma(), std::abs(), std::exp(), and std::log().
.PP
Referenced by __cyl_bessel_i(), and __cyl_bessel_j().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__cyl_bessel_j (const _Tp __nu, const _Tp __x)\fC [inline]\fP"
.PP
Return the Bessel function of order $ \nu $: $ J_{\nu}(x) $. 
.PP
The cylindrical Bessel function is: \[ J_{\nu}(x) = \sum_{k=0}^{\infty} \frac{(-1)^k (x/2)^{\nu + 2k}}{k!\Gamma(\nu+k+1)} \]
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Bessel function. 
.br
\fI__x\fP The argument of the Bessel function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output Bessel function. 
.RE
.PP

.PP
Definition at line 454 of file bessel_function.tcc.
.PP
References __bessel_jn(), __cyl_bessel_ij_series(), and __cyl_bessel_jn_asymp().
.SS "template<typename _Tp > void std::tr1::__detail::__cyl_bessel_jn_asymp (const _Tp __nu, const _Tp __x, _Tp & __Jnu, _Tp & __Nnu)\fC [inline]\fP"
.PP
This routine computes the asymptotic cylindrical Bessel and Neumann functions of order nu: $ J_{\nu} $, $ N_{\nu} $. 
.PP
References: (1) Handbook of Mathematical Functions, ed. Milton Abramowitz and Irene A. Stegun, Dover Publications, Section 9 p. 364, Equations 9.2.5-9.2.10
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Bessel functions. 
.br
\fI__x\fP The argument of the Bessel functions. 
.br
\fI__Jnu\fP The output Bessel function of the first kind. 
.br
\fI__Nnu\fP The output Neumann function (Bessel function of the second kind). 
.RE
.PP

.PP
Definition at line 353 of file bessel_function.tcc.
.PP
References std::cos(), std::sin(), and std::sqrt().
.PP
Referenced by __cyl_bessel_j(), and __cyl_neumann_n().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__cyl_bessel_k (const _Tp __nu, const _Tp __x)\fC [inline]\fP"
.PP
Return the irregular modified Bessel function $ K_{\nu}(x) $ of order $ \nu $. 
.PP
The irregular modified Bessel function is defined by: \[ K_{\nu}(x) = \frac{\pi}{2} \frac{I_{-\nu}(x) - I_{\nu}(x)}{\sin \nu\pi} \] where for integral $ \nu = n $ a limit is taken: $ lim_{\nu \to n} $.
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the irregular modified Bessel function. 
.br
\fI__x\fP The argument of the irregular modified Bessel function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output irregular modified Bessel function. 
.RE
.PP

.PP
Definition at line 301 of file modified_bessel_func.tcc.
.PP
References __bessel_ik().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__cyl_neumann_n (const _Tp __nu, const _Tp __x)\fC [inline]\fP"
.PP
Return the Neumann function of order $ \nu $: $ N_{\nu}(x) $. 
.PP
The Neumann function is defined by: \[ N_{\nu}(x) = \frac{J_{\nu}(x) \cos \nu\pi - J_{-\nu}(x)} {\sin \nu\pi} \] where for integral $ \nu = n $ a limit is taken: $ lim_{\nu \to n} $.
.PP
\fBParameters:\fP
.RS 4
\fI__nu\fP The order of the Neumann function. 
.br
\fI__x\fP The argument of the Neumann function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output Neumann function. 
.RE
.PP

.PP
Definition at line 496 of file bessel_function.tcc.
.PP
References __bessel_jn(), and __cyl_bessel_jn_asymp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_1 (const _Tp __k, const _Tp __phi)\fC [inline]\fP"
.PP
Return the incomplete elliptic integral of the first kind $ F(k,\phi) $ using the Carlson formulation. 
.PP
The incomplete elliptic integral of the first kind is defined as \[ F(k,\phi) = \int_0^{\phi}\frac{d\theta} {\sqrt{1 - k^2 sin^2\theta}} \]
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the elliptic function. 
.br
\fI__phi\fP The integral limit argument of the elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The elliptic function of the first kind. 
.RE
.PP

.PP
Definition at line 219 of file ell_integral.tcc.
.PP
References __comp_ellint_1(), __ellint_rf(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::cos(), and std::sin().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_2 (const _Tp __k, const _Tp __phi)\fC [inline]\fP"
.PP
Return the incomplete elliptic integral of the second kind $ E(k,\phi) $ using the Carlson formulation. 
.PP
The incomplete elliptic integral of the second kind is defined as \[ E(k,\phi) = \int_0^{\phi} \sqrt{1 - k^2 sin^2\theta} \]
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the elliptic function. 
.br
\fI__phi\fP The integral limit argument of the elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The elliptic function of the second kind. 
.RE
.PP

.PP
Definition at line 436 of file ell_integral.tcc.
.PP
References __comp_ellint_2(), __ellint_rd(), __ellint_rf(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::cos(), and std::sin().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_3 (const _Tp __k, const _Tp __nu, const _Tp __phi)\fC [inline]\fP"
.PP
Return the incomplete elliptic integral of the third kind $ \Pi(k,\nu,\phi) $ using the Carlson formulation. 
.PP
The incomplete elliptic integral of the third kind is defined as \[ \Pi(k,\nu,\phi) = \int_0^{\phi} \frac{d\theta} {(1 - \nu \sin^2\theta) \sqrt{1 - k^2 \sin^2\theta}} \]
.PP
\fBParameters:\fP
.RS 4
\fI__k\fP The argument of the elliptic function. 
.br
\fI__nu\fP The second argument of the elliptic function. 
.br
\fI__phi\fP The integral limit argument of the elliptic function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The elliptic function of the third kind. 
.RE
.PP

.PP
Definition at line 710 of file ell_integral.tcc.
.PP
References __comp_ellint_3(), __ellint_rf(), __ellint_rj(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::cos(), and std::sin().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_rc (const _Tp __x, const _Tp __y)\fC [inline]\fP"
.PP
Return the Carlson elliptic function $ R_C(x,y) = R_F(x,y,y) $ where $ R_F(x,y,z) $ is the Carlson elliptic function of the first kind. 
.PP
The Carlson elliptic function is defined by: \[ R_C(x,y) = \frac{1}{2} \int_0^\infty \frac{dt}{(t + x)^{1/2}(t + y)} \]
.PP
Based on Carlson's algorithms:
.IP "\(bu" 2
B. C. Carlson Numer. Math. 33, 1 (1979)
.IP "\(bu" 2
B. C. Carlson, Special Functions of Applied Mathematics (1977)
.IP "\(bu" 2
Numerical Recipes in C, 2nd ed, pp. 261-269, by Press, Teukolsky, Vetterling, Flannery (1992)
.PP
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first argument. 
.br
\fI__y\fP The second argument. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Carlson elliptic function. 
.RE
.PP

.PP
Definition at line 495 of file ell_integral.tcc.
.PP
References std::abs(), std::max(), std::min(), std::pow(), and std::sqrt().
.PP
Referenced by __ellint_rj().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_rd (const _Tp __x, const _Tp __y, const _Tp __z)\fC [inline]\fP"
.PP
Return the Carlson elliptic function of the second kind $ R_D(x,y,z) = R_J(x,y,z,z) $ where $ R_J(x,y,z,p) $ is the Carlson elliptic function of the third kind. 
.PP
The Carlson elliptic function of the second kind is defined by: \[ R_D(x,y,z) = \frac{3}{2} \int_0^\infty \frac{dt}{(t + x)^{1/2}(t + y)^{1/2}(t + z)^{3/2}} \]
.PP
Based on Carlson's algorithms:
.IP "\(bu" 2
B. C. Carlson Numer. Math. 33, 1 (1979)
.IP "\(bu" 2
B. C. Carlson, Special Functions of Applied Mathematics (1977)
.IP "\(bu" 2
Numerical Recipes in C, 2nd ed, pp. 261-269, by Press, Teukolsky, Vetterling, Flannery (1992)
.PP
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first of two symmetric arguments. 
.br
\fI__y\fP The second of two symmetric arguments. 
.br
\fI__z\fP The third argument. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Carlson elliptic function of the second kind. 
.RE
.PP

.PP
Definition at line 314 of file ell_integral.tcc.
.PP
References std::abs(), std::max(), std::min(), std::pow(), and std::sqrt().
.PP
Referenced by __comp_ellint_2(), and __ellint_2().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_rf (const _Tp __x, const _Tp __y, const _Tp __z)\fC [inline]\fP"
.PP
Return the Carlson elliptic function $ R_F(x,y,z) $ of the first kind. 
.PP
The Carlson elliptic function of the first kind is defined by: \[ R_F(x,y,z) = \frac{1}{2} \int_0^\infty \frac{dt}{(t + x)^{1/2}(t + y)^{1/2}(t + z)^{1/2}} \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first of three symmetric arguments. 
.br
\fI__y\fP The second of three symmetric arguments. 
.br
\fI__z\fP The third of three symmetric arguments. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Carlson elliptic function of the first kind. 
.RE
.PP

.PP
Definition at line 74 of file ell_integral.tcc.
.PP
References std::abs(), std::max(), std::min(), std::pow(), and std::sqrt().
.PP
Referenced by __comp_ellint_1(), __comp_ellint_2(), __comp_ellint_3(), __ellint_1(), __ellint_2(), and __ellint_3().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__ellint_rj (const _Tp __x, const _Tp __y, const _Tp __z, const _Tp __p)\fC [inline]\fP"
.PP
Return the Carlson elliptic function $ R_J(x,y,z,p) $ of the third kind. 
.PP
The Carlson elliptic function of the third kind is defined by: \[ R_J(x,y,z,p) = \frac{3}{2} \int_0^\infty \frac{dt}{(t + x)^{1/2}(t + y)^{1/2}(t + z)^{1/2}(t + p)} \]
.PP
Based on Carlson's algorithms:
.IP "\(bu" 2
B. C. Carlson Numer. Math. 33, 1 (1979)
.IP "\(bu" 2
B. C. Carlson, Special Functions of Applied Mathematics (1977)
.IP "\(bu" 2
Numerical Recipes in C, 2nd ed, pp. 261-269, by Press, Teukolsky, Vetterling, Flannery (1992)
.PP
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The first of three symmetric arguments. 
.br
\fI__y\fP The second of three symmetric arguments. 
.br
\fI__z\fP The third of three symmetric arguments. 
.br
\fI__p\fP The fourth argument. 
.RE
.PP
\fBReturns:\fP
.RS 4
The Carlson elliptic function of the fourth kind. 
.RE
.PP

.PP
Definition at line 566 of file ell_integral.tcc.
.PP
References __beta(), __ellint_rc(), std::abs(), std::max(), std::min(), std::pow(), and std::sqrt().
.PP
Referenced by __comp_ellint_3(), and __ellint_3().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ Ei(x) $. 
.PP
The exponential integral is given by \[ Ei(x) = -\int_{-x}^\infty \frac{e^t}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 512 of file exp_integral.tcc.
.PP
References __expint_Ei().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \] This is something of an extension.
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 472 of file exp_integral.tcc.
.PP
References __expint_E1(), __expint_En_recursion(), and std::exp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_asymp (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $ for large argument. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \]
.PP
This is something of an extension.
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 404 of file exp_integral.tcc.
.PP
References std::abs(), and std::exp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_E1 (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_1(x) $. 
.PP
The exponential integral is given by \[ E_1(x) = \int_{1}^\infty \frac{e^{-xt}}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 374 of file exp_integral.tcc.
.PP
References __expint_E1_asymp(), __expint_E1_series(), __expint_Ei(), and __expint_En_cont_frac().
.PP
Referenced by __expint(), __expint_Ei(), and __expint_En_recursion().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_E1_asymp (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_1(x) $ by asymptotic expansion. 
.PP
The exponential integral is given by \[ E_1(x) = \int_{1}^\infty \frac{e^{-xt}}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 114 of file exp_integral.tcc.
.PP
References std::abs(), and std::exp().
.PP
Referenced by __expint_E1().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_E1_series (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_1(x) $ by series summation. This should be good for $ x < 1 $. 
.PP
The exponential integral is given by \[ E_1(x) = \int_{1}^{\infty} \frac{e^{-xt}}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 77 of file exp_integral.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__gamma_e(), std::abs(), and std::log().
.PP
Referenced by __expint_E1().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_Ei (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ Ei(x) $. 
.PP
The exponential integral is given by \[ Ei(x) = -\int_{-x}^\infty \frac{e^t}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 350 of file exp_integral.tcc.
.PP
References __expint_E1(), __expint_Ei_asymp(), __expint_Ei_series(), and std::log().
.PP
Referenced by __expint(), and __expint_E1().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_Ei_asymp (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ Ei(x) $ by asymptotic expansion. 
.PP
The exponential integral is given by \[ Ei(x) = -\int_{-x}^\infty \frac{e^t}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 317 of file exp_integral.tcc.
.PP
References std::exp().
.PP
Referenced by __expint_Ei().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_Ei_series (const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ Ei(x) $ by series summation. 
.PP
The exponential integral is given by \[ Ei(x) = -\int_{-x}^\infty \frac{e^t}{t} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 286 of file exp_integral.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__gamma_e(), and std::log().
.PP
Referenced by __expint_Ei().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_En_cont_frac (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $ by continued fractions. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 197 of file exp_integral.tcc.
.PP
References std::abs(), std::exp(), and std::min().
.PP
Referenced by __expint_E1().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_En_recursion (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $ by recursion. Use upward recursion for $ x < n $ and downward recursion (Miller's algorithm) otherwise. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 242 of file exp_integral.tcc.
.PP
References __expint_E1(), and std::exp().
.PP
Referenced by __expint().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_En_series (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $ by series summation. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 151 of file exp_integral.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__gamma_e(), __psi(), std::abs(), and std::log().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__expint_large_n (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the exponential integral $ E_n(x) $ for large order. 
.PP
The exponential integral is given by \[ E_n(x) = \int_{1}^\infty \frac{e^{-xt}}{t^n} dt \]
.PP
This is something of an extension.
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the exponential integral function. 
.br
\fI__x\fP The argument of the exponential integral function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The exponential integral. 
.RE
.PP

.PP
Definition at line 438 of file exp_integral.tcc.
.PP
References std::abs(), and std::exp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__gamma (const _Tp __x)\fC [inline]\fP"
.PP
Return $ \Gamma(x) $. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the gamma function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The gamma function. 
.RE
.PP

.PP
Definition at line 333 of file gamma.tcc.
.PP
References __log_gamma(), and std::exp().
.PP
Referenced by __beta_gamma(), and __gamma_temme().
.SS "template<typename _Tp > void std::tr1::__detail::__gamma_temme (const _Tp __mu, _Tp & __gam1, _Tp & __gam2, _Tp & __gampl, _Tp & __gammi)\fC [inline]\fP"
.PP
Compute the gamma functions required by the Temme series expansions of $ N_\nu(x) $ and $ K_\nu(x) $. \[ \Gamma_1 = \frac{1}{2\mu} [\frac{1}{\Gamma(1 - \mu)} - \frac{1}{\Gamma(1 + \mu)}] \] and \[ \Gamma_2 = \frac{1}{2} [\frac{1}{\Gamma(1 - \mu)} + \frac{1}{\Gamma(1 + \mu)}] \] where $ -1/2 <= \mu <= 1/2 $ is $ \mu = \nu - N $ and $ N $. is the nearest integer to $ \nu $. The values of $ \Gamma(1 + \mu) $ and $ \Gamma(1 - \mu) $ are returned as well. 
.PP
The accuracy requirements on this are exquisite.
.PP
\fBParameters:\fP
.RS 4
\fI__mu\fP The input parameter of the gamma functions. 
.br
\fI__gam1\fP The output function $ \Gamma_1(\mu) $ 
.br
\fI__gam2\fP The output function $ \Gamma_2(\mu) $ 
.br
\fI__gampl\fP The output function $ \Gamma(1 + \mu) $ 
.br
\fI__gammi\fP The output function $ \Gamma(1 - \mu) $ 
.RE
.PP

.PP
Definition at line 90 of file bessel_function.tcc.
.PP
References __gamma(), and std::abs().
.PP
Referenced by __bessel_ik(), and __bessel_jn().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hurwitz_zeta (const _Tp __a, const _Tp __s)\fC [inline]\fP"
.PP
Return the Hurwitz zeta function $ \zeta(x,s) $ for all s != 1 and x > -1. 
.PP
The Hurwitz zeta function is defined by: \[ \zeta(x,s) = \sum_{n=0}^{\infty} \frac{1}{(n + x)^s} \] The Riemann zeta function is a special case: \[ \zeta(s) = \zeta(1,s) \] 
.PP
Definition at line 426 of file riemann_zeta.tcc.
.PP
References __hurwitz_zeta_glob().
.PP
Referenced by __psi().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hurwitz_zeta_glob (const _Tp __a, const _Tp __s)\fC [inline]\fP"
.PP
Return the Hurwitz zeta function $ \zeta(x,s) $ for all s != 1 and x > -1. 
.PP
The Hurwitz zeta function is defined by: \[ \zeta(x,s) = \sum_{n=0}^{\infty} \frac{1}{(n + x)^s} \] The Riemann zeta function is a special case: \[ \zeta(s) = \zeta(1,s) \]
.PP
This functions uses the double sum that converges for s != 1 and x > -1: \[ \zeta(x,s) = \frac{1}{s-1} \sum_{n=0}^{\infty} \frac{1}{n + 1} \sum_{k=0}^{n} (-1)^k \frac{n!}{(n-k)!k!} (x+k)^{-s} \] 
.PP
Definition at line 361 of file riemann_zeta.tcc.
.PP
References __log_gamma(), std::abs(), std::exp(), std::log(), and std::pow().
.PP
Referenced by __hurwitz_zeta().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hyperg (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)\fC [inline]\fP"
.PP
Return the hypogeometric function $ _2F_1(a,b;c;x) $. 
.PP
The hypogeometric function is defined by \[ _2F_1(a,b;c;x) = \frac{\Gamma(c)}{\Gamma(a)\Gamma(b)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)\Gamma(b+n)}{\Gamma(c+n)} \frac{x^n}{n!} \]
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP The first 'numerator' parameter. 
.br
\fI__a\fP The second 'numerator' parameter. 
.br
\fI__c\fP The 'denominator' parameter. 
.br
\fI__x\fP The argument of the confluent hypergeometric function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The confluent hypergeometric function. 
.RE
.PP

.PP
Definition at line 724 of file hypergeometric.tcc.
.PP
References __hyperg_luke(), __hyperg_reflect(), __hyperg_series(), std::abs(), and std::pow().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hyperg_luke (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __xin)\fC [inline]\fP"
.PP
Return the hypogeometric function $ _2F_1(a,b;c;x) $ by an iterative procedure described in Luke, Algorithms for the Computation of Mathematical Functions. 
.PP
Definition at line 300 of file hypergeometric.tcc.
.PP
References std::abs(), and std::pow().
.PP
Referenced by __hyperg().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hyperg_reflect (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)\fC [inline]\fP"
.PP
Return the hypogeometric function $ _2F_1(a,b;c;x) $ by the reflection formulae in Abramowitz & Stegun formula 15.3.6 for d = c - a - b not integral and formula 15.3.11 for d = c - a - b integral. This assumes a, b, c != negative integer. 
.PP
The hypogeometric function is defined by \[ _2F_1(a,b;c;x) = \frac{\Gamma(c)}{\Gamma(a)\Gamma(b)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)\Gamma(b+n)}{\Gamma(c+n)} \frac{x^n}{n!} \]
.PP
The reflection formula for nonintegral $ d = c - a - b $ is: \[ _2F_1(a,b;c;x) = \frac{\Gamma(c)\Gamma(d)}{\Gamma(c-a)\Gamma(c-b)} _2F_1(a,b;1-d;1-x) + \frac{\Gamma(c)\Gamma(-d)}{\Gamma(a)\Gamma(b)} _2F_1(c-a,c-b;1+d;1-x) \]
.PP
The reflection formula for integral $ m = c - a - b $ is: \[ _2F_1(a,b;a+b+m;x) = \frac{\Gamma(m)\Gamma(a+b+m)}{\Gamma(a+m)\Gamma(b+m)} \sum_{k=0}^{m-1} \frac{(m+a)_k(m+b)_k}{k!(1-m)_k} - \] 
.PP
Definition at line 434 of file hypergeometric.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__gamma_e(), __hyperg_series(), __log_gamma(), __log_gamma_sign(), __psi(), std::abs(), std::exp(), and std::log().
.PP
Referenced by __hyperg().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__hyperg_series (const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)\fC [inline]\fP"
.PP
Return the hypogeometric function $ _2F_1(a,b;c;x) $ by series expansion. 
.PP
The hypogeometric function is defined by \[ _2F_1(a,b;c;x) = \frac{\Gamma(c)}{\Gamma(a)\Gamma(b)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)\Gamma(b+n)}{\Gamma(c+n)} \frac{x^n}{n!} \]
.PP
This works and it's pretty fast.
.PP
\fBParameters:\fP
.RS 4
\fI__a\fP The first 'numerator' parameter. 
.br
\fI__a\fP The second 'numerator' parameter. 
.br
\fI__c\fP The 'denominator' parameter. 
.br
\fI__x\fP The argument of the confluent hypergeometric function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The confluent hypergeometric function. 
.RE
.PP

.PP
Definition at line 266 of file hypergeometric.tcc.
.PP
References std::abs().
.PP
Referenced by __hyperg(), and __hyperg_reflect().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__laguerre (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the Laguerre polynomial of order n: $ L_n(x) $. 
.PP
The Laguerre polynomial is defined by: \[ L_n(x) = \frac{e^x}{n!} \frac{d^n}{dx^n} (x^ne^{-x}) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Laguerre polynomial. 
.br
\fI__x\fP The argument of the Laguerre polynomial. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Laguerre polynomial of order n and argument x. 
.RE
.PP

.PP
Definition at line 320 of file poly_laguerre.tcc.
.SS "template<typename _Tp > _Tp std::tr1::__detail::__log_bincoef (const unsigned int __n, const unsigned int __k)\fC [inline]\fP"
.PP
Return the logarithm of the binomial coefficient. The binomial coefficient is given by: \[ \left( \right) = \frac{n!}{(n-k)! k!} \]. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The first argument of the binomial coefficient. 
.br
\fI__k\fP The second argument of the binomial coefficient. 
.RE
.PP
\fBReturns:\fP
.RS 4
The binomial coefficient. 
.RE
.PP

.PP
Definition at line 279 of file gamma.tcc.
.PP
References __log_gamma(), and std::log().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__log_gamma (const _Tp __x)\fC [inline]\fP"
.PP
Return $ log(|\Gamma(x)|) $. This will return values even for $ x < 0 $. To recover the sign of $ \Gamma(x) $ for any argument use \fI__log_gamma_sign\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the log of the gamma function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The logarithm of the gamma function. 
.RE
.PP

.PP
Definition at line 221 of file gamma.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__lnpi(), __log_gamma_lanczos(), std::abs(), std::log(), and std::sin().
.PP
Referenced by __beta_lgamma(), __cyl_bessel_ij_series(), __gamma(), __hurwitz_zeta_glob(), __hyperg_reflect(), __log_bincoef(), __poly_laguerre_large_n(), __psi(), __riemann_zeta(), __riemann_zeta_glob(), and __sph_legendre().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__log_gamma_bernoulli (const _Tp __x)\fC [inline]\fP"
.PP
Return $log(\Gamma(x))$ by asymptotic expansion with Bernoulli number coefficients. This is like Sterling's approximation. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the log of the gamma function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The logarithm of the gamma function. 
.RE
.PP

.PP
Definition at line 149 of file gamma.tcc.
.PP
References std::__lg(), and std::log().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__log_gamma_lanczos (const _Tp __x)\fC [inline]\fP"
.PP
Return $log(\Gamma(x))$ by the Lanczos method. This method dominates all others on the positive axis I think. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the log of the gamma function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The logarithm of the gamma function. 
.RE
.PP

.PP
Definition at line 177 of file gamma.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__euler(), and std::log().
.PP
Referenced by __log_gamma().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__log_gamma_sign (const _Tp __x)\fC [inline]\fP"
.PP
Return the sign of $ \Gamma(x) $. At nonpositive integers zero is returned. 
.PP
\fBParameters:\fP
.RS 4
\fI__x\fP The argument of the gamma function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The sign of the gamma function. 
.RE
.PP

.PP
Definition at line 248 of file gamma.tcc.
.PP
References std::sin().
.PP
Referenced by __hyperg_reflect().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__poly_hermite (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the Hermite polynomial of order n: $ H_n(x) $. 
.PP
The Hermite polynomial is defined by: \[ H_n(x) = (-1)^n e^{x^2} \frac{d^n}{dx^n} e^{-x^2} \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Hermite polynomial. 
.br
\fI__x\fP The argument of the Hermite polynomial. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Hermite polynomial of order n and argument x. 
.RE
.PP

.PP
Definition at line 112 of file poly_hermite.tcc.
.PP
References __poly_hermite_recursion().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__poly_hermite_recursion (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the Hermite polynomial of order n: $ H_n(x) $ by recursion on n. 
.PP
The Hermite polynomial is defined by: \[ H_n(x) = (-1)^n e^{x^2} \frac{d^n}{dx^n} e^{-x^2} \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Hermite polynomial. 
.br
\fI__x\fP The argument of the Hermite polynomial. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Hermite polynomial of order n and argument x. 
.RE
.PP

.PP
Definition at line 70 of file poly_hermite.tcc.
.PP
Referenced by __poly_hermite().
.SS "template<typename _Tpa , typename _Tp > _Tp std::tr1::__detail::__poly_laguerre (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the associated Laguerre polynomial of order n, degree $ \alpha $: $ L_n^alpha(x) $. 
.PP
The associated Laguerre function is defined by \[ L_n^\alpha(x) = \frac{(\alpha + 1)_n}{n!} _1F_1(-n; \alpha + 1; x) \] where $ (\alpha)_n $ is the Pochhammer symbol and $ _1F_1(a; c; x) $ is the confluent hypergeometric function.
.PP
The associated Laguerre polynomial is defined for integral $ \alpha = m $ by: \[ L_n^m(x) = (-1)^m \frac{d^m}{dx^m} L_{n + m}(x) \] where the Laguerre polynomial is defined by: \[ L_n(x) = \frac{e^x}{n!} \frac{d^n}{dx^n} (x^ne^{-x}) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Laguerre function. 
.br
\fI__alpha\fP The degree of the Laguerre function. 
.br
\fI__x\fP The argument of the Laguerre function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Laguerre function of order n, degree $ \alpha $, and argument x. 
.RE
.PP

.PP
Definition at line 244 of file poly_laguerre.tcc.
.PP
References __poly_laguerre_hyperg(), __poly_laguerre_large_n(), and __poly_laguerre_recursion().
.SS "template<typename _Tpa , typename _Tp > _Tp std::tr1::__detail::__poly_laguerre_hyperg (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)\fC [inline]\fP"
.PP
Evaluate the polynomial based on the confluent hypergeometric function in a safe way, with no restriction on the arguments. 
.PP
The associated Laguerre function is defined by \[ L_n^\alpha(x) = \frac{(\alpha + 1)_n}{n!} _1F_1(-n; \alpha + 1; x) \] where $ (\alpha)_n $ is the Pochhammer symbol and $ _1F_1(a; c; x) $ is the confluent hypergeometric function.
.PP
This function assumes x != 0.
.PP
This is from the GNU Scientific Library. 
.PP
Definition at line 127 of file poly_laguerre.tcc.
.PP
References std::abs().
.PP
Referenced by __poly_laguerre().
.SS "template<typename _Tpa , typename _Tp > _Tp std::tr1::__detail::__poly_laguerre_large_n (const unsigned __n, const _Tpa __alpha1, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the associated Laguerre polynomial of order $ n $, degree $ \alpha $ for large n. Abramowitz & Stegun, 13.5.21. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Laguerre function. 
.br
\fI__alpha\fP The degree of the Laguerre function. 
.br
\fI__x\fP The argument of the Laguerre function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Laguerre function of order n, degree $ \alpha $, and argument x.
.RE
.PP
This is from the GNU Scientific Library. 
.PP
Definition at line 72 of file poly_laguerre.tcc.
.PP
References __log_gamma(), std::tr1::__detail::__numeric_constants< _Tp >::__pi_2(), std::exp(), std::log(), std::sin(), and std::sqrt().
.PP
Referenced by __poly_laguerre().
.SS "template<typename _Tpa , typename _Tp > _Tp std::tr1::__detail::__poly_laguerre_recursion (const unsigned int __n, const _Tpa __alpha1, const _Tp __x)\fC [inline]\fP"
.PP
This routine returns the associated Laguerre polynomial of order $ n $, degree $ \alpha $: $ L_n^\alpha(x) $ by recursion. 
.PP
The associated Laguerre function is defined by \[ L_n^\alpha(x) = \frac{(\alpha + 1)_n}{n!} _1F_1(-n; \alpha + 1; x) \] where $ (\alpha)_n $ is the Pochhammer symbol and $ _1F_1(a; c; x) $ is the confluent hypergeometric function.
.PP
The associated Laguerre polynomial is defined for integral $ \alpha = m $ by: \[ L_n^m(x) = (-1)^m \frac{d^m}{dx^m} L_{n + m}(x) \] where the Laguerre polynomial is defined by: \[ L_n(x) = \frac{e^x}{n!} \frac{d^n}{dx^n} (x^ne^{-x}) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the Laguerre function. 
.br
\fI__alpha\fP The degree of the Laguerre function. 
.br
\fI__x\fP The argument of the Laguerre function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the Laguerre function of order n, degree $ \alpha $, and argument x. 
.RE
.PP

.PP
Definition at line 184 of file poly_laguerre.tcc.
.PP
Referenced by __poly_laguerre().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__poly_legendre_p (const unsigned int __l, const _Tp __x)\fC [inline]\fP"
.PP
Return the Legendre polynomial by recursion on order $ l $. 
.PP
The Legendre function of $ l $ and $ x $, $ P_l(x) $, is defined by: \[ P_l(x) = \frac{1}{2^l l!}\frac{d^l}{dx^l}(x^2 - 1)^{l} \]
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The order of the Legendre polynomial. $l >= 0$. 
.br
\fIx\fP The argument of the Legendre polynomial. $|x| <= 1$. 
.RE
.PP

.PP
Definition at line 76 of file legendre_function.tcc.
.PP
Referenced by __assoc_legendre_p(), and __sph_legendre().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__psi (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the polygamma function $ \psi^{(n)}(x) $. 
.PP
The polygamma function is related to the Hurwitz zeta function: \[ \psi^{(n)}(x) = (-1)^{n+1} m! \zeta(m+1,x) \] 
.PP
Definition at line 444 of file gamma.tcc.
.PP
References __hurwitz_zeta(), __log_gamma(), __psi(), and std::exp().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__psi (const _Tp __x)\fC [inline]\fP"
.PP
Return the digamma function. The digamma or $ \psi(x) $ function is defined by \[ \psi(x) = \frac{\Gamma'(x)}{\Gamma(x)} \] For negative argument the reflection formula is used: \[ \psi(x) = \psi(1-x) - \pi \cot(\pi x) \]. 
.PP
Definition at line 415 of file gamma.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__pi(), __psi_asymp(), __psi_series(), std::abs(), std::cos(), and std::sin().
.PP
Referenced by __expint_En_series(), __hyperg_reflect(), and __psi().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__psi_asymp (const _Tp __x)\fC [inline]\fP"
.PP
Return the digamma function for large argument. The digamma or $ \psi(x) $ function is defined by \[ \psi(x) = \frac{\Gamma'(x)}{\Gamma(x)} \]. 
.PP
The asymptotic series is given by: \[ \psi(x) = \ln(x) - \frac{1}{2x} - \sum_{n=1}^{\infty} \frac{B_{2n}}{2 n x^{2n}} \] 
.PP
Definition at line 384 of file gamma.tcc.
.PP
References std::abs(), and std::log().
.PP
Referenced by __psi().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__psi_series (const _Tp __x)\fC [inline]\fP"
.PP
Return the digamma function by series expansion. The digamma or $ \psi(x) $ function is defined by \[ \psi(x) = \frac{\Gamma'(x)}{\Gamma(x)} \]. 
.PP
The series is given by: \[ \psi(x) = -\gamma_E - \frac{1}{x} \sum_{k=1}^{\infty} \frac{x}{k(x + k)} \] 
.PP
Definition at line 354 of file gamma.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__gamma_e(), and std::abs().
.PP
Referenced by __psi().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__riemann_zeta (const _Tp __s)\fC [inline]\fP"
.PP
Return the Riemann zeta function $ \zeta(s) $. 
.PP
The Riemann zeta function is defined by: \[ \zeta(s) = \sum_{k=1}^{\infty} k^{-s} for s > 1 \frac{(2\pi)^s}{pi} sin(\frac{\pi s}{2}) \Gamma (1 - s) \zeta (1 - s) for s < 1 \] For s < 1 use the reflection formula: \[ \zeta(s) = 2^s \pi^{s-1} \Gamma(1-s) \zeta(1-s) \] 
.PP
Definition at line 289 of file riemann_zeta.tcc.
.PP
References __log_gamma(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), __riemann_zeta_glob(), __riemann_zeta_product(), __riemann_zeta_sum(), std::exp(), std::pow(), and std::sin().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__riemann_zeta_alt (const _Tp __s)\fC [inline]\fP"
.PP
Evaluate the Riemann zeta function $ \zeta(s) $ by an alternate series for s > 0. 
.PP
The Riemann zeta function is defined by: \[ \zeta(s) = \sum_{k=1}^{\infty} \frac{1}{k^{s}} for s > 1 \] For s < 1 use the reflection formula: \[ \zeta(s) = 2^s \pi^{s-1} \Gamma(1-s) \zeta(1-s) \] 
.PP
Definition at line 111 of file riemann_zeta.tcc.
.PP
References std::abs(), and std::pow().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__riemann_zeta_glob (const _Tp __s)\fC [inline]\fP"
.PP
Evaluate the Riemann zeta function by series for all s != 1. Convergence is great until largish negative numbers. Then the convergence of the > 0 sum gets better. 
.PP
The series is: \[ \zeta(s) = \frac{1}{1-2^{1-s}} \sum_{n=0}^{\infty} \frac{1}{2^{n+1}} \sum_{k=0}^{n} (-1)^k \frac{n!}{(n-k)!k!} (k+1)^{-s} \] Havil 2003, p. 206.
.PP
The Riemann zeta function is defined by: \[ \zeta(s) = \sum_{k=1}^{\infty} \frac{1}{k^{s}} for s > 1 \] For s < 1 use the reflection formula: \[ \zeta(s) = 2^s \pi^{s-1} \Gamma(1-s) \zeta(1-s) \] 
.PP
Definition at line 153 of file riemann_zeta.tcc.
.PP
References __log_gamma(), std::tr1::__detail::__numeric_constants< _Tp >::__pi(), std::abs(), std::exp(), std::log(), std::pow(), and std::sin().
.PP
Referenced by __riemann_zeta().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__riemann_zeta_product (const _Tp __s)\fC [inline]\fP"
.PP
Compute the Riemann zeta function $ \zeta(s) $ using the product over prime factors. \[ \zeta(s) = \Pi_{i=1}^\infty \frac{1}{1 - p_i^{-s}} \] where $ {p_i} $ are the prime numbers. 
.PP
The Riemann zeta function is defined by: \[ \zeta(s) = \sum_{k=1}^{\infty} \frac{1}{k^{s}} for s > 1 \] For s < 1 use the reflection formula: \[ \zeta(s) = 2^s \pi^{s-1} \Gamma(1-s) \zeta(1-s) \] 
.PP
Definition at line 248 of file riemann_zeta.tcc.
.PP
References std::pow().
.PP
Referenced by __riemann_zeta().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__riemann_zeta_sum (const _Tp __s)\fC [inline]\fP"
.PP
Compute the Riemann zeta function $ \zeta(s) $ by summation for s > 1. 
.PP
The Riemann zeta function is defined by: \[ \zeta(s) = \sum_{k=1}^{\infty} \frac{1}{k^{s}} for s > 1 \] For s < 1 use the reflection formula: \[ \zeta(s) = 2^s \pi^{s-1} \Gamma(1-s) \zeta(1-s) \] 
.PP
Definition at line 74 of file riemann_zeta.tcc.
.PP
References std::pow().
.PP
Referenced by __riemann_zeta().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__sph_bessel (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the spherical Bessel function $ j_n(x) $ of order n. 
.PP
The spherical Bessel function is defined by: \[ j_n(x) = \left( \frac{\pi}{2x} \right) ^{1/2} J_{n+1/2}(x) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the spherical Bessel function. 
.br
\fI__x\fP The argument of the spherical Bessel function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output spherical Bessel function. 
.RE
.PP

.PP
Definition at line 568 of file bessel_function.tcc.
.PP
References __sph_bessel_jn().
.SS "template<typename _Tp > void std::tr1::__detail::__sph_bessel_ik (const unsigned int __n, const _Tp __x, _Tp & __i_n, _Tp & __k_n, _Tp & __ip_n, _Tp & __kp_n)\fC [inline]\fP"
.PP
Compute the spherical modified Bessel functions $ i_n(x) $ and $ k_n(x) $ and their first derivatives $ i'_n(x) $ and $ k'_n(x) $ respectively. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the modified spherical Bessel function. 
.br
\fI__x\fP The argument of the modified spherical Bessel function. 
.br
\fI__i_n\fP The output regular modified spherical Bessel function. 
.br
\fI__k_n\fP The output irregular modified spherical Bessel function. 
.br
\fI__ip_n\fP The output derivative of the regular modified spherical Bessel function. 
.br
\fI__kp_n\fP The output derivative of the irregular modified spherical Bessel function. 
.RE
.PP

.PP
Definition at line 335 of file modified_bessel_func.tcc.
.PP
References __bessel_ik(), std::tr1::__detail::__numeric_constants< _Tp >::__sqrtpio2(), and std::sqrt().
.SS "template<typename _Tp > void std::tr1::__detail::__sph_bessel_jn (const unsigned int __n, const _Tp __x, _Tp & __j_n, _Tp & __n_n, _Tp & __jp_n, _Tp & __np_n)\fC [inline]\fP"
.PP
Compute the spherical Bessel $ j_n(x) $ and Neumann $ n_n(x) $ functions and their first derivatives $ j'_n(x) $ and $ n'_n(x) $ respectively. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the spherical Bessel function. 
.br
\fI__x\fP The argument of the spherical Bessel function. 
.br
\fI__j_n\fP The output spherical Bessel function. 
.br
\fI__n_n\fP The output spherical Neumann function. 
.br
\fI__jp_n\fP The output derivative of the spherical Bessel function. 
.br
\fI__np_n\fP The output derivative of the spherical Neumann function. 
.RE
.PP

.PP
Definition at line 533 of file bessel_function.tcc.
.PP
References __bessel_jn(), std::tr1::__detail::__numeric_constants< _Tp >::__sqrtpio2(), and std::sqrt().
.PP
Referenced by __sph_bessel(), and __sph_neumann().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__sph_legendre (const unsigned int __l, const unsigned int __m, const _Tp __theta)\fC [inline]\fP"
.PP
Return the spherical associated Legendre function. 
.PP
The spherical associated Legendre function of $ l $, $ m $, and $ \theta $ is defined as $ Y_l^m(\theta,0) $ where \[ Y_l^m(\theta,\phi) = (-1)^m[\frac{(2l+1)}{4\pi} \frac{(l-m)!}{(l+m)!}] P_l^m(\cos\theta) \exp^{im\phi} \] is the spherical harmonic function and $ P_l^m(x) $ is the associated Legendre function.
.PP
This function differs from the associated Legendre function by argument ($x = \cos(\theta)$) and by a normalization factor but this factor is rather large for large $ l $ and $ m $ and so this function is stable for larger differences of $ l $ and $ m $.
.PP
\fBParameters:\fP
.RS 4
\fIl\fP The order of the spherical associated Legendre function. $ l >= 0 $. 
.br
\fIm\fP The order of the spherical associated Legendre function. $ m <= l $. 
.br
\fItheta\fP The radian angle argument of the spherical associated Legendre function. 
.RE
.PP

.PP
Definition at line 213 of file legendre_function.tcc.
.PP
References std::tr1::__detail::__numeric_constants< _Tp >::__lnpi(), __log_gamma(), __poly_legendre_p(), std::cos(), std::exp(), std::log(), and std::sqrt().
.SS "template<typename _Tp > _Tp std::tr1::__detail::__sph_neumann (const unsigned int __n, const _Tp __x)\fC [inline]\fP"
.PP
Return the spherical Neumann function $ n_n(x) $. 
.PP
The spherical Neumann function is defined by: \[ n_n(x) = \left( \frac{\pi}{2x} \right) ^{1/2} N_{n+1/2}(x) \]
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The order of the spherical Neumann function. 
.br
\fI__x\fP The argument of the spherical Neumann function. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output spherical Neumann function. 
.RE
.PP

.PP
Definition at line 606 of file bessel_function.tcc.
.PP
References __sph_bessel_jn().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
