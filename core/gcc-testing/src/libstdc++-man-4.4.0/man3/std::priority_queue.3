.TH "std::priority_queue" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::priority_queue \- A standard container automatically sorting its contents.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Sequence::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Sequence \fBcontainer_type\fP"
.br
.ti -1c
.RI "typedef _Sequence::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Sequence::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Sequence::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename... _Args> void \fBemplace\fP (_Args &&...__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "\fBpriority_queue\fP & \fBoperator=\fP (\fBpriority_queue\fP &&__pq)"
.br
.ti -1c
.RI "void \fBpop\fP ()"
.br
.ti -1c
.RI "\fBpriority_queue\fP (\fBpriority_queue\fP &&__pq)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBpriority_queue\fP (_InputIterator __first, _InputIterator __last, const _Compare &__x=_Compare(), _Sequence &&__s=_Sequence())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBpriority_queue\fP (_InputIterator __first, _InputIterator __last, const _Compare &__x, const _Sequence &__s)"
.br
.ti -1c
.RI "\fBpriority_queue\fP (const _Compare &__x=_Compare(), _Sequence &&__s=_Sequence())"
.br
.ti -1c
.RI "\fBpriority_queue\fP (const _Compare &__x, const _Sequence &__s)"
.br
.ti -1c
.RI "void \fBpush\fP (value_type &&__x)"
.br
.ti -1c
.RI "void \fBpush\fP (const value_type &__x)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBpriority_queue\fP &&__pq)"
.br
.ti -1c
.RI "const_reference \fBtop\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Sequence \fBc\fP"
.br
.ti -1c
.RI "_Compare \fBcomp\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> class std::priority_queue< _Tp, _Sequence, _Compare >"
A standard container automatically sorting its contents. 

This is not a true container, but an \fIadaptor\fP. It holds another container, and provides a wrapper interface to that container. The wrapper is what enforces priority-based sorting and queue behavior. Very few of the standard container/sequence interface requirements are met (e.g., iterators).
.PP
The second template parameter defines the type of the underlying sequence/container. It defaults to \fBstd::vector\fP, but it can be any type that supports \fCfront()\fP, \fCpush_back\fP, \fCpop_back\fP, and random-access iterators, such as \fBstd::deque\fP or an appropriate user-defined type.
.PP
The third template parameter supplies the means of making priority comparisons. It defaults to \fCless<value_type>\fP but can be anything defining a strict weak ordering.
.PP
Members not found in 'normal' containers are \fCcontainer_type\fP, which is a typedef for the second Sequence parameter, and \fCpush\fP, \fCpop\fP, and \fCtop\fP, which are standard queue operations.
.PP
\fBNote:\fP
.RS 4
No equality/comparison operators are provided for priority_queue.
.PP
Sorting of the elements takes place as they are added to, and removed from, the priority_queue using the priority_queue's member functions. If you access the elements by other means, and change their data such that the sorting order would be different, the priority_queue will not re-sort the elements for you. (How could it know to do so?) 
.RE
.PP

.PP
Definition at line 369 of file stl_queue.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::\fBpriority_queue\fP (const _Compare & __x, const _Sequence & __s)\fC [inline, explicit]\fP"
.PP
Default constructor creates no elements. 
.PP
Definition at line 404 of file stl_queue.h.
.PP
References std::make_heap().
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> template<typename _InputIterator > \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::\fBpriority_queue\fP (_InputIterator __first, _InputIterator __last, const _Compare & __x, const _Sequence & __s)\fC [inline]\fP"
.PP
Builds a queue from a range. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIx\fP A comparison functor describing a strict weak ordering. 
.br
\fIs\fP An initial sequence with which to start.
.RE
.PP
Begins by copying \fIs\fP, inserting a copy of the elements from \fI\fP[first,last) into the copy of \fIs\fP, then ordering the copy according to \fIx\fP.
.PP
For more information on function objects, see the documentation on \fBfunctor base classes\fP. 
.PP
Definition at line 444 of file stl_queue.h.
.PP
References std::make_heap().
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> bool \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::empty () const\fC [inline]\fP"
.PP
Returns true if the queue is empty. 
.PP
Definition at line 481 of file stl_queue.h.
.PP
Referenced by __gnu_parallel::multiseq_partition(), and __gnu_parallel::multiseq_selection().
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> void \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::pop ()\fC [inline]\fP"
.PP
Removes first element. 
.PP
This is a typical queue operation. It shrinks the queue by one. The time complexity of the operation depends on the underlying sequence.
.PP
Note that no data is returned, and if the first element's data is needed, it should be retrieved before \fBpop()\fP is called. 
.PP
Definition at line 544 of file stl_queue.h.
.PP
References std::pop_heap().
.PP
Referenced by __gnu_parallel::multiseq_partition(), and __gnu_parallel::multiseq_selection().
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> void \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::push (const value_type & __x)\fC [inline]\fP"
.PP
Add data to the queue. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Data to be added.
.RE
.PP
This is a typical queue operation. The time complexity of the operation depends on the underlying sequence. 
.PP
Definition at line 509 of file stl_queue.h.
.PP
References std::push_heap().
.PP
Referenced by __gnu_parallel::multiseq_partition(), and __gnu_parallel::multiseq_selection().
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> size_type \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::size () const\fC [inline]\fP"
.PP
Returns the number of elements in the queue. 
.PP
Definition at line 486 of file stl_queue.h.
.SS "template<typename _Tp, typename _Sequence = vector<_Tp>, typename _Compare = less<typename _Sequence::value_type>> const_reference \fBstd::priority_queue\fP< _Tp, _Sequence, _Compare >::top () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reference to the data at the first element of the queue. 
.PP
Definition at line 494 of file stl_queue.h.
.PP
Referenced by __gnu_parallel::multiseq_partition(), and __gnu_parallel::multiseq_selection().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
