.TH "std::unordered_multiset" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::unordered_multiset \- A standard container composed of equivalent keys (possibly containing multiple of each key value) in which the elements' keys are the elements themselves.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits std::__unordered_multiset<_Value, _Hash, _Pred, _Alloc>.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Base::allocator_type \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef __detail::_Hashtable_const_iterator< value_type, __constant_iterators, __cache_hash_code > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef __detail::_Node_const_iterator< value_type, __constant_iterators, __cache_hash_code > \fBconst_local_iterator\fP"
.br
.ti -1c
.RI "typedef _Allocator::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Allocator::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Allocator::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Base::hasher \fBhasher\fP"
.br
.ti -1c
.RI "typedef __detail::_Hashtable_iterator< value_type, __constant_iterators, __cache_hash_code > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Base::key_equal \fBkey_equal\fP"
.br
.ti -1c
.RI "typedef _Key \fBkey_type\fP"
.br
.ti -1c
.RI "typedef __detail::_Node_iterator< value_type, __constant_iterators, __cache_hash_code > \fBlocal_iterator\fP"
.br
.ti -1c
.RI "typedef _Allocator::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Allocator::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Base::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Base::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fB__rehash_policy\fP (const _RehashPolicy &)"
.br
.ti -1c
.RI "const _RehashPolicy & \fB__rehash_policy\fP () const "
.br
.ti -1c
.RI "_Value_allocator_type \fB_M_get_Value_allocator\fP () const "
.br
.ti -1c
.RI "const_local_iterator \fBbegin\fP (size_type __n) const "
.br
.ti -1c
.RI "local_iterator \fBbegin\fP (size_type __n)"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "size_type \fBbucket\fP (const key_type &__k) const "
.br
.ti -1c
.RI "size_type \fBbucket_count\fP () const "
.br
.ti -1c
.RI "size_type \fBbucket_size\fP (size_type __n) const "
.br
.ti -1c
.RI "const_local_iterator \fBcbegin\fP (size_type __n) const "
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const "
.br
.ti -1c
.RI "const_local_iterator \fBcend\fP (size_type) const "
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "size_type \fBcount\fP (const key_type &__k) const "
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "const_local_iterator \fBend\fP (size_type) const "
.br
.ti -1c
.RI "local_iterator \fBend\fP (size_type)"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "\fBstd::pair\fP< const_iterator, const_iterator > \fBequal_range\fP (const key_type &__k) const "
.br
.ti -1c
.RI "\fBstd::pair\fP< iterator, iterator > \fBequal_range\fP (const key_type &__k)"
.br
.ti -1c
.RI "const_iterator \fBerase\fP (const_iterator, const_iterator)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator, iterator)"
.br
.ti -1c
.RI "size_type \fBerase\fP (const key_type &)"
.br
.ti -1c
.RI "const_iterator \fBerase\fP (const_iterator)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator)"
.br
.ti -1c
.RI "const_iterator \fBfind\fP (const key_type &__k) const "
.br
.ti -1c
.RI "iterator \fBfind\fP (const key_type &__k)"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "const_iterator \fBinsert\fP (const_iterator, const value_type &__v)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator, const value_type &__v)"
.br
.ti -1c
.RI "\fB_Insert_Return_Type\fP \fBinsert\fP (const value_type &__v)"
.br
.ti -1c
.RI "key_equal \fBkey_eq\fP () const "
.br
.ti -1c
.RI "float \fBload_factor\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_bucket_count\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "\fBunordered_multiset\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "\fBunordered_multiset\fP & \fBoperator=\fP (\fBunordered_multiset\fP &&__x)"
.br
.ti -1c
.RI "void \fBrehash\fP (size_type __n)"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (_Hashtable &&)"
.br
.ti -1c
.RI "\fBunordered_multiset\fP (\fBinitializer_list\fP< value_type > __l, size_type __n=10, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBunordered_multiset\fP (\fBunordered_multiset\fP &&__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBunordered_multiset\fP (_InputIterator __f, _InputIterator __l, typename _Base::size_type __n=0, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBunordered_multiset\fP (size_type __n=10, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const allocator_type &__a=allocator_type())"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "struct \fB__detail::_Map_base\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Value, class _Hash = hash<_Value>, class _Pred = std::equal_to<_Value>, class _Alloc = std::allocator<_Value>> class std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >"
A standard container composed of equivalent keys (possibly containing multiple of each key value) in which the elements' keys are the elements themselves. 

Meets the requirements of a \fCcontainer\fP, and \fCunordered associative container\fP
.PP
\fBParameters:\fP
.RS 4
\fIValue\fP Type of key objects. 
.br
\fIHash\fP Hashing function object type, defaults to hash<Value>. 
.br
\fIPred\fP Predicate function object type, defaults to equal_to<Value>. 
.br
\fIAlloc\fP Allocator type, defaults to allocator<Key>. 
.RE
.PP

.PP
Definition at line 260 of file tr1_impl/unordered_set.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
