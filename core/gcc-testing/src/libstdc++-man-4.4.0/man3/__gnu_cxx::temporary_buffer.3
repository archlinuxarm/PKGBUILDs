.TH "__gnu_cxx::temporary_buffer" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::temporary_buffer \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBstd::_Temporary_buffer<_ForwardIterator, _Tp>\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef pointer \fBiterator\fP"
.br
.ti -1c
.RI "typedef value_type * \fBpointer\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "size_type \fBrequested_size\fP () const "
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "\fBtemporary_buffer\fP (_ForwardIterator __first, _ForwardIterator __last)"
.br
.ti -1c
.RI "\fB~temporary_buffer\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "pointer \fB_M_buffer\fP"
.br
.ti -1c
.RI "size_type \fB_M_len\fP"
.br
.ti -1c
.RI "size_type \fB_M_original_len\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _ForwardIterator, class _Tp = typename std::iterator_traits<_ForwardIterator>::value_type> struct __gnu_cxx::temporary_buffer< _ForwardIterator, _Tp >"
This class provides similar behavior and semantics of the standard functions \fBget_temporary_buffer()\fP and \fBreturn_temporary_buffer()\fP, but encapsulated in a type vaguely resembling a standard container.
.PP
By default, a temporary_buffer<Iter> stores space for objects of whatever type the Iter iterator points to. It is constructed from a typical [first,last) range, and provides the \fBbegin()\fP, \fBend()\fP, \fBsize()\fP functions, as well as \fBrequested_size()\fP. For non-trivial types, copies of *first will be used to initialize the storage.
.PP
\fCmalloc\fP is used to obtain underlying storage.
.PP
Like \fBget_temporary_buffer()\fP, not all the requested memory may be available. Ideally, the created buffer will be large enough to hold a copy of [first,last), but if \fBsize()\fP is less than \fBrequested_size()\fP, then this didn't happen. 
.PP
Definition at line 182 of file ext/memory.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class _ForwardIterator , class _Tp  = typename std::iterator_traits<_ForwardIterator>::value_type> \fB__gnu_cxx::temporary_buffer\fP< _ForwardIterator, _Tp >::\fBtemporary_buffer\fP (_ForwardIterator __first, _ForwardIterator __last)\fC [inline]\fP"
.PP
Requests storage large enough to hold a copy of [first,last). 
.PP
Definition at line 185 of file ext/memory.
.SS "template<class _ForwardIterator , class _Tp  = typename std::iterator_traits<_ForwardIterator>::value_type> \fB__gnu_cxx::temporary_buffer\fP< _ForwardIterator, _Tp >::~\fBtemporary_buffer\fP ()\fC [inline]\fP"
.PP
Destroys objects and frees storage. 
.PP
Definition at line 189 of file ext/memory.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _ForwardIterator, typename _Tp> iterator \fBstd::_Temporary_buffer\fP< _ForwardIterator, _Tp >::begin ()\fC [inline, inherited]\fP"
.PP
As per Table mumble. 
.PP
Definition at line 151 of file stl_tempbuf.h.
.PP
Referenced by std::inplace_merge(), std::stable_partition(), and std::stable_sort().
.SS "template<typename _ForwardIterator, typename _Tp> iterator \fBstd::_Temporary_buffer\fP< _ForwardIterator, _Tp >::end ()\fC [inline, inherited]\fP"
.PP
As per Table mumble. 
.PP
Definition at line 156 of file stl_tempbuf.h.
.SS "template<typename _ForwardIterator, typename _Tp> size_type \fBstd::_Temporary_buffer\fP< _ForwardIterator, _Tp >::requested_size () const\fC [inline, inherited]\fP"
.PP
Returns the size requested by the constructor; may be >\fBsize()\fP. 
.PP
Definition at line 146 of file stl_tempbuf.h.
.PP
Referenced by std::stable_partition().
.SS "template<typename _ForwardIterator, typename _Tp> size_type \fBstd::_Temporary_buffer\fP< _ForwardIterator, _Tp >::size () const\fC [inline, inherited]\fP"
.PP
As per Table mumble. 
.PP
Definition at line 141 of file stl_tempbuf.h.
.PP
Referenced by std::inplace_merge(), std::stable_partition(), and std::stable_sort().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
