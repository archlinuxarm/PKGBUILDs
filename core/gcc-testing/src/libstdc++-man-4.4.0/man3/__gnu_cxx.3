.TH "__gnu_cxx" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx \- GNU extensions for public use.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fB__detail\fP"
.br
.ti -1c
.RI "namespace \fBtypelist\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fB__common_pool_policy\fP"
.br
.RI "\fIPolicy for shared __pool objects. \fP"
.ti -1c
.RI "class \fB__mt_alloc\fP"
.br
.RI "\fIThis is a fixed size (power of 2) allocator which - when compiled with thread support - will maintain one freelist per size per thread plus a 'global' one. Steps are taken to limit the per thread freelist sizes (by returning excess back to the 'global' list).
.PP
Further details: http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch32.html. \fP"
.ti -1c
.RI "class \fB__mt_alloc_base\fP"
.br
.RI "\fIBase class for _Tp dependent member functions. \fP"
.ti -1c
.RI "struct \fB__per_type_pool_policy\fP"
.br
.RI "\fIPolicy for individual __pool objects. \fP"
.ti -1c
.RI "class \fB__pool< false >\fP"
.br
.RI "\fISpecialization for single thread. \fP"
.ti -1c
.RI "class \fB__pool< true >\fP"
.br
.RI "\fISpecialization for thread enabled, via gthreads.h. \fP"
.ti -1c
.RI "class \fB__pool_alloc\fP"
.br
.RI "\fIAllocator using a memory pool with a single lock. \fP"
.ti -1c
.RI "class \fB__pool_alloc_base\fP"
.br
.RI "\fIBase class for \fB__pool_alloc\fP. \fP"
.ti -1c
.RI "struct \fB__pool_base\fP"
.br
.RI "\fIBase class for pool object. \fP"
.ti -1c
.RI "class \fB__rc_string_base\fP"
.br
.ti -1c
.RI "class \fB__scoped_lock\fP"
.br
.RI "\fIScoped lock idiom. \fP"
.ti -1c
.RI "class \fB__versa_string\fP"
.br
.RI "\fIManaging sequences of characters and character-like objects. \fP"
.ti -1c
.RI "struct \fB_Caster\fP"
.br
.ti -1c
.RI "struct \fB_Char_types\fP"
.br
.RI "\fIMapping from \fBcharacter\fP type to associated types. \fP"
.ti -1c
.RI "class \fB_ExtPtr_allocator\fP"
.br
.RI "\fIAn example allocator which uses a non-standard pointer type.
.PP
This allocator specifies that containers use a 'relative pointer' as it's pointer type. (See \fBext/pointer.h\fP) Memory allocation in this example is still performed using \fBstd::allocator\fP. \fP"
.ti -1c
.RI "struct \fB_Invalid_type\fP"
.br
.ti -1c
.RI "class \fB_Pointer_adapter\fP"
.br
.ti -1c
.RI "class \fB_Relative_pointer_impl\fP"
.br
.RI "\fIA storage policy for use with _Pointer_adapter<> which stores the pointer's address as an offset value which is relative to its own address. \fP"
.ti -1c
.RI "class \fB_Relative_pointer_impl< const _Tp >\fP"
.br
.ti -1c
.RI "class \fB_Std_pointer_impl\fP"
.br
.RI "\fIA storage policy for use with _Pointer_adapter<> which yields a standard pointer. \fP"
.ti -1c
.RI "struct \fB_Unqualified_type\fP"
.br
.ti -1c
.RI "class \fBarray_allocator\fP"
.br
.RI "\fIAn allocator that uses previously allocated memory. This memory can be externally, globally, or otherwise allocated. \fP"
.ti -1c
.RI "class \fBarray_allocator_base\fP"
.br
.RI "\fIBase class. \fP"
.ti -1c
.RI "class \fBbinary_compose\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "class \fBbitmap_allocator\fP"
.br
.RI "\fIBitmap Allocator, primary template. \fP"
.ti -1c
.RI "struct \fBchar_traits\fP"
.br
.RI "\fIBase class used to implement \fBstd::char_traits\fP. \fP"
.ti -1c
.RI "struct \fBcharacter\fP"
.br
.RI "\fIA POD class that serves as a \fBcharacter\fP abstraction class. \fP"
.ti -1c
.RI "struct \fBconstant_binary_fun\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "struct \fBconstant_unary_fun\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "struct \fBconstant_void_fun\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "class \fBdebug_allocator\fP"
.br
.RI "\fIA meta-allocator with debugging bits, as per [20.4].
.PP
This is precisely the allocator defined in the C++ Standard.
.IP "\(bu" 2
all allocation calls operator new
.IP "\(bu" 2
all deallocation calls operator delete. 
.PP
\fP"
.ti -1c
.RI "class \fBenc_filebuf\fP"
.br
.RI "\fIclass \fBenc_filebuf\fP. \fP"
.ti -1c
.RI "struct \fBencoding_char_traits\fP"
.br
.RI "\fI\fBencoding_char_traits\fP \fP"
.ti -1c
.RI "class \fBencoding_state\fP"
.br
.RI "\fIExtension to use iconv for dealing with \fBcharacter\fP encodings. \fP"
.ti -1c
.RI "struct \fBforced_exception_error\fP"
.br
.RI "\fIThown by \fBthrow_allocator\fP. \fP"
.ti -1c
.RI "class \fBfree_list\fP"
.br
.RI "\fIThe free list class for managing chunks of memory to be given to and returned by the \fBbitmap_allocator\fP. \fP"
.ti -1c
.RI "class \fBhash_map\fP"
.br
.ti -1c
.RI "class \fBhash_multimap\fP"
.br
.ti -1c
.RI "class \fBhash_multiset\fP"
.br
.ti -1c
.RI "class \fBhash_set\fP"
.br
.ti -1c
.RI "class \fBmalloc_allocator\fP"
.br
.RI "\fIAn allocator that uses malloc.
.PP
This is precisely the allocator defined in the C++ Standard.
.IP "\(bu" 2
all allocation calls malloc
.IP "\(bu" 2
all deallocation calls free. 
.PP
\fP"
.ti -1c
.RI "class \fBnew_allocator\fP"
.br
.RI "\fIAn allocator that uses global new, as per [20.4].
.PP
This is precisely the allocator defined in the C++ Standard.
.IP "\(bu" 2
all allocation calls operator new
.IP "\(bu" 2
all deallocation calls operator delete. 
.PP
\fP"
.ti -1c
.RI "struct \fBproject1st\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "struct \fBproject2nd\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "struct \fBrb_tree\fP"
.br
.ti -1c
.RI "class \fBrope\fP"
.br
.ti -1c
.RI "struct \fBselect1st\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "struct \fBselect2nd\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.ti -1c
.RI "class \fBslist\fP"
.br
.ti -1c
.RI "class \fBstdio_filebuf\fP"
.br
.RI "\fIProvides a layer of compatibility for C/POSIX. \fP"
.ti -1c
.RI "class \fBstdio_sync_filebuf\fP"
.br
.RI "\fIclass \fBstdio_sync_filebuf\fP. \fP"
.ti -1c
.RI "class \fBsubtractive_rng\fP"
.br
.ti -1c
.RI "struct \fBtemporary_buffer\fP"
.br
.ti -1c
.RI "class \fBthrow_allocator\fP"
.br
.RI "\fIAllocator class with logging and exception control. \fP"
.ti -1c
.RI "class \fBthrow_allocator_base\fP"
.br
.RI "\fIBase class. \fP"
.ti -1c
.RI "class \fBunary_compose\fP"
.br
.RI "\fIAn \fBSGI extension \fP. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fB__destroy_handler\fP )(void *)"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char, \fBstd::char_traits\fP< char >, \fBstd::allocator\fP< char >, \fB__rc_string_base\fP > \fB__rc_string\fP"
.br
.ti -1c
.RI "typedef \fB__vstring\fP \fB__sso_string\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char16_t, \fBstd::char_traits\fP< char16_t >, \fBstd::allocator\fP< char16_t >, \fB__rc_string_base\fP > \fB__u16rc_string\fP"
.br
.ti -1c
.RI "typedef \fB__u16vstring\fP \fB__u16sso_string\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char16_t > \fB__u16vstring\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char32_t, \fBstd::char_traits\fP< char32_t >, \fBstd::allocator\fP< char32_t >, \fB__rc_string_base\fP > \fB__u32rc_string\fP"
.br
.ti -1c
.RI "typedef \fB__u32vstring\fP \fB__u32sso_string\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char32_t > \fB__u32vstring\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< char > \fB__vstring\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< wchar_t, \fBstd::char_traits\fP< wchar_t >, \fBstd::allocator\fP< wchar_t >, \fB__rc_string_base\fP > \fB__wrc_string\fP"
.br
.ti -1c
.RI "typedef \fB__wvstring\fP \fB__wsso_string\fP"
.br
.ti -1c
.RI "typedef \fB__versa_string\fP< wchar_t > \fB__wvstring\fP"
.br
.ti -1c
.RI "typedef \fBrope\fP< char > \fBcrope\fP"
.br
.ti -1c
.RI "typedef \fBrope\fP< wchar_t > \fBwrope\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fB_S_num_primes\fP }"
.br
.ti -1c
.RI "enum \fB_Lock_policy\fP { \fB_S_single\fP, \fB_S_mutex\fP, \fB_S_atomic\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fB__atomic_add_single\fP (_Atomic_word *__mem, int __val)"
.br
.ti -1c
.RI "_Atomic_word \fB__attribute__\fP ((__unused__)) __exchange_and_add(volatile _Atomic_word *"
.br
.ti -1c
.RI "template<class _Tp > void \fB__aux_require_boolean_expr\fP (const _Tp &__t)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__const_pointer_cast\fP (_FromType *__arg)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__const_pointer_cast\fP (const _FromType &__arg)"
.br
.ti -1c
.RI "template<typename _RAIterator , typename _Size , typename _OutputIterator > \fBpair\fP< _RAIterator, _OutputIterator > \fB__copy_n\fP (_RAIterator __first, _Size __count, _OutputIterator __result, \fBrandom_access_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Size , typename _OutputIterator > \fBpair\fP< _InputIterator, _OutputIterator > \fB__copy_n\fP (_InputIterator __first, _Size __count, _OutputIterator __result, \fBinput_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _Distance > void \fB__distance\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance &__n, \fBstd::random_access_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Distance > void \fB__distance\fP (_InputIterator __first, _InputIterator __last, _Distance &__n, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__dynamic_pointer_cast\fP (_FromType *__arg)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__dynamic_pointer_cast\fP (const _FromType &__arg)"
.br
.ti -1c
.RI "void \fB__error_type_must_be_a_signed_integer_type\fP ()"
.br
.ti -1c
.RI "void \fB__error_type_must_be_an_integer_type\fP ()"
.br
.ti -1c
.RI "void \fB__error_type_must_be_an_unsigned_integer_type\fP ()"
.br
.ti -1c
.RI "else return \fB__exchange_and_add_single\fP (__mem, __val)"
.br
.ti -1c
.RI "static _Atomic_word \fB__exchange_and_add_single\fP (_Atomic_word *__mem, int __val)"
.br
.ti -1c
.RI "template<class _Concept > void \fB__function_requires\fP ()"
.br
.ti -1c
.RI "template<typename _Type > bool \fB__is_null_pointer\fP (_Type)"
.br
.ti -1c
.RI "template<typename _Type > bool \fB__is_null_pointer\fP (_Type *__ptr)"
.br
.ti -1c
.RI "int \fB__lexicographical_compare_3way\fP (const char *__first1, const char *__last1, const char *__first2, const char *__last2)"
.br
.ti -1c
.RI "int \fB__lexicographical_compare_3way\fP (const unsigned char *__first1, const unsigned char *__last1, const unsigned char *__first2, const unsigned char *__last2)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 > int \fB__lexicographical_compare_3way\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)"
.br
.ti -1c
.RI "crope::reference \fB__mutable_reference_at\fP (\fBcrope\fP &__c, size_t __i)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Integer > _Tp \fB__power\fP (_Tp __x, _Integer __n)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Integer , typename _MonoidOperation > _Tp \fB__power\fP (_Tp __x, _Integer __n, _MonoidOperation __monoid_op)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _RandomAccessIterator , typename _RandomNumberGenerator , typename _Distance > _RandomAccessIterator \fB__random_sample\fP (_InputIterator __first, _InputIterator __last, _RandomAccessIterator __out, _RandomNumberGenerator &__rand, const _Distance __n)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _RandomAccessIterator , typename _Distance > _RandomAccessIterator \fB__random_sample\fP (_InputIterator __first, _InputIterator __last, _RandomAccessIterator __out, const _Distance __n)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__reinterpret_pointer_cast\fP (_FromType *__arg)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__reinterpret_pointer_cast\fP (const _FromType &__arg)"
.br
.ti -1c
.RI "_Slist_node_base * \fB__slist_make_link\fP (_Slist_node_base *__prev_node, _Slist_node_base *__new_node)"
.br
.ti -1c
.RI "const _Slist_node_base * \fB__slist_previous\fP (const _Slist_node_base *__head, const _Slist_node_base *__node)"
.br
.ti -1c
.RI "_Slist_node_base * \fB__slist_previous\fP (_Slist_node_base *__head, const _Slist_node_base *__node)"
.br
.ti -1c
.RI "_Slist_node_base * \fB__slist_reverse\fP (_Slist_node_base *__node)"
.br
.ti -1c
.RI "size_t \fB__slist_size\fP (_Slist_node_base *__node)"
.br
.ti -1c
.RI "void \fB__slist_splice_after\fP (_Slist_node_base *__pos, _Slist_node_base *__head)"
.br
.ti -1c
.RI "void \fB__slist_splice_after\fP (_Slist_node_base *__pos, _Slist_node_base *__before_first, _Slist_node_base *__before_last)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__static_pointer_cast\fP (_FromType *__arg)"
.br
.ti -1c
.RI "template<typename _ToType , typename _FromType > _ToType \fB__static_pointer_cast\fP (const _FromType &__arg)"
.br
.ti -1c
.RI "size_t \fB__stl_hash_string\fP (const char *__s)"
.br
.ti -1c
.RI "unsigned long \fB__stl_next_prime\fP (unsigned long __n)"
.br
.ti -1c
.RI "template<typename _TRet , typename _Ret  = _TRet, typename _CharT , typename... _Base> _Ret \fB__stoa\fP (_TRet(*__convf)(const _CharT *, _CharT **, _Base...), const char *__name, const _CharT *__str, std::size_t *__idx, _Base...__base)"
.br
.ti -1c
.RI "void \fB__throw_concurrence_lock_error\fP ()"
.br
.ti -1c
.RI "void \fB__throw_concurrence_unlock_error\fP ()"
.br
.ti -1c
.RI "void \fB__throw_forced_exception_error\fP ()"
.br
.ti -1c
.RI "template<typename _String , typename _CharT  = typename _String::value_type> _String \fB__to_xstring\fP (int(*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t __n, const _CharT *__fmt,...)"
.br
.ti -1c
.RI "template<typename _InputIter , typename _Size , typename _ForwardIter > \fBpair\fP< _InputIter, _ForwardIter > \fB__uninitialized_copy_n\fP (_InputIter __first, _Size __count, _ForwardIter __result)"
.br
.ti -1c
.RI "template<typename _RandomAccessIter , typename _Size , typename _ForwardIter > \fBpair\fP< _RandomAccessIter, _ForwardIter > \fB__uninitialized_copy_n\fP (_RandomAccessIter __first, _Size __count, _ForwardIter __result, \fBstd::random_access_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _InputIter , typename _Size , typename _ForwardIter > \fBpair\fP< _InputIter, _ForwardIter > \fB__uninitialized_copy_n\fP (_InputIter __first, _Size __count, _ForwardIter __result, \fBstd::input_iterator_tag\fP)"
.br
.ti -1c
.RI "template<typename _InputIter , typename _Size , typename _ForwardIter , typename _Tp > \fBpair\fP< _InputIter, _ForwardIter > \fB__uninitialized_copy_n_a\fP (_InputIter __first, _Size __count, _ForwardIter __result, \fBstd::allocator\fP< _Tp >)"
.br
.ti -1c
.RI "template<typename _InputIter , typename _Size , typename _ForwardIter , typename _Allocator > \fBpair\fP< _InputIter, _ForwardIter > \fB__uninitialized_copy_n_a\fP (_InputIter __first, _Size __count, _ForwardIter __result, _Allocator __alloc)"
.br
.ti -1c
.RI "void \fB__verbose_terminate_handler\fP ()"
.br
.ti -1c
.RI "size_t \fB_Bit_scan_forward\fP (size_t __num)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Tp > void \fB_Destroy_const\fP (_ForwardIterator __first, _ForwardIterator __last, \fBallocator\fP< _Tp >)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Allocator > void \fB_Destroy_const\fP (_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)"
.br
.ti -1c
.RI "template<class _CharT , class _Traits > void \fB_Rope_fill\fP (\fBbasic_ostream\fP< _CharT, _Traits > &__o, size_t __n)"
.br
.ti -1c
.RI "bool \fB_Rope_is_simple\fP (wchar_t *)"
.br
.ti -1c
.RI "bool \fB_Rope_is_simple\fP (char *)"
.br
.ti -1c
.RI "template<class _CharT > bool \fB_Rope_is_simple\fP (_CharT *)"
.br
.ti -1c
.RI "template<class _Rope_iterator > void \fB_Rope_rotate\fP (_Rope_iterator __first, _Rope_iterator __middle, _Rope_iterator __last)"
.br
.ti -1c
.RI "void \fB_S_cond_store_eos\fP (wchar_t &__c)"
.br
.ti -1c
.RI "void \fB_S_cond_store_eos\fP (char &__c)"
.br
.ti -1c
.RI "template<class _CharT > void \fB_S_cond_store_eos\fP (_CharT &)"
.br
.ti -1c
.RI "template<class _CharT > _CharT \fB_S_eos\fP (_CharT *)"
.br
.ti -1c
.RI "bool \fB_S_is_basic_char_type\fP (wchar_t *)"
.br
.ti -1c
.RI "bool \fB_S_is_basic_char_type\fP (char *)"
.br
.ti -1c
.RI "template<class _CharT > bool \fB_S_is_basic_char_type\fP (_CharT *)"
.br
.ti -1c
.RI "bool \fB_S_is_one_byte_char_type\fP (char *)"
.br
.ti -1c
.RI "template<class _CharT > bool \fB_S_is_one_byte_char_type\fP (_CharT *)"
.br
.ti -1c
.RI "template<class _Operation1 , class _Operation2 > \fBunary_compose\fP< _Operation1, _Operation2 > \fBcompose1\fP (const _Operation1 &__fn1, const _Operation2 &__fn2)"
.br
.ti -1c
.RI "template<class _Operation1 , class _Operation2 , class _Operation3 > \fBbinary_compose\fP< _Operation1, _Operation2, _Operation3 > \fBcompose2\fP (const _Operation1 &__fn1, const _Operation2 &__fn2, const _Operation3 &__fn3)"
.br
.ti -1c
.RI "template<class _Result > \fBconstant_void_fun\fP< _Result > \fBconstant0\fP (const _Result &__val)"
.br
.ti -1c
.RI "template<class _Result > \fBconstant_unary_fun\fP< _Result, _Result > \fBconstant1\fP (const _Result &__val)"
.br
.ti -1c
.RI "template<class _Result > \fBconstant_binary_fun\fP< _Result, _Result, _Result > \fBconstant2\fP (const _Result &__val)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Size , typename _OutputIterator > \fBpair\fP< _InputIterator, _OutputIterator > \fBcopy_n\fP (_InputIterator __first, _Size __count, _OutputIterator __result)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Tp , typename _Size > void \fBcount\fP (_InputIterator __first, _InputIterator __last, const _Tp &__value, _Size &__n)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate , typename _Size > void \fBcount_if\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred, _Size &__n)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Distance > void \fBdistance\fP (_InputIterator __first, _InputIterator __last, _Distance &__n)"
.br
.ti -1c
.RI "template<class _Tp > _Tp \fBidentity_element\fP (\fBstd::multiplies\fP< _Tp >)"
.br
.ti -1c
.RI "template<class _Tp > _Tp \fBidentity_element\fP (\fBstd::plus\fP< _Tp >)"
.br
.ti -1c
.RI "static _Atomic_word int __val \fBif\fP (__gthread_active_p()) return __exchange_and_add(__mem"
.br
.ti -1c
.RI "template<typename _ForwardIter , typename _Tp > void \fBiota\fP (_ForwardIter __first, _ForwardIter __last, _Tp __value)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator , typename _StrictWeakOrdering > bool \fBis_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)"
.br
.ti -1c
.RI "template<typename _RandomAccessIterator > bool \fBis_heap\fP (_RandomAccessIterator __first, _RandomAccessIterator __last)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _StrictWeakOrdering > bool \fBis_sorted\fP (_ForwardIterator __first, _ForwardIterator __last, _StrictWeakOrdering __comp)"
.br
.ti -1c
.RI "template<typename _ForwardIterator > bool \fBis_sorted\fP (_ForwardIterator __first, _ForwardIterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 > int \fBlexicographical_compare_3way\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)"
.br
.ti -1c
.RI "template<class _Ret , class _Tp , class _Arg > \fBmem_fun1_t\fP< _Ret, _Tp, _Arg > \fBmem_fun1\fP (_Ret(_Tp::*__f)(_Arg))"
.br
.ti -1c
.RI "template<class _Ret , class _Tp , class _Arg > \fBmem_fun1_ref_t\fP< _Ret, _Tp, _Arg > \fBmem_fun1_ref\fP (_Ret(_Tp::*__f)(_Arg))"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator!=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator!=\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator!=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBthrow_allocator\fP< T > &, const \fBthrow_allocator\fP< T > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (const \fB__pool_alloc\fP< _Tp > &, const \fB__pool_alloc\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (int __lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, int __rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator!=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator!=\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator!=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (const \fBnew_allocator\fP< _Tp > &, const \fBnew_allocator\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Poolp > bool \fBoperator!=\fP (const \fB__mt_alloc\fP< _Tp, _Poolp > &, const \fB__mt_alloc\fP< _Tp, _Poolp > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator!=\fP (const \fBmalloc_allocator\fP< _Tp > &, const \fBmalloc_allocator\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator!=\fP (const \fBbitmap_allocator\fP< _Tp1 > &, const \fBbitmap_allocator\fP< _Tp2 > &)  throw ()"
.br
.ti -1c
.RI "template<typename _Tp , typename _Array > bool \fBoperator!=\fP (const \fBarray_allocator\fP< _Tp, _Array > &, const \fBarray_allocator\fP< _Tp, _Array > &)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator!=\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator!=\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Val , class _Key , class _HF , class _Ex , class _Eq , class _All > bool \fBoperator!=\fP (const hashtable< _Val, _Key, _HF, _Ex, _Eq, _All > &__ht1, const hashtable< _Val, _Key, _HF, _Ex, _Eq, _All > &__ht2)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator!=\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator!=\fP (const _Rope_char_ptr_proxy< _CharT, _Alloc > &__x, const _Rope_char_ptr_proxy< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator!=\fP (const \fBrope\fP< _CharT, _Alloc > &__x, const \fBrope\fP< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator!=\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator!=\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _Val , class _HashFcn , class _EqualKey , class _Alloc > bool \fBoperator!=\fP (const \fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs1, const \fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Value , class _HashFcn , class _EqualKey , class _Alloc > bool \fBoperator!=\fP (const \fBhash_set\fP< _Value, _HashFcn, _EqualKey, _Alloc > &__hs1, const \fBhash_set\fP< _Value, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HF , class _EqKey , class _Alloc > bool \fBoperator!=\fP (const \fBhash_multimap\fP< _Key, _Tp, _HF, _EqKey, _Alloc > &__hm1, const \fBhash_multimap\fP< _Key, _Tp, _HF, _EqKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HashFn , class _EqlKey , class _Alloc > bool \fBoperator!=\fP (const \fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm1, const \fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > \fBoperator+\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, _CharT __rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > \fBoperator+\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > \fBoperator+\fP (_CharT __lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > \fBoperator+\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > \fBoperator+\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > __normal_iterator< _Iterator, _Container > \fBoperator+\fP (typename __normal_iterator< _Iterator, _Container >::difference_type __n, const __normal_iterator< _Iterator, _Container > &__i)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > \fBoperator+\fP (const \fBrope\fP< _CharT, _Alloc > &__left, _CharT __right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > \fBoperator+\fP (const \fBrope\fP< _CharT, _Alloc > &__left, const _CharT *__right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > \fBoperator+\fP (const \fBrope\fP< _CharT, _Alloc > &__left, const \fBrope\fP< _CharT, _Alloc > &__right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_iterator< _CharT, _Alloc > \fBoperator+\fP (ptrdiff_t __n, const _Rope_iterator< _CharT, _Alloc > &__x)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_iterator< _CharT, _Alloc > \fBoperator+\fP (const _Rope_iterator< _CharT, _Alloc > &__x, ptrdiff_t __n)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_const_iterator< _CharT, _Alloc > \fBoperator+\fP (ptrdiff_t __n, const _Rope_const_iterator< _CharT, _Alloc > &__x)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_const_iterator< _CharT, _Alloc > \fBoperator+\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, ptrdiff_t __n)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > & \fBoperator+=\fP (\fBrope\fP< _CharT, _Alloc > &__left, _CharT __right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > & \fBoperator+=\fP (\fBrope\fP< _CharT, _Alloc > &__left, const _CharT *__right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > \fBrope\fP< _CharT, _Alloc > & \fBoperator+=\fP (\fBrope\fP< _CharT, _Alloc > &__left, const \fBrope\fP< _CharT, _Alloc > &__right)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > __normal_iterator< _Iterator, _Container >::difference_type \fBoperator-\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > auto \fBoperator-\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)-> decltype(__lhs.base()-__rhs.base())"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > ptrdiff_t \fBoperator-\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_iterator< _CharT, _Alloc > \fBoperator-\fP (const _Rope_iterator< _CharT, _Alloc > &__x, ptrdiff_t __n)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > ptrdiff_t \fBoperator-\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > _Rope_const_iterator< _CharT, _Alloc > \fBoperator-\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, ptrdiff_t __n)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename V , typename I , typename S > bool \fBoperator<\fP (const \fBcharacter\fP< V, I, S > &lhs, const \fBcharacter\fP< V, I, S > &rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator<\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator<\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator<\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<\fP (const \fBrope\fP< _CharT, _Alloc > &__left, const \fBrope\fP< _CharT, _Alloc > &__right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "\fBstd::ostream\fP & \fBoperator<<\fP (\fBstd::ostream\fP &os, const \fBthrow_allocator_base\fP &alloc)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _StoreT > \fBstd::basic_ostream\fP< _CharT, _Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__os, const \fB_Pointer_adapter\fP< _StoreT > &__p)"
.br
.ti -1c
.RI "template<class _CharT , class _Traits , class _Alloc > \fBstd::basic_ostream\fP< _CharT, _Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &__o, const \fBrope\fP< _CharT, _Alloc > &__r)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<=\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator<=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator<=\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<=\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator<=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator<=\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator<=\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator<=\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<=\fP (const \fBrope\fP< _CharT, _Alloc > &__x, const \fBrope\fP< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<=\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator<=\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator==\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator==\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , template< typename, typename, typename > class _Base> __enable_if< std::__is_char< _CharT >::__value, bool >::__type \fBoperator==\fP (const \fB__versa_string\fP< _CharT, \fBstd::char_traits\fP< _CharT >, \fBstd::allocator\fP< _CharT >, _Base > &__lhs, const \fB__versa_string\fP< _CharT, \fBstd::char_traits\fP< _CharT >, \fBstd::allocator\fP< _CharT >, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator==\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBthrow_allocator\fP< T > &, const \fBthrow_allocator\fP< T > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (const \fB__pool_alloc\fP< _Tp > &, const \fB__pool_alloc\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (int __lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, int __rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator==\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator==\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator==\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename V , typename I , typename S > bool \fBoperator==\fP (const \fBcharacter\fP< V, I, S > &lhs, const \fBcharacter\fP< V, I, S > &rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (const \fBnew_allocator\fP< _Tp > &, const \fBnew_allocator\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Poolp > bool \fBoperator==\fP (const \fB__mt_alloc\fP< _Tp, _Poolp > &, const \fB__mt_alloc\fP< _Tp, _Poolp > &)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator==\fP (const \fBmalloc_allocator\fP< _Tp > &, const \fBmalloc_allocator\fP< _Tp > &)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator==\fP (const \fBbitmap_allocator\fP< _Tp1 > &, const \fBbitmap_allocator\fP< _Tp2 > &)  throw ()"
.br
.ti -1c
.RI "template<typename _Tp , typename _Array > bool \fBoperator==\fP (const \fBarray_allocator\fP< _Tp, _Array > &, const \fBarray_allocator\fP< _Tp, _Array > &)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator==\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator==\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Val , class _Key , class _HF , class _Ex , class _Eq , class _All > bool \fBoperator==\fP (const hashtable< _Val, _Key, _HF, _Ex, _Eq, _All > &__ht1, const hashtable< _Val, _Key, _HF, _Ex, _Eq, _All > &__ht2)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator==\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator==\fP (const \fBrope\fP< _CharT, _Alloc > &__left, const \fBrope\fP< _CharT, _Alloc > &__right)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator==\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator==\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator==\fP (const _Rope_char_ptr_proxy< _CharT, _Alloc > &__x, const _Rope_char_ptr_proxy< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _Val , class _HashFcn , class _EqualKey , class _Alloc > bool \fBoperator==\fP (const \fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs1, const \fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Value , class _HashFcn , class _EqualKey , class _Alloc > bool \fBoperator==\fP (const \fBhash_set\fP< _Value, _HashFcn, _EqualKey, _Alloc > &__hs1, const \fBhash_set\fP< _Value, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HF , class _EqKey , class _Alloc > bool \fBoperator==\fP (const \fBhash_multimap\fP< _Key, _Tp, _HF, _EqKey, _Alloc > &__hm1, const \fBhash_multimap\fP< _Key, _Tp, _HF, _EqKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HashFn , class _EqlKey , class _Alloc > bool \fBoperator==\fP (const \fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm1, const \fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator>\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator>\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator>\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator>\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>\fP (const \fBrope\fP< _CharT, _Alloc > &__x, const \fBrope\fP< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>=\fP (const _CharT *__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const _CharT *__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool \fBoperator>=\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > bool \fBoperator>=\fP (const \fB_Pointer_adapter\fP< _Tp > &__lhs, const \fB_Pointer_adapter\fP< _Tp > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>=\fP (_Tp1 __lhs, const \fB_Pointer_adapter\fP< _Tp2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp1 , typename _Tp2 > bool \fBoperator>=\fP (const \fB_Pointer_adapter\fP< _Tp1 > &__lhs, _Tp2 __rhs)"
.br
.ti -1c
.RI "template<typename _Iterator , typename _Container > bool \fBoperator>=\fP (const __normal_iterator< _Iterator, _Container > &__lhs, const __normal_iterator< _Iterator, _Container > &__rhs)"
.br
.ti -1c
.RI "template<typename _IteratorL , typename _IteratorR , typename _Container > bool \fBoperator>=\fP (const __normal_iterator< _IteratorL, _Container > &__lhs, const __normal_iterator< _IteratorR, _Container > &__rhs)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > bool \fBoperator>=\fP (const \fBslist\fP< _Tp, _Alloc > &_SL1, const \fBslist\fP< _Tp, _Alloc > &_SL2)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>=\fP (const \fBrope\fP< _CharT, _Alloc > &__x, const \fBrope\fP< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>=\fP (const _Rope_iterator< _CharT, _Alloc > &__x, const _Rope_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > bool \fBoperator>=\fP (const _Rope_const_iterator< _CharT, _Alloc > &__x, const _Rope_const_iterator< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Integer > _Tp \fBpower\fP (_Tp __x, _Integer __n)"
.br
.ti -1c
.RI "template<typename _Tp , typename _Integer , typename _MonoidOperation > _Tp \fBpower\fP (_Tp __x, _Integer __n, _MonoidOperation __monoid_op)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _RandomAccessIterator , typename _RandomNumberGenerator > _RandomAccessIterator \fBrandom_sample\fP (_InputIterator __first, _InputIterator __last, _RandomAccessIterator __out_first, _RandomAccessIterator __out_last, _RandomNumberGenerator &__rand)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _RandomAccessIterator > _RandomAccessIterator \fBrandom_sample\fP (_InputIterator __first, _InputIterator __last, _RandomAccessIterator __out_first, _RandomAccessIterator __out_last)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _OutputIterator , typename _Distance , typename _RandomNumberGenerator > _OutputIterator \fBrandom_sample_n\fP (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __out, const _Distance __n, _RandomNumberGenerator &__rand)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _OutputIterator , typename _Distance > _OutputIterator \fBrandom_sample_n\fP (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __out, const _Distance __n)"
.br
.ti -1c
.RI "void \fBrotate\fP (_Rope_iterator< char, __STL_DEFAULT_ALLOCATOR(char)> __first, _Rope_iterator< char, __STL_DEFAULT_ALLOCATOR(char)> __middle, _Rope_iterator< char, __STL_DEFAULT_ALLOCATOR(char)> __last)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void \fBswap\fP (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &&__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void \fBswap\fP (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &&__lhs, \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void \fBswap\fP (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__lhs, \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > &__rhs)"
.br
.ti -1c
.RI "template<typename _Tp > void \fBswap\fP (\fB_ExtPtr_allocator\fP< _Tp > &__larg, \fB_ExtPtr_allocator\fP< _Tp > &__rarg)"
.br
.ti -1c
.RI "template<class _Val , class _Key , class _HF , class _Extract , class _EqKey , class _All > void \fBswap\fP (hashtable< _Val, _Key, _HF, _Extract, _EqKey, _All > &__ht1, hashtable< _Val, _Key, _HF, _Extract, _EqKey, _All > &__ht2)"
.br
.ti -1c
.RI "template<class _Tp , class _Alloc > void \fBswap\fP (\fBslist\fP< _Tp, _Alloc > &__x, \fBslist\fP< _Tp, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class _Alloc > void \fBswap\fP (\fBrope\fP< _CharT, _Alloc > &__x, \fBrope\fP< _CharT, _Alloc > &__y)"
.br
.ti -1c
.RI "template<class _CharT , class __Alloc > void \fBswap\fP (_Rope_char_ref_proxy< _CharT, __Alloc > __a, _Rope_char_ref_proxy< _CharT, __Alloc > __b)"
.br
.ti -1c
.RI "template<class _Val , class _HashFcn , class _EqualKey , class _Alloc > void \fBswap\fP (\fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs1, \fBhash_multiset\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Val , class _HashFcn , class _EqualKey , class _Alloc > void \fBswap\fP (\fBhash_set\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs1, \fBhash_set\fP< _Val, _HashFcn, _EqualKey, _Alloc > &__hs2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HashFn , class _EqlKey , class _Alloc > void \fBswap\fP (\fBhash_multimap\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm1, \fBhash_multimap\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<class _Key , class _Tp , class _HashFn , class _EqlKey , class _Alloc > void \fBswap\fP (\fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm1, \fBhash_map\fP< _Key, _Tp, _HashFn, _EqlKey, _Alloc > &__hm2)"
.br
.ti -1c
.RI "template<typename _InputIter , typename _Size , typename _ForwardIter > \fBpair\fP< _InputIter, _ForwardIter > \fBuninitialized_copy_n\fP (_InputIter __first, _Size __count, _ForwardIter __result)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const _Lock_policy \fB__default_lock_policy\fP"
.br
.ti -1c
.RI "static const unsigned long \fB__stl_prime_list\fP [_S_num_primes]"
.br
.ti -1c
.RI "static _Atomic_word int __val \fB__val\fP"
.br
.ti -1c
.RI "\fBrope\fP< _CharT, _Alloc > \fBidentity_element\fP (_Rope_Concat_fn< _CharT, _Alloc >)"
.br
.ti -1c
.RI "_Atomic_word \fBint\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
GNU extensions for public use. 
.PP
.SH "Function Documentation"
.PP 
.SS "template<typename _ToType , typename _FromType > _ToType __gnu_cxx::__static_pointer_cast (_FromType * __arg)\fC [inline]\fP"
.PP
Casting operations for cases where _FromType is a standard pointer. _ToType can be a standard or non-standard pointer. 
.PP
Definition at line 89 of file cast.h.
.PP
References __static_pointer_cast().
.SS "template<typename _ToType , typename _FromType > _ToType __gnu_cxx::__static_pointer_cast (const _FromType & __arg)\fC [inline]\fP"
.PP
Casting operations for cases where _FromType is not a standard pointer. _ToType can be a standard or non-standard pointer. Given that _FromType is not a pointer, it must have a get() method that returns the standard pointer equivalent of the address it points to, and must have an element_type typedef which names the type it points to. 
.PP
Definition at line 61 of file cast.h.
.PP
References __static_pointer_cast().
.PP
Referenced by __static_pointer_cast().
.SS "size_t __gnu_cxx::_Bit_scan_forward (size_t __num)\fC [inline]\fP"
.PP
Generic Version of the bsf instruction. 
.PP
Definition at line 538 of file bitmap_allocator.h.
.PP
Referenced by __gnu_cxx::bitmap_allocator< _Tp >::_M_allocate_single_object().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator!= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test difference of string and C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs.compare\fP(\fI__rhs\fP) != 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2160 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator!= (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test difference of C string and string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__rhs.compare\fP(\fI__lhs\fP) != 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2147 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator!= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test difference of two strings. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs.compare\fP(\fI__rhs\fP) != 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2134 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > __gnu_cxx::operator+ (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, _CharT __rhs)\fC [inline]\fP"
.PP
Concatenate string and \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Last string. 
.RE
.PP
\fBReturns:\fP
.RS 4
New string with \fI__lhs\fP followed by \fI__rhs\fP. 
.RE
.PP

.PP
Definition at line 239 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > __gnu_cxx::operator+ (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Concatenate string and C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Last string. 
.RE
.PP
\fBReturns:\fP
.RS 4
New string with \fI__lhs\fP followed by \fI__rhs\fP. 
.RE
.PP

.PP
Definition at line 222 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > __gnu_cxx::operator+ (_CharT __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Concatenate \fBcharacter\fP and string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Last string. 
.RE
.PP
\fBReturns:\fP
.RS 4
New string with \fI__lhs\fP followed by \fI__rhs\fP. 
.RE
.PP

.PP
Definition at line 209 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > __gnu_cxx::operator+ (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Concatenate C string and string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Last string. 
.RE
.PP
\fBReturns:\fP
.RS 4
New string with value of \fI__lhs\fP followed by \fI__rhs\fP. 
.RE
.PP

.PP
Definition at line 192 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > __gnu_cxx::operator+ (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Concatenate two strings. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Last string. 
.RE
.PP
\fBReturns:\fP
.RS 4
New string with value of \fI__lhs\fP followed by \fI__rhs\fP. 
.RE
.PP

.PP
Definition at line 179 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator< (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if C string precedes string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP precedes \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2200 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator< (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test if string precedes C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP precedes \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2187 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator< (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if string precedes string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP precedes \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2174 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator<= (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if C string doesn't follow string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't follow \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2280 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator<= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test if string doesn't follow C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't follow \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2267 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator<= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if string doesn't follow string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't follow \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2254 of file vstring.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator== (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test equivalence of string and C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs.compare\fP(\fI__rhs\fP) == 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2120 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.PP
Referenced by std::locale::operator!=().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator== (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test equivalence of C string and string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__rhs.compare\fP(\fI__lhs\fP) == 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2107 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator== (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test equivalence of two strings. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs.compare\fP(\fI__rhs\fP) == 0. False otherwise. 
.RE
.PP

.PP
Definition at line 2083 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _Tp > bool __gnu_cxx::operator== (const _Pointer_adapter< _Tp > & __lhs, const _Pointer_adapter< _Tp > & __rhs)\fC [inline]\fP"
.PP
Comparison operators for \fB_Pointer_adapter\fP defer to the base class'es comparison operators, when possible. 
.PP
Definition at line 515 of file pointer.h.
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator> (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if C string follows string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP follows \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2240 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator> (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test if string follows C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP follows \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2227 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator> (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if string follows string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP follows \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2214 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator>= (const _CharT * __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if C string doesn't precede string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP C string. 
.br
\fI__rhs\fP String. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't precede \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2320 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator>= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const _CharT * __rhs)\fC [inline]\fP"
.PP
Test if string doesn't precede C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP String. 
.br
\fI__rhs\fP C string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't precede \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2307 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::operator>= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Test if string doesn't precede string. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if \fI__lhs\fP doesn't precede \fI__rhs\fP. False otherwise. 
.RE
.PP

.PP
Definition at line 2294 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::swap (__versa_string< _CharT, _Traits, _Alloc, _Base > & __lhs, __versa_string< _CharT, _Traits, _Alloc, _Base > & __rhs)\fC [inline]\fP"
.PP
Swap contents of two strings. 
.PP
\fBParameters:\fP
.RS 4
\fI__lhs\fP First string. 
.br
\fI__rhs\fP Second string.
.RE
.PP
Exchanges the contents of \fI__lhs\fP and \fI__rhs\fP in constant time. 
.PP
Definition at line 2334 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
