.TH "Non-Mutating Algorithms" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Non-Mutating Algorithms \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _ForwardIterator , typename _BinaryPredicate > _ForwardIterator \fBstd::adjacent_find\fP (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator > _ForwardIterator \fBstd::adjacent_find\fP (_ForwardIterator __first, _ForwardIterator __last)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fBstd::all_of\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fBstd::any_of\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Tp > iterator_traits< _InputIterator >::difference_type \fBstd::count\fP (_InputIterator __first, _InputIterator __last, const _Tp &__value)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > iterator_traits< _InputIterator >::difference_type \fBstd::count_if\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _IIter1 , typename _IIter2 , typename _BinaryPredicate > bool \fBstd::equal\fP (_IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _II1 , typename _II2 > bool \fBstd::equal\fP (_II1 __first1, _II1 __last1, _II2 __first2)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Tp > _InputIterator \fBstd::find\fP (_InputIterator __first, _InputIterator __last, const _Tp &__val)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 , typename _BinaryPredicate > _ForwardIterator1 \fBstd::find_end\fP (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator1 \fBstd::find_end\fP (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _ForwardIterator , typename _BinaryPredicate > _InputIterator \fBstd::find_first_of\fP (_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _ForwardIterator > _InputIterator \fBstd::find_first_of\fP (_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > _InputIterator \fBstd::find_if\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > _InputIterator \fBstd::find_if_not\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Function > _Function \fBstd::for_each\fP (_InputIterator __first, _InputIterator __last, _Function __f)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 , typename _BinaryPredicate > pair< _InputIterator1, _InputIterator2 > \fBstd::mismatch\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _InputIterator1 , typename _InputIterator2 > pair< _InputIterator1, _InputIterator2 > \fBstd::mismatch\fP (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)"
.br
.ti -1c
.RI "template<typename _InputIterator , typename _Predicate > bool \fBstd::none_of\fP (_InputIterator __first, _InputIterator __last, _Predicate __pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 , typename _BinaryPredicate > _ForwardIterator1 \fBstd::search\fP (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)"
.br
.ti -1c
.RI "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator1 \fBstd::search\fP (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Integer , typename _Tp , typename _BinaryPredicate > _ForwardIterator \fBstd::search_n\fP (_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred)"
.br
.ti -1c
.RI "template<typename _ForwardIterator , typename _Integer , typename _Tp > _ForwardIterator \fBstd::search_n\fP (_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename _ForwardIterator , typename _BinaryPredicate > _ForwardIterator std::adjacent_find (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Find two adjacent values in a sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIbinary_pred\fP A binary predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP such that \fCi\fP and \fCi+1\fP are both valid iterators in \fC\fP[first,last) and such that \fCbinary_pred\fP(*i,*(i+1)) is true, or \fClast\fP if no such \fBiterator\fP exists. 
.RE
.PP

.PP
Definition at line 4371 of file stl_algo.h.
.SS "template<typename _ForwardIterator > _ForwardIterator std::adjacent_find (_ForwardIterator __first, _ForwardIterator __last)\fC [inline]\fP"
.PP
Find two adjacent values in a sequence that are equal. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP such that \fCi\fP and \fCi+1\fP are both valid iterators in \fC\fP[first,last) and such that \fC*i\fP == \fC*\fP(i+1), or \fClast\fP if no such \fBiterator\fP exists. 
.RE
.PP

.PP
Definition at line 4339 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _Predicate > bool std::all_of (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Checks that a predicate is true for all the elements of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the check is true, false otherwise.
.RE
.PP
Returns true if \fCpred\fP is true for each element in the range \fC\fP[first,last), and false otherwise. 
.PP
Definition at line 744 of file stl_algo.h.
.PP
References std::find_if_not().
.SS "template<typename _InputIterator , typename _Predicate > bool std::any_of (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Checks that a predicate is false for at least an element of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the check is true, false otherwise.
.RE
.PP
Returns true if an element exists in the range \fC\fP[first,last) such that \fCpred\fP is true, and false otherwise. 
.PP
Definition at line 778 of file stl_algo.h.
.PP
References std::none_of().
.SS "template<typename _InputIterator , typename _Tp > iterator_traits<_InputIterator>::difference_type std::count (_InputIterator __first, _InputIterator __last, const _Tp & __value)\fC [inline]\fP"
.PP
Count the number of copies of a value in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIvalue\fP The value to be counted. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of iterators \fCi\fP in the range \fC\fP[first,last) for which \fC*i\fP == \fCvalue\fP 
.RE
.PP

.PP
Definition at line 4403 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _Predicate > iterator_traits<_InputIterator>::difference_type std::count_if (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Count the elements of a sequence for which a predicate is true. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of iterators \fCi\fP in the range \fC\fP[first,last) for which \fCpred(*i)\fP is true. 
.RE
.PP

.PP
Definition at line 4428 of file stl_algo.h.
.SS "template<typename _IIter1 , typename _IIter2 , typename _BinaryPredicate > bool std::equal (_IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Tests a range for element-wise equality. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP An input \fBiterator\fP. 
.br
\fIlast1\fP An input \fBiterator\fP. 
.br
\fIfirst2\fP An input \fBiterator\fP. 
.br
\fIbinary_pred\fP A binary predicate \fBfunctor\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean true or false.
.RE
.PP
This compares the elements of two ranges using the binary_pred parameter, and returns true or false depending on whether all of the corresponding elements of the ranges are equal. 
.PP
Definition at line 984 of file stl_algobase.h.
.SS "template<typename _II1 , typename _II2 > bool std::equal (_II1 __first1, _II1 __last1, _II2 __first2)\fC [inline]\fP"
.PP
Tests a range for element-wise equality. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP An input \fBiterator\fP. 
.br
\fIlast1\fP An input \fBiterator\fP. 
.br
\fIfirst2\fP An input \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean true or false.
.RE
.PP
This compares the elements of two ranges using \fC==\fP and returns true or false depending on whether all of the corresponding elements of the ranges are equal. 
.PP
Definition at line 952 of file stl_algobase.h.
.PP
Referenced by std::operator==().
.SS "template<typename _InputIterator , typename _Tp > _InputIterator std::find (_InputIterator __first, _InputIterator __last, const _Tp & __val)\fC [inline]\fP"
.PP
Find the first occurrence of a value in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIval\fP The value to find. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first,last) such that \fC*i\fP == \fCval\fP, or \fClast\fP if no such \fBiterator\fP exists. 
.RE
.PP

.PP
Definition at line 4215 of file stl_algo.h.
.PP
References std::__find(), and std::__iterator_category().
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 , typename _BinaryPredicate > _ForwardIterator1 std::find_end (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)\fC [inline]\fP"
.PP
Find last matching subsequence in a sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of range to search. 
.br
\fIlast1\fP End of range to search. 
.br
\fIfirst2\fP Start of sequence to match. 
.br
\fIlast2\fP End of sequence to match. 
.br
\fIcomp\fP The predicate to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
The last \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1-(last2-first2)) such that \fCpredicate\fP(*(i+N), \fC\fP(first2+N)) is true for each \fCN\fP in the range \fC\fP[0,last2-first2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for a sub-sequence that compares equal value-by-value with the sequence given by \fC\fP[first2,last2) using comp as a predicate and returns an \fBiterator\fP to the first element of the sub-sequence, or \fClast1\fP if the sub-sequence is not found. The sub-sequence will be the last such subsequence contained in [first,last1).
.PP
Because the sub-sequence must lie completely within the range \fC\fP[first1,last1) it must start at a position \fBless\fP than \fClast1-\fP(last2-first2) where \fClast2-first2\fP is the length of the sub-sequence. This means that the returned \fBiterator\fP \fCi\fP will be in the range \fC\fP[first1,last1-(last2-first2)) 
.PP
Definition at line 710 of file stl_algo.h.
.PP
References std::__iterator_category().
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator1 std::find_end (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\fC [inline]\fP"
.PP
Find last matching subsequence in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of range to search. 
.br
\fIlast1\fP End of range to search. 
.br
\fIfirst2\fP Start of sequence to match. 
.br
\fIlast2\fP End of sequence to match. 
.RE
.PP
\fBReturns:\fP
.RS 4
The last \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1-(last2-first2)) such that \fC*\fP(i+N) == \fC*\fP(first2+N) for each \fCN\fP in the range \fC\fP[0,last2-first2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for a sub-sequence that compares equal value-by-value with the sequence given by \fC\fP[first2,last2) and returns an \fBiterator\fP to the first element of the sub-sequence, or \fClast1\fP if the sub-sequence is not found. The sub-sequence will be the last such subsequence contained in [first,last1).
.PP
Because the sub-sequence must lie completely within the range \fC\fP[first1,last1) it must start at a position \fBless\fP than \fClast1-\fP(last2-first2) where \fClast2-first2\fP is the length of the sub-sequence. This means that the returned \fBiterator\fP \fCi\fP will be in the range \fC\fP[first1,last1-(last2-first2)) 
.PP
Definition at line 663 of file stl_algo.h.
.PP
References std::__iterator_category().
.SS "template<typename _InputIterator , typename _ForwardIterator , typename _BinaryPredicate > _InputIterator std::find_first_of (_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)\fC [inline]\fP"
.PP
Find element from a \fBset\fP in a sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of range to search. 
.br
\fIlast1\fP End of range to search. 
.br
\fIfirst2\fP Start of match candidates. 
.br
\fIlast2\fP End of match candidates. 
.br
\fIcomp\fP Predicate to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1) such that \fCcomp\fP(*i, \fC*\fP(i2)) is true and i2 is an \fBiterator\fP in [first2,last2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for an element that is equal to some element in the range [first2,last2). If found, returns an \fBiterator\fP in the range [first1,last1), otherwise returns \fClast1\fP. 
.PP
Definition at line 4308 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _ForwardIterator > _InputIterator std::find_first_of (_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)\fC [inline]\fP"
.PP
Find element from a \fBset\fP in a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP Start of range to search. 
.br
\fIlast1\fP End of range to search. 
.br
\fIfirst2\fP Start of match candidates. 
.br
\fIlast2\fP End of match candidates. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1) such that \fC*i\fP == \fC*\fP(i2) such that i2 is an \fBiterator\fP in [first2,last2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for an element that is equal to some element in the range [first2,last2). If found, returns an \fBiterator\fP in the range [first1,last1), otherwise returns \fClast1\fP. 
.PP
Definition at line 4268 of file stl_algo.h.
.SS "template<typename _InputIterator , typename _Predicate > _InputIterator std::find_if (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Find the first element in a sequence for which a predicate is true. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first,last) such that \fCpred(*i)\fP is true, or \fClast\fP if no such \fBiterator\fP exists. 
.RE
.PP

.PP
Definition at line 4239 of file stl_algo.h.
.PP
References std::__find_if(), and std::__iterator_category().
.SS "template<typename _InputIterator , typename _Predicate > _InputIterator std::find_if_not (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Find the first element in a sequence for which a predicate is false. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first,last) such that \fCpred(*i)\fP is false, or \fClast\fP if no such \fBiterator\fP exists. 
.RE
.PP

.PP
Definition at line 793 of file stl_algo.h.
.PP
References std::__find_if_not(), and std::__iterator_category().
.PP
Referenced by std::all_of(), and std::is_partitioned().
.SS "template<typename _InputIterator , typename _Function > _Function std::for_each (_InputIterator __first, _InputIterator __last, _Function __f)\fC [inline]\fP"
.PP
Apply a function to every element of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIf\fP A unary function object. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCf\fP.
.RE
.PP
Applies the function object \fCf\fP to each element in the range \fC\fP[first,last). \fCf\fP must not modify the order of the sequence. If \fCf\fP has a return value it is ignored. 
.PP
Definition at line 4194 of file stl_algo.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 , typename _BinaryPredicate > pair<_InputIterator1, _InputIterator2> std::mismatch (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Finds the places in ranges which don't match. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP An input \fBiterator\fP. 
.br
\fIlast1\fP An input \fBiterator\fP. 
.br
\fIfirst2\fP An input \fBiterator\fP. 
.br
\fIbinary_pred\fP A binary predicate \fBfunctor\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBpair\fP of iterators pointing to the first mismatch.
.RE
.PP
This compares the elements of two ranges using the binary_pred parameter, and returns a \fBpair\fP of iterators. The first \fBiterator\fP points into the first range, the second \fBiterator\fP points into the second range, and the elements pointed to by the iterators are not equal. 
.PP
Definition at line 1128 of file stl_algobase.h.
.SS "template<typename _InputIterator1 , typename _InputIterator2 > pair<_InputIterator1, _InputIterator2> std::mismatch (_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\fC [inline]\fP"
.PP
Finds the places in ranges which don't match. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP An input \fBiterator\fP. 
.br
\fIlast1\fP An input \fBiterator\fP. 
.br
\fIfirst2\fP An input \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBpair\fP of iterators pointing to the first mismatch.
.RE
.PP
This compares the elements of two ranges using \fC==\fP and returns a \fBpair\fP of iterators. The first \fBiterator\fP points into the first range, the second \fBiterator\fP points into the second range, and the elements pointed to by the iterators are not equal. 
.PP
Definition at line 1090 of file stl_algobase.h.
.SS "template<typename _InputIterator , typename _Predicate > bool std::none_of (_InputIterator __first, _InputIterator __last, _Predicate __pred)\fC [inline]\fP"
.PP
Checks that a predicate is false for all the elements of a sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP An input \fBiterator\fP. 
.br
\fIlast\fP An input \fBiterator\fP. 
.br
\fIpred\fP A predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the check is true, false otherwise.
.RE
.PP
Returns true if \fCpred\fP is false for each element in the range \fC\fP[first,last), and false otherwise. 
.PP
Definition at line 761 of file stl_algo.h.
.PP
Referenced by std::any_of(), and std::is_partitioned().
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 , typename _BinaryPredicate > _ForwardIterator1 std::search (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)\fC [inline]\fP"
.PP
Search a sequence for a matching sub-sequence using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP A forward \fBiterator\fP. 
.br
\fIlast1\fP A forward \fBiterator\fP. 
.br
\fIfirst2\fP A forward \fBiterator\fP. 
.br
\fIlast2\fP A forward \fBiterator\fP. 
.br
\fIpredicate\fP A binary predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1-(last2-first2)) such that \fCpredicate\fP(*(i+N),*(first2+N)) is true for each \fCN\fP in the range \fC\fP[0,last2-first2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for a sub-sequence that compares equal value-by-value with the sequence given by \fC\fP[first2,last2), using \fCpredicate\fP to determine equality, and returns an \fBiterator\fP to the first element of the sub-sequence, or \fClast1\fP if no such \fBiterator\fP exists.
.PP
\fBSee also:\fP
.RS 4
search(_ForwardIter1, _ForwardIter1, _ForwardIter2, _ForwardIter2) 
.RE
.PP

.PP
Definition at line 4540 of file stl_algo.h.
.SS "template<typename _ForwardIterator1 , typename _ForwardIterator2 > _ForwardIterator1 std::search (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)\fC [inline]\fP"
.PP
Search a sequence for a matching sub-sequence. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst1\fP A forward \fBiterator\fP. 
.br
\fIlast1\fP A forward \fBiterator\fP. 
.br
\fIfirst2\fP A forward \fBiterator\fP. 
.br
\fIlast2\fP A forward \fBiterator\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first1,last1-(last2-first2)) such that \fC*\fP(i+N) == \fC*\fP(first2+N) for each \fCN\fP in the range \fC\fP[0,last2-first2), or \fClast1\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first1,last1) for a sub-sequence that compares equal value-by-value with the sequence given by \fC\fP[first2,last2) and returns an \fBiterator\fP to the first element of the sub-sequence, or \fClast1\fP if the sub-sequence is not found.
.PP
Because the sub-sequence must lie completely within the range \fC\fP[first1,last1) it must start at a position \fBless\fP than \fClast1-\fP(last2-first2) where \fClast2-first2\fP is the length of the sub-sequence. This means that the returned \fBiterator\fP \fCi\fP will be in the range \fC\fP[first1,last1-(last2-first2)) 
.PP
Definition at line 4468 of file stl_algo.h.
.SS "template<typename _ForwardIterator , typename _Integer , typename _Tp , typename _BinaryPredicate > _ForwardIterator std::search_n (_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp & __val, _BinaryPredicate __binary_pred)\fC [inline]\fP"
.PP
Search a sequence for a number of consecutive values using a predicate. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIcount\fP The number of consecutive values. 
.br
\fIval\fP The value to find. 
.br
\fIbinary_pred\fP A binary predicate. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first,last-count) such that \fCbinary_pred\fP(*(i+N),val) is true for each \fCN\fP in the range \fC\fP[0,count), or \fClast\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first,last) for \fCcount\fP consecutive elements for which the predicate returns true. 
.PP
Definition at line 4650 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__search_n().
.SS "template<typename _ForwardIterator , typename _Integer , typename _Tp > _ForwardIterator std::search_n (_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp & __val)\fC [inline]\fP"
.PP
Search a sequence for a number of consecutive values. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP A forward \fBiterator\fP. 
.br
\fIlast\fP A forward \fBiterator\fP. 
.br
\fIcount\fP The number of consecutive values. 
.br
\fIval\fP The value to find. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first \fBiterator\fP \fCi\fP in the range \fC\fP[first,last-count) such that \fC*\fP(i+N) == \fCval\fP for each \fCN\fP in the range \fC\fP[0,count), or \fClast\fP if no such \fBiterator\fP exists.
.RE
.PP
Searches the range \fC\fP[first,last) for \fCcount\fP consecutive elements equal to \fCval\fP. 
.PP
Definition at line 4613 of file stl_algo.h.
.PP
References std::__iterator_category(), and std::__search_n().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
