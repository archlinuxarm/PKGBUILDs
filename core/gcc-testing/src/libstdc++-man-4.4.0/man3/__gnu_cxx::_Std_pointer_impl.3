.TH "__gnu_cxx::_Std_pointer_impl" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::_Std_pointer_impl \- A storage policy for use with _Pointer_adapter<> which yields a standard pointer.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBelement_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "_Tp * \fBget\fP () const "
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fB_Std_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fB_Std_pointer_impl\fP &__rarg) const "
.br
.ti -1c
.RI "void \fBset\fP (element_type *__arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp> class __gnu_cxx::_Std_pointer_impl< _Tp >"
A storage policy for use with _Pointer_adapter<> which yields a standard pointer. 

A _Storage_policy is required to provide 4 things: 1) A get() API for returning the stored pointer value. 2) An set() API for storing a pointer value. 3) An element_type typedef to define the type this points to. 4) An operator<() to support pointer comparison. 5) An operator==() to support pointer comparison. 
.PP
Definition at line 56 of file pointer.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
