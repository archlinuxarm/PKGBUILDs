.TH "Adaptors for pointers to functions" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Adaptors for pointers to functions \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBstd::pointer_to_binary_function< _Arg1, _Arg2, _Result >\fP"
.br
.RI "\fIOne of the \fBadaptors for function pointers\fP. \fP"
.ti -1c
.RI "class \fBstd::pointer_to_unary_function< _Arg, _Result >\fP"
.br
.RI "\fIOne of the \fBadaptors for function pointers\fP. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _Arg1 , typename _Arg2 , typename _Result > pointer_to_binary_function< _Arg1, _Arg2, _Result > \fBstd::ptr_fun\fP (_Result(*__x)(_Arg1, _Arg2))"
.br
.ti -1c
.RI "template<typename _Arg , typename _Result > pointer_to_unary_function< _Arg, _Result > \fBstd::ptr_fun\fP (_Result(*__x)(_Arg))"
.br
.in -1c
.SH "Detailed Description"
.PP 
The advantage of function objects over pointers to functions is that the objects in the standard library declare nested typedefs describing their argument and result types with uniform names (e.g., \fCresult_type\fP from the base classes \fC\fBunary_function\fP\fP and \fC\fBbinary_function\fP\fP). Sometimes those typedefs are required, not just optional.
.PP
Adaptors are provided to turn pointers to unary (single-argument) and binary (double-argument) functions into function objects. The long-winded functor \fC\fBpointer_to_unary_function\fP\fP is constructed with a function pointer \fCf\fP, and its \fCoperator()\fP called with argument \fCx\fP returns \fCf(x)\fP. The functor \fC\fBpointer_to_binary_function\fP\fP does the same thing, but with a double-argument \fCf\fP and \fCoperator()\fP.
.PP
The function \fCptr_fun\fP takes a pointer-to-function \fCf\fP and constructs an instance of the appropriate functor. 
.SH "Function Documentation"
.PP 
.SS "template<typename _Arg1 , typename _Arg2 , typename _Result > pointer_to_binary_function<_Arg1, _Arg2, _Result> std::ptr_fun (_Result(*)(_Arg1, _Arg2) __x)\fC [inline]\fP"
.PP
One of the \fBadaptors for function pointers\fP. 
.PP
Definition at line 463 of file stl_function.h.
.SS "template<typename _Arg , typename _Result > pointer_to_unary_function<_Arg, _Result> std::ptr_fun (_Result(*)(_Arg) __x)\fC [inline]\fP"
.PP
One of the \fBadaptors for function pointers\fP. 
.PP
Definition at line 437 of file stl_function.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
