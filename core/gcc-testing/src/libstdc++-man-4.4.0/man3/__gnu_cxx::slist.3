.TH "__gnu_cxx::slist" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::slist \- 
.SH SYNOPSIS
.br
.PP
Inherits __gnu_cxx::_Slist_base<_Tp,_Alloc>.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Base::allocator_type \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Slist_iterator< _Tp, const _Tp &, const _Tp * > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef const value_type * \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const value_type & \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Slist_iterator< _Tp, _Tp &, _Tp * > \fBiterator\fP"
.br
.ti -1c
.RI "typedef value_type * \fBpointer\fP"
.br
.ti -1c
.RI "typedef value_type & \fBreference\fP"
.br
.ti -1c
.RI "typedef size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<class _InputIterator > void \fB_M_assign_dispatch\fP (_InputIterator __first, _InputIterator __last, __false_type)"
.br
.ti -1c
.RI "template<class _Integer > void \fB_M_assign_dispatch\fP (_Integer __n, _Integer __val, __true_type)"
.br
.ti -1c
.RI "void \fB_M_fill_assign\fP (size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBassign\fP (size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "const_iterator \fBbefore_begin\fP () const "
.br
.ti -1c
.RI "iterator \fBbefore_begin\fP ()"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "const_iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __pos)"
.br
.ti -1c
.RI "iterator \fBerase_after\fP (iterator __before_first, iterator __last)"
.br
.ti -1c
.RI "iterator \fBerase_after\fP (iterator __pos)"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "template<class _InIterator > void \fBinsert\fP (iterator __pos, _InIterator __first, _InIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __pos, size_type __n, const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __pos)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __pos, const value_type &__x)"
.br
.ti -1c
.RI "template<class _InIterator > void \fBinsert_after\fP (iterator __pos, _InIterator __first, _InIterator __last)"
.br
.ti -1c
.RI "void \fBinsert_after\fP (iterator __pos, size_type __n, const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert_after\fP (iterator __pos)"
.br
.ti -1c
.RI "iterator \fBinsert_after\fP (iterator __pos, const value_type &__x)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "template<class _StrictWeakOrdering > void \fBmerge\fP (\fBslist\fP &, _StrictWeakOrdering)"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBslist\fP &__x)"
.br
.ti -1c
.RI "\fBslist\fP & \fBoperator=\fP (const \fBslist\fP &__x)"
.br
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.ti -1c
.RI "const_iterator \fBprevious\fP (const_iterator __pos) const "
.br
.ti -1c
.RI "iterator \fBprevious\fP (const_iterator __pos)"
.br
.ti -1c
.RI "void \fBpush_front\fP ()"
.br
.ti -1c
.RI "void \fBpush_front\fP (const value_type &__x)"
.br
.ti -1c
.RI "void \fBremove\fP (const _Tp &__val)"
.br
.ti -1c
.RI "template<class _Predicate > void \fBremove_if\fP (_Predicate __pred)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type new_size)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type new_size, const _Tp &__x)"
.br
.ti -1c
.RI "void \fBreverse\fP ()"
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "\fBslist\fP (const \fBslist\fP &__x)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBslist\fP (_InputIterator __first, _InputIterator __last, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBslist\fP (size_type __n)"
.br
.ti -1c
.RI "\fBslist\fP (size_type __n, const value_type &__x, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBslist\fP (const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "template<class _StrictWeakOrdering > void \fBsort\fP (_StrictWeakOrdering __comp)"
.br
.ti -1c
.RI "void \fBsort\fP ()"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __pos, \fBslist\fP &__x, iterator __first, iterator __last)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __pos, \fBslist\fP &__x, iterator __i)"
.br
.ti -1c
.RI "void \fBsplice\fP (iterator __pos, \fBslist\fP &__x)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (iterator __pos, \fBslist\fP &__x)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (iterator __pos, iterator __prev)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (iterator __pos, iterator __before_first, iterator __before_last)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBslist\fP &__x)"
.br
.ti -1c
.RI "template<class _BinaryPredicate > void \fBunique\fP (_BinaryPredicate __pred)"
.br
.ti -1c
.RI "void \fBunique\fP ()"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef _Alloc::template rebind< _Slist_node< _Tp > >::other \fB_Node_alloc\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "_Slist_node_base * \fB_M_erase_after\fP (_Slist_node_base *, _Slist_node_base *)"
.br
.ti -1c
.RI "_Slist_node_base * \fB_M_erase_after\fP (_Slist_node_base *__pos)"
.br
.ti -1c
.RI "_Slist_node< _Tp > * \fB_M_get_node\fP ()"
.br
.ti -1c
.RI "void \fB_M_put_node\fP (_Slist_node< _Tp > *__p)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "_Slist_node_base \fB_M_head\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class _Tp, class _Alloc = allocator<_Tp>> class __gnu_cxx::slist< _Tp, _Alloc >"
This is an SGI extension.
.PP
\fBTodo\fP
.RS 4
Doc me! See doc/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more. 
.RE
.PP

.PP
Definition at line 291 of file slist.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
