.TH "__gnu_cxx::__versa_string" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__versa_string \- Managing sequences of characters and character-like objects.  

.PP
.SH SYNOPSIS
.br
.PP
Inherits _Base<_CharT, _Traits, _Alloc>.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< const_pointer, \fB__versa_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< pointer, \fB__versa_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<class _InputIterator > \fB__versa_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (const _CharT *__s, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (const _CharT *__s, size_type __n, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n, const _Alloc &__a)"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "\fB__versa_string\fP (\fBstd::initializer_list\fP< _CharT > __l, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (\fB__versa_string\fP &&__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP (const _Alloc &__a)"
.br
.ti -1c
.RI "\fB__versa_string\fP ()"
.br
.ti -1c
.RI "template<class _InputIterator > \fB__versa_string\fP & \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator > \fB__versa_string\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "const_reference \fBat\fP (size_type __n) const "
.br
.ti -1c
.RI "const_reference \fBback\fP () const "
.br
.ti -1c
.RI "reference \fBback\fP ()"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const "
.br
.ti -1c
.RI "size_type \fBcapacity\fP () const "
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const "
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n, const \fB__versa_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fB__versa_string\fP &__str) const "
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const "
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const "
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const "
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const "
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "const_iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBerase\fP (size_type __pos=0, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __p, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos1, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, \fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBinsert\fP (iterator __p, _InputIterator __beg, _InputIterator __end)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBlength\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator+=\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator+=\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (\fB__versa_string\fP &&__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const "
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP ()"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, \fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, iterator __k1, iterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__k1, const _CharT *__k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2)"
.br
.ti -1c
.RI "template<class _InputIterator > \fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (iterator __i1, iterator __i2, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "void \fBreserve\fP (size_type __res_arg=0)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "\fB__versa_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fBnpos\fP) const "
.br
.ti -1c
.RI "void \fBswap\fP (\fB__versa_string\fP &&__s)"
.br
.ti -1c
.RI "\fB~__versa_string\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_type \fBnpos\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> class __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >"
Managing sequences of characters and character-like objects. 
.PP
Definition at line 49 of file vstring.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP ()\fC [inline]\fP"
.PP
Default constructor creates an empty string. 
.PP
Definition at line 127 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _Alloc & __a)\fC [inline, explicit]\fP"
.PP
Construct an empty string using allocator \fIa\fP. 
.PP
Definition at line 134 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Construct string with copy of value of \fIstr\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string. 
.RE
.PP

.PP
Definition at line 142 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __str)\fC [inline]\fP"
.PP
String move constructor. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string.
.RE
.PP
The newly-constructed string contains the exact contents of \fIstr\fP. The contents of \fIstr\fP are a valid, but unspecified string. 
.PP
Definition at line 154 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (\fBstd::initializer_list\fP< _CharT > __l, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string from an initializer list. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP \fBstd::initializer_list\fP of characters. 
.br
\fI__a\fP Allocator to use (default is default allocator). 
.RE
.PP

.PP
Definition at line 162 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"
.PP
Construct string as copy of a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string. 
.br
\fI__pos\fP Index of first \fBcharacter\fP to copy from. 
.br
\fI__n\fP Number of characters to copy (default remainder). 
.RE
.PP

.PP
Definition at line 173 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n, const _Alloc & __a)\fC [inline]\fP"
.PP
Construct string as copy of a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string. 
.br
\fI__pos\fP Index of first \fBcharacter\fP to copy from. 
.br
\fI__n\fP Number of characters to copy. 
.br
\fI__a\fP Allocator to use. 
.RE
.PP

.PP
Definition at line 188 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _CharT * __s, size_type __n, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string initialized by a \fBcharacter\fP array. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source \fBcharacter\fP array. 
.br
\fI__n\fP Number of characters to copy. 
.br
\fI__a\fP Allocator to use (default is default allocator).
.RE
.PP
NB: \fI__s\fP must have at least \fI__n\fP characters, '\\0' has no special meaning. 
.PP
Definition at line 205 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _CharT * __s, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as copy of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source C string. 
.br
\fI__a\fP Allocator to use (default is default allocator). 
.RE
.PP

.PP
Definition at line 214 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (size_type __n, _CharT __c, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters. 
.br
\fI__c\fP Character to use. 
.br
\fI__a\fP Allocator to use (default is default allocator). 
.RE
.PP

.PP
Definition at line 224 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator > \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Construct string as copy of a range. 
.PP
\fBParameters:\fP
.RS 4
\fI__beg\fP Start of range. 
.br
\fI__end\fP End of range. 
.br
\fI__a\fP Allocator to use (default is default allocator). 
.RE
.PP

.PP
Definition at line 234 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::~\fB__versa_string\fP ()\fC [inline]\fP"
.PP
Destroy the string instance. 
.PP
Definition at line 241 of file vstring.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator > \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Append a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first \fBcharacter\fP to append. 
.br
\fI__last\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends characters in the range [first,last) to this string. 
.PP
Definition at line 743 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (\fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Append an initializer_list of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 729 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), std::initializer_list< _E >::begin(), and std::initializer_list< _E >::end().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Append multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The number of characters to append. 
.br
\fI__c\fP The \fBcharacter\fP to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends n copies of c to this string. 
.PP
Definition at line 719 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const _CharT * __s)\fC [inline]\fP"
.PP
Append a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 702 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Append a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to append. 
.br
\fI__n\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 689 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n)\fC [inline]\fP"
.PP
Append a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append. 
.br
\fI__pos\fP Index of the first \fBcharacter\fP of str to append. 
.br
\fI__n\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fIpos\fP is not a valid index.
.RE
.PP
This function appends \fI__n\fP characters from \fI__str\fP starting at \fI__pos\fP to this string. If \fI__n\fP is is larger than the number of available characters in \fI__str\fP, the remainder of \fI__str\fP is appended. 
.PP
Definition at line 677 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_check(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_limit().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Append a string to this string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 660 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by std::getline(), and __gnu_cxx::operator+().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (\fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Set value to an initializer_list of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters to assign. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 860 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), std::initializer_list< _E >::begin(), and std::initializer_list< _E >::end().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator > \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Set value to a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first \fBcharacter\fP to append. 
.br
\fI__last\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Sets value of string to characters in the range [first,last). 
.PP
Definition at line 850 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Set value to multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Length of the resulting string. 
.br
\fI__c\fP The \fBcharacter\fP to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to \fI__n\fP copies of \fBcharacter\fP \fI__c\fP. 
.PP
Definition at line 836 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const _CharT * __s)\fC [inline]\fP"
.PP
Set value to contents of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the value of \fI__s\fP. The data is copied, so there is no dependence on \fI__s\fP once the function returns. 
.PP
Definition at line 819 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Set value to a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to use. 
.br
\fI__n\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the first \fI__n\fP characters of \fI__s\fP. If \fI__n\fP is is larger than the number of available characters in \fI__s\fP, the remainder of \fI__s\fP is used. 
.PP
Definition at line 803 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n)\fC [inline]\fP"
.PP
Set value to a substring of a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to use. 
.br
\fI__pos\fP Index of the first \fBcharacter\fP of str. 
.br
\fI__n\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fI__pos\fP is not a valid index.
.RE
.PP
This function sets this string to the substring of \fI__str\fP consisting of \fI__n\fP characters at \fI__pos\fP. If \fI__n\fP is is larger than the number of available characters in \fI__str\fP, the remainder of \fI__str\fP is used. 
.PP
Definition at line 786 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_check(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_limit().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Set value to contents of another string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 766 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::at (size_type __n)\fC [inline]\fP"
.PP
Provides access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The index of the \fBcharacter\fP to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the \fBcharacter\fP. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__n\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails. Success results in unsharing the string. 
.PP
Definition at line 570 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::at (size_type __n) const\fC [inline]\fP"
.PP
Provides access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The index of the \fBcharacter\fP to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (const) reference to the \fBcharacter\fP. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__n\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails. 
.PP
Definition at line 551 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::back () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reference to the data at the last element of the string. 
.PP
Definition at line 608 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::back ()\fC [inline]\fP"
.PP
Returns a read/write reference to the data at the last element of the string. 
.PP
Definition at line 600 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::begin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) iterator that points to the first \fBcharacter\fP in the string. 
.PP
Definition at line 318 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::begin ()\fC [inline]\fP"
.PP
Returns a read/write iterator that points to the first \fBcharacter\fP in the string. Unshares the string. 
.PP
Definition at line 307 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const _CharT* \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::c_str () const\fC [inline]\fP"
.PP
Return const pointer to null-terminated contents. 
.PP
This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1457 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::capacity () const\fC [inline]\fP"
.PP
Returns the total number of characters that the string can hold before needing to allocate more memory. 
.PP
Definition at line 463 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::cbegin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) iterator that points to the first \fBcharacter\fP in the string. 
.PP
Definition at line 382 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::cend () const\fC [inline]\fP"
.PP
Returns a read-only (constant) iterator that points one past the last \fBcharacter\fP in the string. 
.PP
Definition at line 390 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::clear ()\fC [inline]\fP"
.PP
Erases the string, making it empty. 
.PP
Definition at line 491 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const\fC [inline]\fP"
.PP
Compare substring against a \fBcharacter\fP array. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first \fBcharacter\fP of substring. 
.br
\fI__n1\fP Number of characters in substring. 
.br
\fI__s\fP \fBcharacter\fP array to compare against. 
.br
\fI__n2\fP Number of characters of s. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos1\fP. Form a string from the first \fI__n2\fP characters of \fI__s\fP. Returns an integer < 0 if this substring is ordered before the string from \fI__s\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the string from \fI__s\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fI__n2\fP. The function then compares the two strings by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first.
.PP
NB: s must have at least n2 characters, '\\0' has no special meaning. 
.PP
Definition at line 527 of file vstring.tcc.
.PP
References __gnu_parallel::min().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n1, const _CharT * __s) const\fC [inline]\fP"
.PP
Compare substring to a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP of substring. 
.br
\fI__n1\fP Number of characters in substring. 
.br
\fI__s\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos\fP. Returns an integer < 0 if the substring is ordered before \fI__s\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fI__s\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and the length of a string constructed from \fI__s\fP. The function then compares the two string by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 510 of file vstring.tcc.
.PP
References __gnu_parallel::min().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (const _CharT * __s) const\fC [inline]\fP"
.PP
Compare to a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fI__s\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fI__s\fP. Determines the effective length rlen of the strings to compare as the smallest of \fBsize()\fP and the length of a string constructed from \fI__s\fP. The function then compares the two strings by calling traits::compare(\fBdata()\fP,s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 494 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::length(), __gnu_parallel::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos1, size_type __n1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2) const\fC [inline]\fP"
.PP
Compare substring to a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first \fBcharacter\fP of substring. 
.br
\fI__n1\fP Number of characters in substring. 
.br
\fI__str\fP String to compare against. 
.br
\fI__pos2\fP Index of first \fBcharacter\fP of substring of str. 
.br
\fI__n2\fP Number of characters in substring of str. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos1\fP. Form the substring of \fI__str\fP from the \fI__n2\fP characters starting at \fI__pos2\fP. Returns an integer < 0 if this substring is ordered before the substring of \fI__str\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the substring of \fI__str\fP. Determines the effective length rlen of the strings to compare as the smallest of the lengths of the substrings. The function then compares the two strings by calling traits::compare(substring.data(),str.substr(pos2,n2).\fBdata()\fP,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 475 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_check(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_limit(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), and __gnu_parallel::min().
.SS "template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str) const\fC [inline]\fP"
.PP
Compare substring to a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP of substring. 
.br
\fI__n\fP Number of characters in substring. 
.br
\fI__str\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fI__n\fP characters starting at \fI__pos\fP. Returns an integer < 0 if the substring is ordered before \fI__str\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fI__str\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fI__str.size()\fP. The function then compares the two strings by calling traits::compare(substring.data(),str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 458 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_parallel::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str) const\fC [inline]\fP"
.PP
Compare to a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fI__str\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fI__str\fP. Determines the effective length rlen of the strings to compare as the smallest of \fBsize()\fP and str.size(). The function then compares the two strings by calling traits::compare(\fBdata()\fP, str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 1876 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), std::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::operator<(), __gnu_cxx::operator<=(), __gnu_cxx::operator==(), __gnu_cxx::operator>(), and __gnu_cxx::operator>=().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::copy (_CharT * __s, size_type __n, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Copy substring into C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to copy value into. 
.br
\fI__n\fP Number of characters to copy. 
.br
\fI__pos\fP Index of first \fBcharacter\fP to copy. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of characters actually copied 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > \fBsize()\fP.
.RE
.PP
Copies up to \fI__n\fP characters starting at \fI__pos\fP into the C string \fIs\fP. If \fI__pos\fP is greater than \fBsize()\fP, out_of_range is thrown. 
.PP
Definition at line 253 of file vstring.tcc.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::crbegin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse iterator that points to the last \fBcharacter\fP in the string. Iteration is done in reverse element order. 
.PP
Definition at line 399 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::crend () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse iterator that points to one before the first \fBcharacter\fP in the string. Iteration is done in reverse element order. 
.PP
Definition at line 408 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const _CharT* \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::data () const\fC [inline]\fP"
.PP
Return const pointer to contents. 
.PP
This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1467 of file vstring.h.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> bool \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::empty () const\fC [inline]\fP"
.PP
Returns true if the string is empty. Equivalent to *this == ''. 
.PP
Definition at line 498 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::end () const\fC [inline]\fP"
.PP
Returns a read-only (constant) iterator that points one past the last \fBcharacter\fP in the string. 
.PP
Definition at line 337 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::end ()\fC [inline]\fP"
.PP
Returns a read/write iterator that points one past the last \fBcharacter\fP in the string. Unshares the string. 
.PP
Definition at line 326 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (iterator __first, iterator __last)\fC [inline]\fP"
.PP
Remove a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first \fBcharacter\fP to remove. 
.br
\fI__last\fP Iterator referencing the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing location of first after removal.
.RE
.PP
Removes the characters in the range [first,last) from this string. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1092 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (iterator __position)\fC [inline]\fP"
.PP
Remove one \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP Iterator referencing the \fBcharacter\fP to remove. 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator referencing same location after removal.
.RE
.PP
Removes the \fBcharacter\fP at \fI__position\fP from this string. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1071 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"
.PP
Remove characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP to remove (default 0). 
.br
\fI__n\fP Number of characters to remove (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP is beyond the end of this string.
.RE
.PP
Removes \fI__n\fP characters from this string starting at \fI__pos\fP. The length of the string is reduced by \fI__n\fP. If there are < \fI__n\fP characters to remove, the remainder of the string is truncated. If \fI__p\fP is beyond end of string, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1055 of file vstring.h.
.PP
Referenced by std::getline().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 292 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the value of \fI__s\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1517 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for value of \fI__str\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1503 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from. 
.br
\fI__n\fP Number of characters from \fI__s\fP to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the first \fI__n\fP characters in \fI__s\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 268 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a different \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a \fBcharacter\fP other than \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 403 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP not in C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a \fBcharacter\fP not contained in \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1761 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP not in C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from. 
.br
\fI__n\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a \fBcharacter\fP not contained in the first \fI__n\fP characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 390 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP not in string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a \fBcharacter\fP not contained in \fI__str\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1731 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the \fBcharacter\fP \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to find(c, pos). 
.PP
Definition at line 1654 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP of C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1635 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP of C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from. 
.br
\fI__n\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the first \fI__n\fP characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 351 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP"
.PP
Find position of a \fBcharacter\fP of string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the characters of \fI__str\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1606 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a different \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a \fBcharacter\fP other than \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 437 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP not in C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a \fBcharacter\fP not contained in \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1823 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP not in C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from. 
.br
\fI__n\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a \fBcharacter\fP not contained in the first \fI__n\fP characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 415 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP not in string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to avoid. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a \fBcharacter\fP not contained in \fI__str\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1792 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to rfind(c, pos). 
.PP
Definition at line 1717 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP of C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1698 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP of C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from. 
.br
\fI__n\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the first \fI__n\fP characters of \fI__s\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 368 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP of string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the characters of \fI__str\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1669 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::front () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reference to the data at the first element of the string. 
.PP
Definition at line 592 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::front ()\fC [inline]\fP"
.PP
Returns a read/write reference to the data at the first element of the string. 
.PP
Definition at line 584 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> allocator_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::get_allocator () const\fC [inline]\fP"
.PP
Return copy of allocator used to construct this string. 
.PP
Definition at line 1474 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (iterator __p, _CharT __c)\fC [inline]\fP"
.PP
Insert one \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencing position in string to insert at. 
.br
\fI__c\fP The \fBcharacter\fP to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing newly inserted char. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts \fBcharacter\fP \fI__c\fP at position referenced by \fI__p\fP. If adding \fBcharacter\fP causes the length to exceed \fBmax_size()\fP, length_error is thrown. If \fI__p\fP is beyond end of string, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1030 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Insert multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index in string to insert at. 
.br
\fI__n\fP Number of characters to insert 
.br
\fI__c\fP The \fBcharacter\fP to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP is beyond the end of this string.
.RE
.PP
Inserts \fI__n\fP copies of \fBcharacter\fP \fI__c\fP starting at index \fI__pos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. If \fI__pos\fP > \fBlength()\fP, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1012 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, const _CharT * __s)\fC [inline]\fP"
.PP
Insert a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencing location in string to insert at. 
.br
\fI__s\fP The C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fI__n\fP characters of \fI__s\fP starting at \fI__pos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. If \fI__pos\fP is beyond \fBend()\fP, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 988 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Insert a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencing location in string to insert at. 
.br
\fI__s\fP The C string to insert. 
.br
\fI__n\fP The number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fI__n\fP characters of \fI__s\fP starting at \fI__pos\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. If \fI__pos\fP is beyond \fBend()\fP, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 969 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n)\fC [inline]\fP"
.PP
Insert a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencing location in string to insert at. 
.br
\fI__str\fP The string to insert. 
.br
\fI__pos2\fP Start of characters in str to insert. 
.br
\fI__n\fP Number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fI__pos1\fP > \fBsize()\fP or \fI__pos2\fP > \fI__str.size()\fP.
.RE
.PP
Starting at \fI__pos1\fP, insert \fI__n\fP \fBcharacter\fP of \fI__str\fP beginning with \fI__pos2\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. If \fI__pos1\fP is beyond the end of this string or \fI__pos2\fP is beyond the end of \fI__str\fP, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 946 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_check(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_limit().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Insert value of a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencing location in string to insert at. 
.br
\fI__str\fP The string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts value of \fI__str\fP starting at \fI__pos1\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 923 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (iterator __p, \fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Insert an initializer_list of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencing location in string to insert at. 
.br
\fI__l\fP The initializer_list of characters to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP. 
.RE
.PP

.PP
Definition at line 906 of file vstring.h.
.PP
References std::initializer_list< _E >::begin(), std::initializer_list< _E >::end(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator > void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (iterator __p, _InputIterator __beg, _InputIterator __end)\fC [inline]\fP"
.PP
Insert a range of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencing location in string to insert at. 
.br
\fI__beg\fP Start of range. 
.br
\fI__end\fP End of range. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts characters in range [beg,end). If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 895 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (iterator __p, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Insert multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencing location in string to insert at. 
.br
\fI__n\fP Number of characters to insert 
.br
\fI__c\fP The \fBcharacter\fP to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Inserts \fI__n\fP copies of \fBcharacter\fP \fI__c\fP starting at the position referenced by iterator \fI__p\fP. If adding characters causes the length to exceed \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 878 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::length () const\fC [inline]\fP"
.PP
Returns the number of characters in the string, not including any null-termination. 
.PP
Definition at line 423 of file vstring.h.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::max_size () const\fC [inline]\fP"
.PP
Returns the \fBsize()\fP of the largest possible string. 
.PP
Definition at line 428 of file vstring.h.
.PP
Referenced by std::getline().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (\fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Append an initializer_list of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters to be appended. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 650 of file vstring.h.
.PP
References std::initializer_list< _E >::begin(), and std::initializer_list< _E >::end().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (_CharT __c)\fC [inline]\fP"
.PP
Append a \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP The \fBcharacter\fP to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 637 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (const _CharT * __s)\fC [inline]\fP"
.PP
Append a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 628 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Append a string to this string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 619 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (_CharT __c)\fC [inline]\fP"
.PP
Set value to string of length 1. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Source \fBcharacter\fP.
.RE
.PP
Assigning to a \fBcharacter\fP makes this string length 1 and (*this)[0] == \fI__c\fP. 
.PP
Definition at line 295 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (const _CharT * __s)\fC [inline]\fP"
.PP
Copy contents of \fI__s\fP into this string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source null-terminated string. 
.RE
.PP

.PP
Definition at line 284 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (\fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Set value to string constructed from initializer list. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP \fBstd::initializer_list\fP. 
.RE
.PP

.PP
Definition at line 272 of file vstring.h.
.PP
References std::initializer_list< _E >::begin(), and std::initializer_list< _E >::end().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __str)\fC [inline]\fP"
.PP
String move assignment operator. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string.
.RE
.PP
The contents of \fI__str\fP are moved into this string (without copying). \fI__str\fP is a valid, but unspecified string. 
.PP
Definition at line 260 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Assign the value of \fIstr\fP to this string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string. 
.RE
.PP

.PP
Definition at line 248 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator[] (size_type __pos)\fC [inline]\fP"
.PP
Subscript access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP The index of the \fBcharacter\fP to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the \fBcharacter\fP.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see \fBat()\fP.) Unshares the string. 
.PP
Definition at line 530 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator[] (size_type __pos) const\fC [inline]\fP"
.PP
Subscript access to the data contained in the string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP The index of the \fBcharacter\fP to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (constant) reference to the \fBcharacter\fP.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see \fBat()\fP.) 
.PP
Definition at line 513 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::push_back (_CharT __c)\fC [inline]\fP"
.PP
Append a single \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to append. 
.RE
.PP

.PP
Definition at line 751 of file vstring.h.
.PP
Referenced by __gnu_cxx::operator+().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rbegin () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse iterator that points to the last \fBcharacter\fP in the string. Iteration is done in reverse element order. 
.PP
Definition at line 355 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBreverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rbegin ()\fC [inline]\fP"
.PP
Returns a read/write reverse iterator that points to the last \fBcharacter\fP in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 346 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rend () const\fC [inline]\fP"
.PP
Returns a read-only (constant) reverse iterator that points to one before the first \fBcharacter\fP in the string. Iteration is done in reverse element order. 
.PP
Definition at line 373 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBreverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rend ()\fC [inline]\fP"
.PP
Returns a read/write reverse iterator that points to one before the first \fBcharacter\fP in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 364 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, \fBstd::initializer_list\fP< _CharT > __l)\fC [inline]\fP"
.PP
Replace range of characters with initializer_list. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__l\fP The initializer_list of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1389 of file vstring.h.
.PP
References std::initializer_list< _E >::begin(), std::initializer_list< _E >::end(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator > \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)\fC [inline]\fP"
.PP
Replace range of characters with range. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__k1\fP Iterator referencing start of range to insert. 
.br
\fI__k2\fP Iterator referencing end of range to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1321 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Replace range of characters with multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__n\fP Number of characters to insert. 
.br
\fI__c\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, \fI__n\fP copies of \fI__c\fP are inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1298 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, const _CharT * __s)\fC [inline]\fP"
.PP
Replace range of characters with C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__s\fP C string value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the characters of \fI__s\fP are inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1277 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, const _CharT * __s, size_type __n)\fC [inline]\fP"
.PP
Replace range of characters with C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__s\fP C string value to insert. 
.br
\fI__n\fP Number of characters from s to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the first \fIn\fP characters of \fI__s\fP are inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1256 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (iterator __i1, iterator __i2, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Replace range of characters with string. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace. 
.br
\fI__i2\fP Iterator referencing end of range to replace. 
.br
\fI__str\fP String value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the value of \fI__str\fP is inserted. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1238 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c)\fC [inline]\fP"
.PP
Replace characters with multiple characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP to replace. 
.br
\fI__n1\fP Number of characters to be replaced. 
.br
\fI__n2\fP Number of characters to insert. 
.br
\fI__c\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, \fI__n2\fP copies of \fI__c\fP are inserted. If \fI__pos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1220 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, const _CharT * __s)\fC [inline]\fP"
.PP
Replace characters with value of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP to replace. 
.br
\fI__n1\fP Number of characters to be replaced. 
.br
\fI__s\fP C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the first \fI__n\fP characters of \fI__s\fP are inserted. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1196 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2)\fC [inline]\fP"
.PP
Replace characters with value of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP to replace. 
.br
\fI__n1\fP Number of characters to be replaced. 
.br
\fI__s\fP C string to insert. 
.br
\fI__n2\fP Number of characters from \fI__s\fP to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos1\fP > \fBsize()\fP. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the first \fI__n2\fP characters of \fI__s\fP are inserted, or all of \fI__s\fP if \fI__n2\fP is too large. If \fI__pos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1171 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos1, size_type __n1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2)\fC [inline]\fP"
.PP
Replace characters with value from another string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first \fBcharacter\fP to replace. 
.br
\fI__n1\fP Number of characters to be replaced. 
.br
\fI__str\fP String to insert. 
.br
\fI__pos2\fP Index of first \fBcharacter\fP of str to use. 
.br
\fI__n2\fP Number of characters from str to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos1\fP > \fBsize()\fP or \fI__pos2\fP > str.size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos1,pos1 + n) from this string. In place, the value of \fI__str\fP is inserted. If \fI__pos\fP is beyond end of string, out_of_range is thrown. If the length of the result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1143 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_check(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_limit().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"
.PP
Replace characters with value from another string. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP to replace. 
.br
\fI__n\fP Number of characters to be replaced. 
.br
\fI__str\fP String to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fI__pos\fP is beyond the end of this string. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
Removes the characters in the range [pos,pos+n) from this string. In place, the value of \fI__str\fP is inserted. If \fI__pos\fP is beyond end of string, out_of_range is thrown. If the length of the result exceeds \fBmax_size()\fP, length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1120 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::reserve (size_type __res_arg = \fC0\fP)\fC [inline]\fP"
.PP
Attempt to preallocate enough memory for specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__res_arg\fP Number of characters required. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If \fI__res_arg\fP exceeds \fC\fBmax_size()\fP\fP.
.RE
.PP
This function attempts to reserve enough memory for the string to hold the specified number of characters. If the number requested is more than \fBmax_size()\fP, length_error is thrown.
.PP
The advantage of this function is that if optimal code is a necessity and the user can determine the string length that will be required, the user can reserve the memory in advance, and thus prevent a possible reallocation of memory and copying of string data. 
.PP
Definition at line 484 of file vstring.h.
.PP
Referenced by __gnu_cxx::operator+().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::resize (size_type __n)\fC [inline]\fP"
.PP
Resizes the string to the specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters the string should contain.
.RE
.PP
This function will resize the string to the specified length. If the new size is smaller than the string's current size the string is truncated, otherwise the string is extended and new characters are default-constructed. For basic types such as char, this means setting them to 0. 
.PP
Definition at line 455 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize().
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::resize (size_type __n, _CharT __c)\fC [inline]\fP"
.PP
Resizes the string to the specified number of characters. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters the string should contain. 
.br
\fI__c\fP Character to fill any new elements.
.RE
.PP
This function will resize the string to the specified number of characters. If the number is smaller than the string's current size the string is truncated, otherwise the string is extended and new elements are set to \fI__c\fP. 
.PP
Definition at line 49 of file vstring.tcc.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a \fBcharacter\fP. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for \fI__c\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 333 of file vstring.tcc.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a C string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to start search at (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for the value of \fI__s\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1576 of file vstring.h.
.SS "template<typename _CharT, typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const _CharT * __s, size_type __pos, size_type __n) const\fC [inline]\fP"
.PP
Find last position of a C substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from. 
.br
\fI__n\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for the first \fI__n\fP characters in \fI__s\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 311 of file vstring.tcc.
.PP
References __gnu_parallel::min(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos, and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Find last position of a string. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to locate. 
.br
\fI__pos\fP Index of \fBcharacter\fP to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fI__pos\fP, searches backward for value of \fI__str\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1547 of file vstring.h.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size () const\fC [inline]\fP"
.PP
Returns the number of characters in the string, not including any null-termination. 
.PP
Definition at line 417 of file vstring.h.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert(), __gnu_cxx::operator+(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::substr (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP) const\fC [inline]\fP"
.PP
Get a substring. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first \fBcharacter\fP (default 0). 
.br
\fI__n\fP Number of characters in substring (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
The new string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > \fBsize()\fP.
.RE
.PP
Construct and return a new string using the \fI__n\fP characters starting at \fI__pos\fP. If the string is too short, use the remainder of the characters. If \fI__pos\fP is beyond the end of the string, out_of_range is thrown. 
.PP
Definition at line 1855 of file vstring.h.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::swap (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __s)\fC [inline]\fP"
.PP
Swap contents with another string. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String to swap with.
.RE
.PP
Exchanges the contents of this string with that of \fI__s\fP in constant time. 
.PP
Definition at line 1443 of file vstring.h.
.PP
Referenced by __gnu_cxx::swap().
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fBnpos\fP\fC [inline, static]\fP"
.PP
Value returned by various member functions when they fail. 
.PP
Definition at line 74 of file vstring.h.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
