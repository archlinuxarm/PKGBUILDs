.TH "std::move_iterator" 3 "21 Apr 2009" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::move_iterator \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBiterator_traits\fP< _Iterator >::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fBiterator_traits\fP< _Iterator >::iterator_category \fBiterator_category\fP"
.br
.ti -1c
.RI "typedef _Iterator \fBiterator_type\fP"
.br
.ti -1c
.RI "typedef _Iterator \fBpointer\fP"
.br
.ti -1c
.RI "typedef value_type && \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBiterator_traits\fP< _Iterator >::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "iterator_type \fBbase\fP () const "
.br
.ti -1c
.RI "template<typename _Iter > \fBmove_iterator\fP (const \fBmove_iterator\fP< _Iter > &__i)"
.br
.ti -1c
.RI "\fBmove_iterator\fP (iterator_type __i)"
.br
.ti -1c
.RI "reference \fBoperator*\fP () const "
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator+\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator+=\fP (difference_type __n)"
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator-\fP (difference_type __n) const "
.br
.ti -1c
.RI "\fBmove_iterator\fP \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "\fBmove_iterator\fP & \fBoperator-=\fP (difference_type __n)"
.br
.ti -1c
.RI "pointer \fBoperator->\fP () const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (difference_type __n) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "_Iterator \fB_M_current\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Iterator> class std::move_iterator< _Iterator >"
Class template \fBmove_iterator\fP is an \fBiterator\fP adapter with the same behavior as the underlying \fBiterator\fP except that its dereference operator implicitly converts the value returned by the underlying iterator's dereference operator to an rvalue reference. Some generic algorithms can be called with move iterators to replace copying with moving. 
.PP
Definition at line 882 of file stl_iterator.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
