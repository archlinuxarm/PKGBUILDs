// std::initializer_list support -*- C++ -*-

// Copyright (C) 2008, 2009 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
// 
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file initializer_list
 *  This is a Standard C++ Library header.
 */

#ifndef __CXX_INITIALIZER_LIST
#define __CXX_INITIALIZER_LIST

#ifdef __GXX_EXPERIMENTAL_CXX0X__

#pragma GCC visibility push(default)

#include <cstddef>

namespace std
{
  /// initializer_list
  template<class _E>
    class initializer_list
    {
      const _E* __array;
      size_t __len;

      // The compiler can call a private constructor.
      initializer_list(const _E* __a, size_t __l)
      : __array(__a), __len(__l) { }

    public:
      initializer_list()
      : __array(NULL), __len(0) { }

      // Number of elements.
      size_t size() const
      { return __len; }

      // First element.
      const _E* begin() const
      { return __array; }

      // One past the last element.
      const _E* end() const
      { return begin() + size(); }
  };
}

#pragma GCC visibility pop
#endif // C++0x
#endif // __CXX_INITIALIZER_LIST
