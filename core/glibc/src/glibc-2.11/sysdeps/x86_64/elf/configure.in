GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
# Local configure fragment for sysdeps/x86_64/elf.

if test "$usetls" != no; then
# Check for support of thread-local storage handling in assembler and linker.
AC_CACHE_CHECK(for x86-64 TLS support, libc_cv_x86_64_tls, [dnl
cat > conftest.s <<\EOF
	.section ".tdata", "awT", @progbits
	.globl foo
foo:	.quad	1
	.section ".tbss", "awT", @nobits
	.globl bar
bar:	.skip	8
	.text
baz:	leaq	bar@TLSLD(%rip), %rdi
	leaq	bar@DTPOFF(%rax), %rcx
	addq	foo@GOTTPOFF(%rip), %rax
	movq	$bar@TPOFF, %rdx
EOF
dnl
if AC_TRY_COMMAND(${CC-cc} -c $CFLAGS conftest.s 1>&AS_MESSAGE_LOG_FD); then
  libc_cv_x86_64_tls=yes
else
  libc_cv_x86_64_tls=no
fi
rm -f conftest*])
if test $libc_cv_x86_64_tls = yes; then
  AC_DEFINE(HAVE_TLS_SUPPORT)
fi
fi

dnl It is always possible to access static and hidden symbols in an
dnl position independent way.
AC_DEFINE(PI_STATIC_AND_HIDDEN)

dnl Check if -mavx works.
AC_CACHE_CHECK(for AVX support, libc_cv_cc_avx, [dnl
if AC_TRY_COMMAND([${CC-cc} -mavx -xc /dev/null -S -o /dev/null]); then
  libc_cv_cc_avx=yes
else
  libc_cv_cc_avx=no
fi])
if test $libc_cv_cc_avx = yes; then
  AC_DEFINE(HAVE_AVX_SUPPORT)
fi
