GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
# Local configure fragment for sysdeps/s390/elf.

if test "$usetls" != no; then
# Check for support of thread-local storage handling in assembler and
# linker.
AC_CACHE_CHECK(for s390 TLS support, libc_cv_390_tls, [dnl
cat > conftest.S <<\EOF
	.section ".tdata", "awT", @progbits
foo:	.long	25
	.text
	.quad	foo@TLSGD
	.quad	foo@TLSLDM
	.quad	foo@DTPOFF
	.quad	foo@NTPOFF
	.quad	foo@GOTNTPOFF
	.quad	foo@INDNTPOFF
	lg	%r1,foo@GOTNTPOFF(%r12)
	lg	%r1,0(%r1):tls_load:foo
	brasl	%r14,__tls_get_offset@plt:tls_gdcall:foo
	brasl	%r14,__tls_get_offset@plt:tls_ldcall:foo
EOF
dnl
if AC_TRY_COMMAND(${CC-cc} -S $CFLAGS conftest.S 1>&AS_MESSAGE_LOG_FD); then
  libc_cv_390_tls=yes
else
  libc_cv_390_tls=no
fi
rm -f conftest*])
if test $libc_cv_390_tls = yes; then
  AC_DEFINE(HAVE_TLS_SUPPORT)
fi
fi

dnl It is always possible to access static and hidden symbols in an
dnl position independent way.
AC_DEFINE(PI_STATIC_AND_HIDDEN)
