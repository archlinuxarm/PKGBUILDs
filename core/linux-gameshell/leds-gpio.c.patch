--- a/drivers/leds/leds-gpio.c
+++ b/drivers/leds/leds-gpio.c
@@ -25,6 +25,8 @@
 	gpio_blink_set_t platform_gpio_blink_set;
 };

+static int leds_gpio_proc_init(const char *name);
+
 static inline struct gpio_led_data *
 			cdev_to_gpio_led_data(struct led_classdev *led_cdev)
 {
@@ -108,6 +110,8 @@
 	if (ret < 0)
 		return ret;

+	leds_gpio_proc_init(led_dat->cdev.name);
+
 	if (template->name) {
 		led_dat->cdev.name = template->name;
 		ret = devm_led_classdev_register(parent, &led_dat->cdev);
@@ -125,6 +129,8 @@
 	struct gpio_led_data leds[];
 };

+static struct gpio_leds_priv *leds_priv;
+
 static inline int sizeof_gpio_leds_priv(int num_leds)
 {
 	return sizeof(struct gpio_leds_priv) +
@@ -189,6 +195,7 @@
 		priv->num_leds++;
 	}

+	leds_priv = priv;
 	return priv;
 }

@@ -316,6 +323,83 @@

 module_platform_driver(gpio_led_driver);

+
+#ifdef CONFIG_PROC_FS
+
+#include <linux/proc_fs.h>
+#include <linux/uaccess.h>
+
+static char global_buffer[64];
+
+static int leds_gpio_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "leds_gpio\n");
+	return 0;
+}
+
+static int leds_gpio_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, leds_gpio_proc_show, NULL);
+}
+
+static int leds_gpio_proc_read(struct file * file, char __user * buf, size_t size, loff_t * loff)
+{
+	int value, len, i;
+
+	for(i = 0; i < leds_priv->num_leds; i++) {
+		if(strcmp(leds_priv->leds[i].cdev.name, file->f_path.dentry->d_iname) == 0) {
+			value = leds_priv->leds[i].cdev.brightness;
+			len = snprintf(global_buffer, sizeof(global_buffer), "%d\n", value);
+			return simple_read_from_buffer(buf, size, loff, global_buffer, len);
+		}
+	}
+
+	return 0;
+}
+
+static int leds_gpio_proc_write(struct file * file, const char __user * buf, size_t size, loff_t * loff)
+{
+	int value, i;
+
+	if(copy_from_user(global_buffer, buf, size))
+		return -EFAULT;
+
+	global_buffer[size] = 0;
+	for(i = 0; i < leds_priv->num_leds; i++) {
+		if(strcmp(leds_priv->leds[i].cdev.name, file->f_path.dentry->d_iname) == 0) {
+			value = simple_strtol(global_buffer, 0, 10);
+			gpio_led_set(&leds_priv->leds[i].cdev, value);
+			leds_priv->leds[i].cdev.brightness = value;
+			break;
+		}
+	}
+
+	return size;
+}
+
+static const struct file_operations leds_gpio_proc_fops = {
+	.open		= leds_gpio_proc_open,
+	.read		= leds_gpio_proc_read,
+	.write		= leds_gpio_proc_write,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static int leds_gpio_proc_init(const char *name)
+{
+	struct proc_dir_entry *r;
+	char buf[50];
+
+	sprintf(buf, "driver/%s", name);
+	r = proc_create(buf, S_IRWXUGO, NULL, &leds_gpio_proc_fops);
+	if (!r)
+		return -ENOMEM;
+	return 0;
+}
+#else
+static inline int leds_gpio_proc_init(const char *name) { return 0; }
+#endif /* CONFIG_PROC_FS */
+
 MODULE_AUTHOR("Raphael Assenat <raph@8d.com>, Trent Piepho <tpiepho@freescale.com>");
 MODULE_DESCRIPTION("GPIO LED driver");
 MODULE_LICENSE("GPL");
