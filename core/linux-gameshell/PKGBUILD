# gameshell kernel
# Maintainer: r043v - noferi mickaÃ«l noferov@gmail.com
# based on linux-armv7-rc package from Kevin Mihelich <kevin@archlinuxarm.org>

buildarch=4

_rcver=5.4
_rcrel=6
#_rcnrel=armv7-x4

pkgbase=linux-gameshell
_srcname=linux-${_rcver}-rc${_rcrel}
_kernelname=${pkgbase#linux}
_desc="gameshell (release candidate)"
pkgver=${_rcver}.rc${_rcrel}
pkgrel=1
arch=('armv7h')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'vboot-utils' 'dtc')
options=('!strip')
# "https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/master/core/linux-armv7-rc/config"
source=("https://git.kernel.org/torvalds/t/${_srcname}.tar.gz"
        'kernel.its'
        'kernel.keyblock'
        'linux.preset'
        '99-linux.hook'
        'axp20x-pek.c.patch'
        'axp20x.c.patch'
        'fbcon.c.patch'
        'fbmem.c.patch'
        'Kconfig.patch'
        'kd027_lcd.c'
        'leds-gpio.c.patch'
        'Makefile.patch.000'
        'Makefile.patch.001'
        'ocp8178_bl.c.patch'
        'panel-simple.c.patch'
        'sdio.c.patch'
        'sun4i_drv.c.patch'
        'sun6i-prcm.c.patch'
        'sun8i-codec-aif2.c.patch'
        'sun8i-codec-analog.c.patch'
        'sun8i-codec.c.patch'
        'sun8i-r16-clockworkpi-cpi3.dts.patch'
        'sun8i-r16-clockworkpi-cpi3-hdmi.dts.patch'
        'gameshell_defconfig')
md5sums=('58b2b15fb3c429948051ce4f12f30c37'
         '4f2379ed84258050edb858ee8d281678'
         '61c5ff73c136ed07a7aadbf58db3d96a'
         'ae7ccb81e057c4d81401e725f102ee5f'
         '79fa396e3f9a09a85156d6d7c2d34b58'
         'b683f29800a01d6c4f0d35ebd1e7e8dd'
         '6527384ca37d3a11bc3f8c76482bdf22'
         '1e810fd0562c2df592bc74646b8c9e14'
         '17f6d1aa461e4a94203271893fccdc57'
         'cfa3aef146a8e556ea13f95590daad8a'
         '2488e24ac330ec732820784ccf667af9'
         '4362b7f317c0ddbb1be23f08d0078496'
         '080d10329b987cef1b7ba90379b7748d'
         'f8c96827a8001a6646ae20b2af393bbd'
         'f2a52a896caa06d8df0e78da05d190f9'
         '428338a287c4e8fe807a5d8a50ca9086'
         'de0a89db1262fd3c1d7d2bf00ee05fed'
         'c4de9489f71dd12277e3162ee2913287'
         '8ba1f2536f56f54818daffbbd8274303'
         '0163e3949f1922118ecff3b2271cbe05'
         'a5dfb660f7c23046c90b24bc17ff6bfd'
         'd5333d180213c8babdb98bb957b6a31b'
         'c4035ebef02f93bdfb980e89a32ffb60'
         'b753b881f8a62e18fa33825b0158753a'
         'bba635c1315dda71b8f98f090650d8b1')

prepare() {
  cd "${srcdir}/${_srcname}"

  # RCN patch
#  git apply ../patch-${_rcver}-rc${_rcrel}-${_rcnrel}.diff
  rm -f scripts/bin2c

  # gameshell specifics
  git apply -v ../axp20x-pek.c.patch
  git apply -v ../axp20x.c.patch
  git apply -v ../fbcon.c.patch
  git apply -v ../fbmem.c.patch
  git apply -v ../Kconfig.patch
  git apply -v ../leds-gpio.c.patch
  git apply -v ../Makefile.patch.000
  git apply -v ../Makefile.patch.001
  git apply -v ../ocp8178_bl.c.patch
  git apply -v ../panel-simple.c.patch
  git apply -v ../sdio.c.patch
  git apply -v ../sun4i_drv.c.patch
  #git apply -v ../sun4i-i2s.c.patch
  git apply -v ../sun6i-prcm.c.patch
  git apply -v ../sun8i-codec-aif2.c.patch
  git apply -v ../sun8i-codec-analog.c.patch
  git apply -v ../sun8i-codec.c.patch
  git apply -v ../sun8i-r16-clockworkpi-cpi3.dts.patch
  git apply -v ../sun8i-r16-clockworkpi-cpi3-hdmi.dts.patch

  cp ../kd027_lcd.c ./drivers/video/backlight/kd027_lcd.c
  cp ../gameshell_defconfig ./arch/arm/configs/

  #count=$(grep -c "clockworkpi" ./arch/arm/boot/dts/Makefile)
  #if [ $count != 2 ];then
    awk '1;/dtb\-\$\(CONFIG_MACH_SUN8I\) \+= \\/{ print "sun8i-r16-clockworkpi-cpi3.dtb \\"; print "sun8i-r16-clockworkpi-cpi3-hdmi.dtb \\"}' ./arch/arm/boot/dts/Makefile > ./tmp
    mv ./tmp ./arch/arm/boot/dts/Makefile
  #fi

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  make gameshell_defconfig
}

build() {
  cd "${srcdir}/${_srcname}"

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # Copy back our configuration (use with new kernel version)
  #cp ./.config ../${pkgbase}.config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  #yes "" | make config

  # build!
  make -j$(nproc) ${MAKEFLAGS} zImage modules dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  provides=('kernel26' "linux=${pkgver}")
  conflicts=('linux')
  replaces=('linux-mvebu')
  install=${pkgname}.install

  cd "${srcdir}/${_srcname}"

  KARCH=arm

  # get kernel version
  _kernver="$(make kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot/dtbs}
  make INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/zImage "${pkgdir}/boot/zImage"
  cp arch/$KARCH/boot/dts/*.dtb "${pkgdir}/boot/dtbs"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${pkgname}.install"

  # install mkinitcpio preset file for kernel
  install -D -m644 "${srcdir}/linux.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
  sed \
    -e "1s|'linux.*'|'${pkgbase}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"${_kernver}\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hook for initramfs regeneration
  sed "s|%PKGBASE%|${pkgbase}|g" "${srcdir}/99-linux.hook" |
    install -D -m644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/99-${pkgbase}.hook"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "$pkgdir/lib" "$pkgdir/usr"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')
  replaces=('linux-mvebu-headers')

  cd ${_srcname}
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s arch/$KARCH/kernel/module.lds

  cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
  for i in dove exynos omap2; do
    mkdir -p "${_builddir}/arch/${KARCH}/mach-${i}"
    cp -t "${_builddir}/arch/${KARCH}/mach-${i}" -a arch/$KARCH/mach-${i}/include
  done
  for i in omap orion samsung versatile; do
    mkdir -p "${_builddir}/arch/${KARCH}/plat-${i}"
    cp -t "${_builddir}/arch/${KARCH}/plat-${i}" -a arch/$KARCH/plat-${i}/include
  done

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */${KARCH}/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # remove now broken symlinks
  find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
