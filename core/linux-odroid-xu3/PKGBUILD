# ODROID-XU3/4
# Maintainer: Kevin Mihelich <kevin@archlinuxarm.org>

buildarch=4

pkgbase=linux-odroid-xu3
_commit=1b5323e6f3256b9b2024c75e0d86fc5f897d7dfe
_srcname=linux-${_commit}
_kernelname=${pkgbase#linux}
_desc="ODROID-XU3/XU4/HC1, odroid-6.6.y branch"
pkgver=6.6.113
pkgrel=1
arch=('armv7h')
url="https://github.com/hardkernel/linux"
license=('GPL-2.0-only')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'cpio')
options=('!strip')
source=("linux-odroid-$_commit.tar.gz::https://github.com/hardkernel/linux/archive/${_commit}.tar.gz"
        'config'
        'linux.preset'
        'patch-6.6.68-69.patch'
        'patch-6.6.69-70.patch'
        'patch-6.6.70-71.patch'
        'patch-6.6.71-72.patch'
        'patch-6.6.72-73.patch'
        'patch-6.6.73-74.patch'
        'patch-6.6.74-75.patch'
        'patch-6.6.75-76.patch'
        'patch-6.6.76-77.patch'
        'patch-6.6.77-78.patch'
        'patch-6.6.78-79.patch'
        'patch-6.6.79-80.patch'
        'patch-6.6.80-81.patch'
        'patch-6.6.81-82.patch'
        'patch-6.6.82-83.patch'
        'patch-6.6.83-84.patch'
        'patch-6.6.84-85.patch'
        'patch-6.6.85-86.patch'
        'patch-6.6.86-87.patch'
        'patch-6.6.87-88.patch'
        'patch-6.6.88-89.patch'
        'patch-6.6.89-90.patch'
        'patch-6.6.90-91.patch'
        'patch-6.6.91-92.patch'
        'patch-6.6.92-93.patch'
        'patch-6.6.93-94.patch'
        'patch-6.6.94-95.patch'
        'patch-6.6.95-96.patch'
        'patch-6.6.96-97.patch'
        'patch-6.6.97-98.patch'
        'patch-6.6.98-99-fixed.patch'
        'patch-6.6.99-100.patch'
        'patch-6.6.100-101.patch'
        'patch-6.6.101-102.patch'
        'patch-6.6.102-103.patch'
        'patch-6.6.103-104.patch'
        'patch-6.6.104-105.patch'
        'patch-6.6.105-106.patch'
        'patch-6.6.106-107.patch'
        'patch-6.6.107-108.patch'
        'patch-6.6.108-109.patch'
        'patch-6.6.109-110.patch'
        'patch-6.6.110-111.patch'
        'patch-6.6.111-112.patch'
        'patch-6.6.112-113.patch')
md5sums=('dc8150606b54577ff452d20c98faaa1c'
         '52ab04363851d07183405e002164c0fe'
         '8b93b6ca167f70c60277f352f7b78024'
         'bead89ce3a667b2067f30a5b895e4425'
         '8afa5d2796f6a1288d61ba240421b1d5'
         'a002ee0e68fbd98d12fe4399d9edc96d'
         '1ac84d2a69fe8ff378e83b94aa017da4'
         '3b607a6c760b4ad7d2e01ecaee4f64a3'
         'f312f3563d6d66c7a9cd60aa8e028f0b'
         '4e6bbb428144aadccd5ebb1b12bcedb9'
         'e1dba24fde3df1ddd1e67fb5f32afae1'
         '0501f0ddc867b9a45eb0acc942578d9a'
         '7b4c5035c6354937ba74d0bf9ea7eaad'
         '7296e67ee8bc60b73e00cffaad6e63c6'
         'a351735fbffb0dd0bb98d7055adb2180'
         'bbb509f2bb12fedb26d09faee4e1bcaf'
         '7b020d74384399d15567a915ade977c4'
         '4ef59095b1d93598e8598838b08ebee2'
         'e85ad0375c7e3be03d21f35c797dbbd4'
         'd2193f9472d0aa2331984d70b563aacf'
         '37533becf567f0536a548cd25e62b382'
         'c0fb755e18430edf0330b078f66d8750'
         '904213dee814286becc043fa389ba31c'
         'aea8c86bff3f2755cd73d63cedb9f2e3'
         '242623b8c0fb58bd9ecc29dd67aaad0d'
         '78750b56ce0fb2d4ebc4fc5f4d2f0f7e'
         'b3875bc7fc57bb7ef2f55891a73cec1c'
         'e6bb8bca3303eb12b3223dda2d0d5e75'
         '257ac69a7059ae7762d47b12bc93a4d7'
         '27ae83113ddd52e6c8a4fb83972c78e3'
         'd226cd20b86d104d3743c5c89e2bec1a'
         '4ec77689f1ed22b7b26261d15a3581ea'
         '53c34e3bb656a3ae070e747a1b7d27b7'
         '5a061883758378aded4efa540aed5648'
         '97e60ccaf8c78ee4351869275865aa00'
         '226943e292dbd5a4f707712a875e4494'
         '406ba98b0dbbe23cede95aa626609928'
         '98959594a32ec03b0045646d8eed55e5'
         'b1220a02abc47ad9b2f49a5ae3cf8c88'
         'bbc1552e810bac5c2705d588b73a864d'
         '681e241a82bf2f5bbc2e56c5455aa267'
         '8639eedb2937da7cbe5307fadb19a892'
         '9a92ceb4c64ad449cf9f55d0106d963c'
         '4448000e2505f0f161331821797d2dd4'
         '4707ea0844e15d38117b0b9e292b6e7f'
         '3ede01cc9259451776bad2eb175de616'
         '13ff7707e2120b4391f34d4feb23ff11'
         '41b7c9814027a1980ab002bd4e75f583')

prepare() {
  cd $_srcname

  mapfile -t patches < <(printf '%s\n' "${source[@]}" | grep '.patch')
  for patch in "${patches[@]}"; do
    msg2 "Applying patch $patch..."
    patch -Np1 < "../$patch"
  done

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  cat "${srcdir}/config" > ./.config
}

build() {
  cd $_srcname

  # get kernel version
  make prepare
  make -s kernelrelease > version

  # build!
  make ${MAKEFLAGS} zImage modules dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('linux-firmware: firmware images needed for some devices'
              'wireless-regdb: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}" "WIREGUARD-MODULE")
  conflicts=('linux')
  install=${pkgname}.install

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image and dtbs..."
  install -Dm644 arch/arm/boot/zImage -t "${pkgdir}/boot"
  make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 DEPMOD=/doesnt/exist modules_install

  # remove build link
  rm "$modulesdir"/build

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # rather than use another hook (90-linux.hook) rely on mkinitcpio's 90-mkinitcpio-install.hook
  # which avoids a double run of mkinitcpio that can occur
  install -d "${pkgdir}/usr/lib/initcpio/"
  echo "dummy file to trigger mkinitcpio to run" > "${pkgdir}/usr/lib/initcpio/$kernver"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm" -m644 arch/arm/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include

  install -Dt "$builddir/arch/arm/kernel" -m644 arch/arm/kernel/asm-offsets.s

  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
