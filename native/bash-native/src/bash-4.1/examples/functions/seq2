# Generate a sequence from m to n, m defaults to 1.

seq ()
{
	declare -i lo hi i	# makes local
	local _SEQ INIT COMPARE STEP

	case "$1" in
	-r)	INIT='i=$hi _SEQ=""' COMPARE='let "i >= $lo"' STEP='let i-=1' ; shift ;;
	*)	INIT='i=$lo _SEQ=""' COMPARE='let "i <= $hi"' STEP='let i+=1' ;;
	esac

	case $# in
	1) lo=1 hi="$1" ;;
	2) lo=$1 hi=$2 ;;
	*) echo seq: usage: seq [-r] [low] high 1>&2 ; return 2 ;;
	esac

	# equivalent to the as-yet-unimplemented
	# for (( "$INIT" ; "$COMPARE" ; "$STEP" )); do _SEQ="${_SEQ}$i "; done
	eval "$INIT"
	while eval "$COMPARE"; do
		_SEQ="${_SEQ}$i "
		eval "$STEP"
	done
	echo "${_SEQ# }"
	return 0
}

# like the APL `iota' function (or at least how I remember it :-)
iota()
{
	case $# in
	1) seq 1 "$1"; return $?;;
	*) echo "iota: usage: iota high" 1>&2; return 2;;
	esac
}
