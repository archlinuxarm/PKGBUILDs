.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "native::Repos 3"
.TH native::Repos 3 "2008-03-17" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SVN::Repos \- Subversion repository functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use SVN::Core;
\&    use SVN::Repos;
\&    use SVN::Fs;
\&
\&    my $repos = SVN::Repos::open(\*(Aq/path/to/repos\*(Aq);
\&    print $repos\->fs()\->youngest_rev;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SVN::Repos wraps the object-oriented \f(CW\*(C`svn_repos_t\*(C'\fR functions, providing
access to a Subversion repository on the local filesystem.
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
.IP "SVN::Repos::open($path)" 4
.IX Item "SVN::Repos::open($path)"
This function opens an existing repository, and returns an
\&\f(CW\*(C`SVN::Repos\*(C'\fR object.
.ie n .IP "create($path, undef, undef, $config, $fs_config)" 4
.el .IP "create($path, undef, undef, \f(CW$config\fR, \f(CW$fs_config\fR)" 4
.IX Item "create($path, undef, undef, $config, $fs_config)"
This function creates a new repository, and returns an \f(CW\*(C`SVN::Repos\*(C'\fR
object.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "$repos\->dump_fs($dump_fh, $feedback_fh, $start_rev, $end_rev, $incremental, $cancel_func, $cancel_baton)" 4
.el .IP "\f(CW$repos\fR\->dump_fs($dump_fh, \f(CW$feedback_fh\fR, \f(CW$start_rev\fR, \f(CW$end_rev\fR, \f(CW$incremental\fR, \f(CW$cancel_func\fR, \f(CW$cancel_baton\fR)" 4
.IX Item "$repos->dump_fs($dump_fh, $feedback_fh, $start_rev, $end_rev, $incremental, $cancel_func, $cancel_baton)"
.PD 0
.ie n .IP "$repos\->dump_fs2($dump_fh, $feedback_fh, $start_rev, $end_rev, $incremental, $deltify, $cancel_func, $cancel_baton)" 4
.el .IP "\f(CW$repos\fR\->dump_fs2($dump_fh, \f(CW$feedback_fh\fR, \f(CW$start_rev\fR, \f(CW$end_rev\fR, \f(CW$incremental\fR, \f(CW$deltify\fR, \f(CW$cancel_func\fR, \f(CW$cancel_baton\fR)" 4
.IX Item "$repos->dump_fs2($dump_fh, $feedback_fh, $start_rev, $end_rev, $incremental, $deltify, $cancel_func, $cancel_baton)"
.PD
Create a dump file of the repository from revision \f(CW$start_rev\fR to \f(CW$end_rev\fR
, store it into the filehandle \f(CW$dump_fh\fR, and write feedback on the progress
of the operation to filehandle \f(CW$feedback_fh\fR.
.Sp
If \f(CW$incremental\fR is \s-1TRUE\s0, the first revision dumped will be a diff
against the previous revision (usually it looks like a full dump of
the tree).
.Sp
If \f(CW$use_deltas\fR is \s-1TRUE\s0, output only node properties which have
changed relative to the previous contents, and output text contents
as svndiff data against the previous contents.  Regardless of how
this flag is set, the first revision of a non-incremental dump will
be done with full plain text.  A dump with \f(CW@a\fR use_deltas set cannot
be loaded by Subversion 1.0.x.
.Sp
According to svn_repos.h, the \f(CW$cancel_func\fR is a function that is called
periodically and given \f(CW$cancel_baton\fR as a parameter to determine whether
the client wishes to cancel the dump.  You must supply \f(CW\*(C`undef\*(C'\fR at the very
least.
.Sp
Example:
.Sp
.Vb 2
\&    use SVN::Core;
\&    use SVN::Repos;
\&
\&    my $repos = SVN::Repos::open (\*(Aq/repo/sandbox\*(Aq);
\&
\&    open my $fh, ">/tmp/tmp.dump" or die "Cannot open file: $!\en";
\&
\&    my $start_rev   = 10;
\&    my $end_rev     = 20;
\&    my $incremental = 1;
\&    my $deltify     = 1;
\&
\&    $repos\->dump_fs2($fh, \e*STDOUT,          # Dump file => $fh, Feedback => STDOUT
\&                     $start_rev, $end_rev,   # Revision Range
\&                     $incremental, $deltify, # Options
\&                     undef, undef);          # Cancel Function
\&
\&    close $fh;
.Ve
.ie n .IP "$repos\->load_fs($dumpfile_fh, $feedback_fh, $uuid_action, $parent_dir, $cancel_func, $cancel_baton);" 4
.el .IP "\f(CW$repos\fR\->load_fs($dumpfile_fh, \f(CW$feedback_fh\fR, \f(CW$uuid_action\fR, \f(CW$parent_dir\fR, \f(CW$cancel_func\fR, \f(CW$cancel_baton\fR);" 4
.IX Item "$repos->load_fs($dumpfile_fh, $feedback_fh, $uuid_action, $parent_dir, $cancel_func, $cancel_baton);"
.PD 0
.ie n .IP "$repos\->load_fs2($dumpfile_fh, $feedback_fh, $uuid_action, $parent_dir, $use_pre_commit_hook, $use_post_commit_hook, $cancel_func, $cancel_baton);" 4
.el .IP "\f(CW$repos\fR\->load_fs2($dumpfile_fh, \f(CW$feedback_fh\fR, \f(CW$uuid_action\fR, \f(CW$parent_dir\fR, \f(CW$use_pre_commit_hook\fR, \f(CW$use_post_commit_hook\fR, \f(CW$cancel_func\fR, \f(CW$cancel_baton\fR);" 4
.IX Item "$repos->load_fs2($dumpfile_fh, $feedback_fh, $uuid_action, $parent_dir, $use_pre_commit_hook, $use_post_commit_hook, $cancel_func, $cancel_baton);"
.PD
Loads a dumpfile specified by the \f(CW$dumpfile_fh\fR filehandle into the repository.
If the dumpstream contains copy history that is unavailable in the repository,
an error will be thrown.
.Sp
The repository's \s-1UUID\s0 will be updated iff the dumpstream contains a \s-1UUID\s0 and
\&\f(CW$uuid_action\fR is not equal to \f(CW$SVN::Repos::load_uuid_ignore\fR and either the
repository contains no revisions or \f(CW$uuid_action\fR is equal to
\&\f(CW$SVN::Repos::load_uuid_force\fR.
.Sp
If the dumpstream contains no \s-1UUID\s0, then \f(CW$uuid_action\fR is
ignored and the repository \s-1UUID\s0 is not touched.
.Sp
If \f(CW$parent_dir\fR is not null, then the parser will reparent all the
loaded nodes, from root to \f(CW@a\fR parent_dir.  The directory \f(CW$parent_dir\fR
must be an existing directory in the repository.
.Sp
If \f(CW$use_pre_commit_hook\fR is set, call the repository's pre-commit
hook before committing each loaded revision.
.Sp
If \f(CW$use_post_commit_hook\fR is set, call the repository's
post-commit hook after committing each loaded revision.
.Sp
If \f(CW$cancel_func\fR is not \s-1NULL\s0, it is called periodically with
\&\f(CW$cancel_baton\fR as argument to see if the client wishes to cancel
the load.
.Sp
You must at least provide undef for these parameters for the method call
to work.
.Sp
Example:
    use SVN::Core;
    use SVN::Repos;
.Sp
.Vb 1
\&    my $repos = SVN::Repos::open (\*(Aq/repo/test_repo\*(Aq);
\&
\&    open my $fh, "/repo/sandbox.dump" or die "Cannot open file: $!\en";
\&
\&    my $parent_dir = \*(Aq/\*(Aq;
\&    my $use_pre_commit_hook  = 0;
\&    my $use_post_commit_hook = 0;
\&
\&    $repos\->load_fs2($fh, \e*STDOUT,
\&                     $SVN::Repos::load_uuid_ignore, # Ignore uuid
\&                     $parent_dir,
\&                     $use_pre_commit_hook,  # Use pre\-commit hook?
\&                     $use_post_commit_hook, # Use post\-commit hook?
\&                     undef, undef);
\&
\&
\&    close $fh;
.Ve
.ie n .IP "$repos\->\fIfs()\fR" 4
.el .IP "\f(CW$repos\fR\->\fIfs()\fR" 4
.IX Item "$repos->fs()"
Returns the \f(CW\*(C`SVN::Fs\*(C'\fR object for this repository.
.ie n .IP "$repos\->get_logs([$path, ...], $start, $end, $discover_changed_paths, $strict_node_history, $receiver)" 4
.el .IP "\f(CW$repos\fR\->get_logs([$path, ...], \f(CW$start\fR, \f(CW$end\fR, \f(CW$discover_changed_paths\fR, \f(CW$strict_node_history\fR, \f(CW$receiver\fR)" 4
.IX Item "$repos->get_logs([$path, ...], $start, $end, $discover_changed_paths, $strict_node_history, $receiver)"
Iterates over all the revisions that affect the list of paths passed
as the first parameter, starting at \f(CW$start\fR, and ending at \f(CW$end\fR.
.Sp
\&\f(CW$receiver\fR is called for each change.  The arguments to \f(CW$receiver\fR are:
.RS 4
.ie n .IP "$self" 4
.el .IP "\f(CW$self\fR" 4
.IX Item "$self"
The \f(CW\*(C`SVN::Repos\*(C'\fR object.
.ie n .IP "$paths" 4
.el .IP "\f(CW$paths\fR" 4
.IX Item "$paths"
\&\f(CW\*(C`undef\*(C'\fR if \f(CW$discover_changed_paths\fR is false.  Otherwise, contains a hash
of paths that have changed in this revision.
.ie n .IP "$rev" 4
.el .IP "\f(CW$rev\fR" 4
.IX Item "$rev"
The revision this change occured in.
.ie n .IP "$date" 4
.el .IP "\f(CW$date\fR" 4
.IX Item "$date"
The date and time the revision occured.
.ie n .IP "$msg" 4
.el .IP "\f(CW$msg\fR" 4
.IX Item "$msg"
The log message associated with this revision.
.ie n .IP "$pool" 4
.el .IP "\f(CW$pool\fR" 4
.IX Item "$pool"
An \f(CW\*(C`SVN::Pool\*(C'\fR object which may be used in the function.
.RE
.RS 4
.Sp
If \f(CW$strict_node_history\fR is true then copies will not be traversed.
.RE
.SS "\s-1ADDITIONAL\s0 \s-1METHODS\s0"
.IX Subsection "ADDITIONAL METHODS"
The following methods work, but are not currently documented in this
file.  Please consult the svn_repos.h section in the Subversion \s-1API\s0
for more details.
.ie n .IP "$repos\->get_commit_editor(...)" 4
.el .IP "\f(CW$repos\fR\->get_commit_editor(...)" 4
.IX Item "$repos->get_commit_editor(...)"
.PD 0
.ie n .IP "$repos\->get_commit_editor2(...)" 4
.el .IP "\f(CW$repos\fR\->get_commit_editor2(...)" 4
.IX Item "$repos->get_commit_editor2(...)"
.ie n .IP "$repos\->path(...)" 4
.el .IP "\f(CW$repos\fR\->path(...)" 4
.IX Item "$repos->path(...)"
.ie n .IP "$repos\->db_env(...)" 4
.el .IP "\f(CW$repos\fR\->db_env(...)" 4
.IX Item "$repos->db_env(...)"
.ie n .IP "$repos\->lock_dir(...)" 4
.el .IP "\f(CW$repos\fR\->lock_dir(...)" 4
.IX Item "$repos->lock_dir(...)"
.ie n .IP "$repos\->db_lockfile(...)" 4
.el .IP "\f(CW$repos\fR\->db_lockfile(...)" 4
.IX Item "$repos->db_lockfile(...)"
.ie n .IP "$repos\->hook_dir(...)" 4
.el .IP "\f(CW$repos\fR\->hook_dir(...)" 4
.IX Item "$repos->hook_dir(...)"
.ie n .IP "$repos\->start_commit_hook(...)" 4
.el .IP "\f(CW$repos\fR\->start_commit_hook(...)" 4
.IX Item "$repos->start_commit_hook(...)"
.ie n .IP "$repos\->pre_commit_hook(...)" 4
.el .IP "\f(CW$repos\fR\->pre_commit_hook(...)" 4
.IX Item "$repos->pre_commit_hook(...)"
.ie n .IP "$repos\->post_commit_hook(...)" 4
.el .IP "\f(CW$repos\fR\->post_commit_hook(...)" 4
.IX Item "$repos->post_commit_hook(...)"
.ie n .IP "$repos\->pre_revprop_change(...)" 4
.el .IP "\f(CW$repos\fR\->pre_revprop_change(...)" 4
.IX Item "$repos->pre_revprop_change(...)"
.ie n .IP "$repos\->post_revprop_change(...)" 4
.el .IP "\f(CW$repos\fR\->post_revprop_change(...)" 4
.IX Item "$repos->post_revprop_change(...)"
.ie n .IP "$repos\->dated_revision(...)" 4
.el .IP "\f(CW$repos\fR\->dated_revision(...)" 4
.IX Item "$repos->dated_revision(...)"
.ie n .IP "$repos\->fs_commit_txn(...)" 4
.el .IP "\f(CW$repos\fR\->fs_commit_txn(...)" 4
.IX Item "$repos->fs_commit_txn(...)"
.ie n .IP "$repos\->fs_being_txn_for_commit(...)" 4
.el .IP "\f(CW$repos\fR\->fs_being_txn_for_commit(...)" 4
.IX Item "$repos->fs_being_txn_for_commit(...)"
.ie n .IP "$repos\->fs_being_txn_for_update(...)" 4
.el .IP "\f(CW$repos\fR\->fs_being_txn_for_update(...)" 4
.IX Item "$repos->fs_being_txn_for_update(...)"
.ie n .IP "$repos\->fs_change_rev_prop(...)" 4
.el .IP "\f(CW$repos\fR\->fs_change_rev_prop(...)" 4
.IX Item "$repos->fs_change_rev_prop(...)"
.ie n .IP "$repos\->node_editor(...)" 4
.el .IP "\f(CW$repos\fR\->node_editor(...)" 4
.IX Item "$repos->node_editor(...)"
.ie n .IP "$repos\->dump_fs(...)" 4
.el .IP "\f(CW$repos\fR\->dump_fs(...)" 4
.IX Item "$repos->dump_fs(...)"
.ie n .IP "$repos\->load_fs(...)" 4
.el .IP "\f(CW$repos\fR\->load_fs(...)" 4
.IX Item "$repos->load_fs(...)"
.ie n .IP "$repos\->get_fs_build_parser(...)" 4
.el .IP "\f(CW$repos\fR\->get_fs_build_parser(...)" 4
.IX Item "$repos->get_fs_build_parser(...)"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
Chia-liang Kao <clkao@clkao.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2006 CollabNet.  All rights reserved.
.PP
This software is licensed as described in the file \s-1COPYING\s0, which you
should have received as part of this distribution.  The terms are also
available at http://subversion.tigris.org/license\-1.html.  If newer
versions of this license are posted there, you may use a newer version
instead, at your option.
.PP
This software consists of voluntary contributions made by many
individuals.  For exact contribution history, see the revision history
and logs, available at http://subversion.tigris.org/.
