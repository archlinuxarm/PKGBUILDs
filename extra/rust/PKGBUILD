# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

# ALARM: Kevin Mihelich <kevin@archlinuxarm.org>
#  - remove lib32, musl, and wasm packages and related bits
#  - add a link to g++ to compensate for broken cross-compiler decisions
#  - build v6/v7 with -j2 - RAM constraints
#  - set llvm-config in config.toml for ARM architectures
#  - set debuginfo-level = 0 in config.toml - RAM constraints
#  - build aarch64 with 16k page support

highmem=1

pkgbase=rust
pkgname=(rust rust-src)
epoch=1
pkgver=1.65.0
pkgrel=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=(x86_64)
license=(MIT Apache)
options=(!emptydirs !strip !lto)
depends=(gcc-libs llvm-libs curl libssh2 gcc)
makedepends=(rust llvm libffi perl python cmake musl ninja
             lld openssl-1.1)
checkdepends=(procps-ng gdb)
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  0001-cargo-Change-libexec-dir.patch
  0001-bootstrap-Change-libexec-dir.patch
  0002-compiler-Change-LLVM-targets.patch
  0003-compiler-Use-wasm-ld-for-wasm-targets.patch
)
sha256sums=('5828bb67f677eabf8c384020582b0ce7af884e1c84389484f7f8d00dd82c0038'
            'SKIP'
            'c901a9bb036c29ca092f7dbc8b447efdd9aa1044a902a88f9d024cb22681dc19'
            'c88389c7ac2ce832c39450171af8fbd9bfe26f8e683f28b776b492c972fda359'
            '5fd1d52cb58c31fb6b0179eec41f5234523dfce799c8f895b1d2d663ca0573db'
            '27cc0fa1ef37c1ced77f62c6b0de7590b8aa88256dced3f9b87adb7c488ffa5e')
validpgpkeys=(108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
              474E22316ABF4785A88C6E8EA2C794A986419D8A) # Tom Stellard <tstellar@redhat.com>

prepare() {
  cd rustc-$pkgver-src

  # Patch bootstrap and cargo so credential helpers
  # are in /usr/lib instead of /usr/libexec
  patch -d src/tools/cargo -Np1 < ../0001-cargo-Change-libexec-dir.patch
  patch -Np1 -i ../0001-bootstrap-Change-libexec-dir.patch

  # Use our *-pc-linux-gnu targets, making LTO with clang simpler
  patch -Np1 -i ../0002-compiler-Change-LLVM-targets.patch

  # Use our wasm-ld
  patch -Np1 -i ../0003-compiler-Use-wasm-ld-for-wasm-targets.patch

  cat >config.toml <<END
changelog-seen = 2
profile = "user"

[llvm]
link-shared = true

[build]
cargo = "/usr/bin/cargo"
rustc = "/usr/bin/rustc"
rustfmt = "/usr/bin/rustfmt"
locked-deps = true
vendor = true
tools = ["cargo", "rls", "clippy", "rustfmt", "analysis", "src", "rust-demangler"]
sanitizers = false
profiler = true

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "/usr"

[rust]
debuginfo-level-std = 0
channel = "stable"
description = "Arch Linux $pkgbase $epoch:$pkgver-$pkgrel"
rpath = false
backtrace-on-ice = true
remap-debuginfo = true
jemalloc = true

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

[dist]
compression-formats = ["gz"]

[target.x86_64-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"

[target.aarch64-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

[target.armv7-unknown-linux-gnueabihf]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

[target.arm-unknown-linux-gnueabihf]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"
END

  if [[ $CARCH == armv7h ]]; then
    mkdir path
    ln -s /usr/bin/g++ path/arm-linux-gnueabihf-g++
    export PATH="$srcdir/path:$PATH"
  fi
  if [[ $CARCH == armv7h || $CARCH == armv6h ]]; then
    jobs="-j 2"
  fi
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {
  cd rustc-$pkgver-src

  [[ $CARCH == "aarch64" ]] && export JEMALLOC_SYS_WITH_LG_PAGE=16
  export RUST_BACKTRACE=1

  DESTDIR="$srcdir/dest-rust" python ./x.py install -j "$(nproc)"

  cd ../dest-rust

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  #mkdir -p usr/lib32
  #ln -srft usr/lib   usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/*.so
  #ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so

  mkdir -p usr/share/bash-completion
  mv etc/bash_completion.d usr/share/bash-completion/completions

  mkdir -p usr/share/licenses/rust
  mv -t usr/share/licenses/rust usr/share/doc/rust/{COPYRIGHT,LICENSE*}

  #_pick dest-i686 usr/lib/rustlib/i686-unknown-linux-gnu usr/lib32
  #_pick dest-musl usr/lib/rustlib/x86_64-unknown-linux-musl
  #_pick dest-wasm usr/lib/rustlib/wasm32-*
  _pick dest-src  usr/lib/rustlib/src
}

package_rust() {
  optdepends=('lldb: rust-lldb script'
              'gdb: rust-gdb script')
  provides=(cargo rustfmt)
  conflicts=(cargo rustfmt 'rust-docs<1:1.56.1-3')
  replaces=(cargo rustfmt cargo-tree 'rust-docs<1:1.56.1-3')

  cp -a dest-rust/* "$pkgdir"
}

package_rust-src() {
  pkgdesc="Source code for the Rust standard library"
  depends=(rust)

  cp -a dest-src/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

# vim:set ts=2 sw=2 et:
